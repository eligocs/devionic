var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var TouchIDOriginal = /** @class */ (function (_super) {
    __extends(TouchIDOriginal, _super);
    function TouchIDOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TouchIDOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    TouchIDOriginal.prototype.verifyFingerprint = function (message) { return cordova(this, "verifyFingerprint", {}, arguments); };
    TouchIDOriginal.prototype.verifyFingerprintWithCustomPasswordFallback = function (message) { return cordova(this, "verifyFingerprintWithCustomPasswordFallback", {}, arguments); };
    TouchIDOriginal.prototype.verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel = function (message, enterPasswordLabel) { return cordova(this, "verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel", {}, arguments); };
    TouchIDOriginal.prototype.didFingerprintDatabaseChange = function () { return cordova(this, "didFingerprintDatabaseChange", {}, arguments); };
    TouchIDOriginal.pluginName = "TouchID";
    TouchIDOriginal.plugin = "cordova-plugin-touch-id";
    TouchIDOriginal.pluginRef = "plugins.touchid";
    TouchIDOriginal.repo = "https://github.com/EddyVerbruggen/cordova-plugin-touch-id";
    TouchIDOriginal.platforms = ["iOS"];
    return TouchIDOriginal;
}(IonicNativePlugin));
var TouchID = new TouchIDOriginal();
export { TouchID };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3RvdWNoLWlkL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQW1EM0MsMkJBQWlCOzs7O0lBTzVDLDZCQUFXO0lBV1gsbUNBQWlCLGFBQUMsT0FBZTtJQVdqQyw2REFBMkMsYUFBQyxPQUFlO0lBWTNELGtGQUFnRSxhQUM5RCxPQUFlLEVBQ2Ysa0JBQTBCO0lBVzVCLDhDQUE0Qjs7Ozs7O2tCQTFHOUI7RUFvRDZCLGlCQUFpQjtTQUFqQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgVG91Y2ggSURcbiAqIEBkZXNjcmlwdGlvblxuICogU2NhbiB0aGUgZmluZ2VycHJpbnQgb2YgYSB1c2VyIHdpdGggdGhlIFRvdWNoSUQgc2Vuc29yLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tdG91Y2gtaWRgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbVG91Y2hJRCBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLXRvdWNoLWlkKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFRvdWNoSUQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3RvdWNoLWlkL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSB0b3VjaElkOiBUb3VjaElEKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnRvdWNoSWQuaXNBdmFpbGFibGUoKVxuICogICAudGhlbihcbiAqICAgICByZXMgPT4gY29uc29sZS5sb2coJ1RvdWNoSUQgaXMgYXZhaWxhYmxlIScpLFxuICogICAgIGVyciA9PiBjb25zb2xlLmVycm9yKCdUb3VjaElEIGlzIG5vdCBhdmFpbGFibGUnLCBlcnIpXG4gKiAgICk7XG4gKlxuICogdGhpcy50b3VjaElkLnZlcmlmeUZpbmdlcnByaW50KCdTY2FuIHlvdXIgZmluZ2VycHJpbnQgcGxlYXNlJylcbiAqICAgLnRoZW4oXG4gKiAgICAgcmVzID0+IGNvbnNvbGUubG9nKCdPaycsIHJlcyksXG4gKiAgICAgZXJyID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yJywgZXJyKVxuICogICApO1xuICogYGBgXG4gKlxuICogIyMjIEVycm9yIENvZGVzXG4gKlxuICogVGhlIHBsdWdpbiB3aWxsIHJlamVjdCBmb3IgdmFyaW91cyByZWFzb25zLiBZb3VyIGFwcCB3aWxsIG1vc3QgbGlrZWx5IG5lZWQgdG8gcmVzcG9uZCB0byB0aGUgY2FzZXMgZGlmZmVyZW50bHkuXG4gKlxuICogSGVyZSBpcyBhIGxpc3Qgb2Ygc29tZSBvZiB0aGUgZXJyb3IgY29kZXM6XG4gKlxuICogIC0gIGAtMWAgLSBGaW5nZXJwcmludCBzY2FuIGZhaWxlZCBtb3JlIHRoYW4gMyB0aW1lc1xuICogIC0gIGAtMmAgb3IgYC0xMjhgIC0gVXNlciB0YXBwZWQgdGhlICdDYW5jZWwnIGJ1dHRvblxuICogIC0gIGAtM2AgLSBVc2VyIHRhcHBlZCB0aGUgJ0VudGVyIFBhc3Njb2RlJyBvciAnRW50ZXIgUGFzc3dvcmQnIGJ1dHRvblxuICogIC0gIGAtNGAgLSBUaGUgc2NhbiB3YXMgY2FuY2VsbGVkIGJ5IHRoZSBzeXN0ZW0gKEhvbWUgYnV0dG9uIGZvciBleGFtcGxlKVxuICogIC0gIGAtNmAgLSBUb3VjaElEIGlzIG5vdCBBdmFpbGFibGVcbiAqICAtICBgLThgIC0gVG91Y2hJRCBpcyBsb2NrZWQgb3V0IGZyb20gdG9vIG1hbnkgdHJpZXNcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdUb3VjaElEJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tdG91Y2gtaWQnLFxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLnRvdWNoaWQnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLXRvdWNoLWlkJyxcbiAgcGxhdGZvcm1zOiBbJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUb3VjaElEIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ2hlY2tzIFdoZXRoZXIgVG91Y2hJRCBpcyBhdmFpbGFibGUgb3Igbm90LlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHllcywgcmVqZWN0cyBpZiBuby5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2hvdyBUb3VjaElEIGRpYWxvZyBhbmQgd2FpdCBmb3IgYSBmaW5nZXJwcmludCBzY2FuLiBJZiB1c2VyIHRhcHMgJ0VudGVyIFBhc3N3b3JkJyBidXR0b24sIGJyaW5ncyB1cCBzdGFuZGFyZCBzeXN0ZW0gcGFzc2NvZGUgc2NyZWVuLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGUgcmVzb2x2ZXMgaWYgdGhlIGZpbmdlcnByaW50IHNjYW4gd2FzIHN1Y2Nlc3NmdWwsIHJlamVjdHMgd2l0aCBhbiBlcnJvciBjb2RlIChzZWUgYWJvdmUpLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB2ZXJpZnlGaW5nZXJwcmludChtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IFRvdWNoSUQgZGlhbG9nIGFuZCB3YWl0IGZvciBhIGZpbmdlcnByaW50IHNjYW4uIElmIHVzZXIgdGFwcyAnRW50ZXIgUGFzc3dvcmQnIGJ1dHRvbiwgcmVqZWN0cyB3aXRoIGNvZGUgJy0zJyAoc2VlIGFib3ZlKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXlcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhlIHJlc29sdmVzIGlmIHRoZSBmaW5nZXJwcmludCBzY2FuIHdhcyBzdWNjZXNzZnVsLCByZWplY3RzIHdpdGggYW4gZXJyb3IgY29kZSAoc2VlIGFib3ZlKS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdmVyaWZ5RmluZ2VycHJpbnRXaXRoQ3VzdG9tUGFzc3dvcmRGYWxsYmFjayhtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IFRvdWNoSUQgZGlhbG9nIHdpdGggY3VzdG9tICdFbnRlciBQYXNzd29yZCcgbWVzc2FnZSBhbmQgd2FpdCBmb3IgYSBmaW5nZXJwcmludCBzY2FuLiBJZiB1c2VyIHRhcHMgJ0VudGVyIFBhc3N3b3JkJyBidXR0b24sIHJlamVjdHMgd2l0aCBjb2RlICctMycgKHNlZSBhYm92ZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlICBUaGUgbWVzc2FnZSB0byBkaXNwbGF5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbnRlclBhc3N3b3JkTGFiZWwgIEN1c3RvbSB0ZXh0IGZvciB0aGUgJ0VudGVyIFBhc3N3b3JkJyBidXR0b25cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhlIHJlc29sdmVzIGlmIHRoZSBmaW5nZXJwcmludCBzY2FuIHdhcyBzdWNjZXNzZnVsLCByZWplY3RzIHdpdGggYW4gZXJyb3IgY29kZSAoc2VlIGFib3ZlKS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdmVyaWZ5RmluZ2VycHJpbnRXaXRoQ3VzdG9tUGFzc3dvcmRGYWxsYmFja0FuZEVudGVyUGFzc3dvcmRMYWJlbChcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgZW50ZXJQYXNzd29yZExhYmVsOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBmaW5nZXJwcmludCBkYXRhYmFzZSBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHllcywgcmVqZWN0cyBpZiBuby5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGlkRmluZ2VycHJpbnREYXRhYmFzZUNoYW5nZSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19