import { IonicNativePlugin } from '@ionic-native/core';
/**
 * @name Touch ID
 * @description
 * Scan the fingerprint of a user with the TouchID sensor.
 *
 * Requires Cordova plugin: `cordova-plugin-touch-id`. For more info, please see the [TouchID plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-touch-id).
 *
 * @usage
 * ```typescript
 * import { TouchID } from '@ionic-native/touch-id/ngx';
 *
 * constructor(private touchId: TouchID) { }
 *
 * ...
 *
 * this.touchId.isAvailable()
 *   .then(
 *     res => console.log('TouchID is available!'),
 *     err => console.error('TouchID is not available', err)
 *   );
 *
 * this.touchId.verifyFingerprint('Scan your fingerprint please')
 *   .then(
 *     res => console.log('Ok', res),
 *     err => console.error('Error', err)
 *   );
 * ```
 *
 * ### Error Codes
 *
 * The plugin will reject for various reasons. Your app will most likely need to respond to the cases differently.
 *
 * Here is a list of some of the error codes:
 *
 *  -  `-1` - Fingerprint scan failed more than 3 times
 *  -  `-2` or `-128` - User tapped the 'Cancel' button
 *  -  `-3` - User tapped the 'Enter Passcode' or 'Enter Password' button
 *  -  `-4` - The scan was cancelled by the system (Home button for example)
 *  -  `-6` - TouchID is not Available
 *  -  `-8` - TouchID is locked out from too many tries
 */
import * as ɵngcc0 from '@angular/core';
export declare class TouchID extends IonicNativePlugin {
    /**
     * Checks Whether TouchID is available or not.
     *
     * @returns {Promise<any>} Returns a Promise that resolves if yes, rejects if no.
     */
    isAvailable(): Promise<any>;
    /**
     * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, brings up standard system passcode screen.
     *
     * @param {string} message  The message to display
     * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).
     */
    verifyFingerprint(message: string): Promise<any>;
    /**
     * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).
     *
     * @param {string} message  The message to display
     * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).
     */
    verifyFingerprintWithCustomPasswordFallback(message: string): Promise<any>;
    /**
     * Show TouchID dialog with custom 'Enter Password' message and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).
     *
     * @param {string} message  The message to display
     * @param {string} enterPasswordLabel  Custom text for the 'Enter Password' button
     * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).
     */
    verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel(message: string, enterPasswordLabel: string): Promise<any>;
    /**
     * Checks if the fingerprint database changed.
     *
     * @returns {Promise<any>} Returns a Promise that resolves if yes, rejects if no.
     */
    didFingerprintDatabaseChange(): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TouchID, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<TouchID>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG4vKipcbiAqIEBuYW1lIFRvdWNoIElEXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNjYW4gdGhlIGZpbmdlcnByaW50IG9mIGEgdXNlciB3aXRoIHRoZSBUb3VjaElEIHNlbnNvci5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLXRvdWNoLWlkYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW1RvdWNoSUQgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi10b3VjaC1pZCkuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBUb3VjaElEIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS90b3VjaC1pZC9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdG91Y2hJZDogVG91Y2hJRCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy50b3VjaElkLmlzQXZhaWxhYmxlKClcbiAqICAgLnRoZW4oXG4gKiAgICAgcmVzID0+IGNvbnNvbGUubG9nKCdUb3VjaElEIGlzIGF2YWlsYWJsZSEnKSxcbiAqICAgICBlcnIgPT4gY29uc29sZS5lcnJvcignVG91Y2hJRCBpcyBub3QgYXZhaWxhYmxlJywgZXJyKVxuICogICApO1xuICpcbiAqIHRoaXMudG91Y2hJZC52ZXJpZnlGaW5nZXJwcmludCgnU2NhbiB5b3VyIGZpbmdlcnByaW50IHBsZWFzZScpXG4gKiAgIC50aGVuKFxuICogICAgIHJlcyA9PiBjb25zb2xlLmxvZygnT2snLCByZXMpLFxuICogICAgIGVyciA9PiBjb25zb2xlLmVycm9yKCdFcnJvcicsIGVycilcbiAqICAgKTtcbiAqIGBgYFxuICpcbiAqICMjIyBFcnJvciBDb2Rlc1xuICpcbiAqIFRoZSBwbHVnaW4gd2lsbCByZWplY3QgZm9yIHZhcmlvdXMgcmVhc29ucy4gWW91ciBhcHAgd2lsbCBtb3N0IGxpa2VseSBuZWVkIHRvIHJlc3BvbmQgdG8gdGhlIGNhc2VzIGRpZmZlcmVudGx5LlxuICpcbiAqIEhlcmUgaXMgYSBsaXN0IG9mIHNvbWUgb2YgdGhlIGVycm9yIGNvZGVzOlxuICpcbiAqICAtICBgLTFgIC0gRmluZ2VycHJpbnQgc2NhbiBmYWlsZWQgbW9yZSB0aGFuIDMgdGltZXNcbiAqICAtICBgLTJgIG9yIGAtMTI4YCAtIFVzZXIgdGFwcGVkIHRoZSAnQ2FuY2VsJyBidXR0b25cbiAqICAtICBgLTNgIC0gVXNlciB0YXBwZWQgdGhlICdFbnRlciBQYXNzY29kZScgb3IgJ0VudGVyIFBhc3N3b3JkJyBidXR0b25cbiAqICAtICBgLTRgIC0gVGhlIHNjYW4gd2FzIGNhbmNlbGxlZCBieSB0aGUgc3lzdGVtIChIb21lIGJ1dHRvbiBmb3IgZXhhbXBsZSlcbiAqICAtICBgLTZgIC0gVG91Y2hJRCBpcyBub3QgQXZhaWxhYmxlXG4gKiAgLSAgYC04YCAtIFRvdWNoSUQgaXMgbG9ja2VkIG91dCBmcm9tIHRvbyBtYW55IHRyaWVzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRvdWNoSUQgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIFdoZXRoZXIgVG91Y2hJRCBpcyBhdmFpbGFibGUgb3Igbm90LlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB5ZXMsIHJlamVjdHMgaWYgbm8uXG4gICAgICovXG4gICAgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFNob3cgVG91Y2hJRCBkaWFsb2cgYW5kIHdhaXQgZm9yIGEgZmluZ2VycHJpbnQgc2Nhbi4gSWYgdXNlciB0YXBzICdFbnRlciBQYXNzd29yZCcgYnV0dG9uLCBicmluZ3MgdXAgc3RhbmRhcmQgc3lzdGVtIHBhc3Njb2RlIHNjcmVlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlICBUaGUgbWVzc2FnZSB0byBkaXNwbGF5XG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhlIHJlc29sdmVzIGlmIHRoZSBmaW5nZXJwcmludCBzY2FuIHdhcyBzdWNjZXNzZnVsLCByZWplY3RzIHdpdGggYW4gZXJyb3IgY29kZSAoc2VlIGFib3ZlKS5cbiAgICAgKi9cbiAgICB2ZXJpZnlGaW5nZXJwcmludChtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogU2hvdyBUb3VjaElEIGRpYWxvZyBhbmQgd2FpdCBmb3IgYSBmaW5nZXJwcmludCBzY2FuLiBJZiB1c2VyIHRhcHMgJ0VudGVyIFBhc3N3b3JkJyBidXR0b24sIHJlamVjdHMgd2l0aCBjb2RlICctMycgKHNlZSBhYm92ZSkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlIHRoZSByZXNvbHZlcyBpZiB0aGUgZmluZ2VycHJpbnQgc2NhbiB3YXMgc3VjY2Vzc2Z1bCwgcmVqZWN0cyB3aXRoIGFuIGVycm9yIGNvZGUgKHNlZSBhYm92ZSkuXG4gICAgICovXG4gICAgdmVyaWZ5RmluZ2VycHJpbnRXaXRoQ3VzdG9tUGFzc3dvcmRGYWxsYmFjayhtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogU2hvdyBUb3VjaElEIGRpYWxvZyB3aXRoIGN1c3RvbSAnRW50ZXIgUGFzc3dvcmQnIG1lc3NhZ2UgYW5kIHdhaXQgZm9yIGEgZmluZ2VycHJpbnQgc2Nhbi4gSWYgdXNlciB0YXBzICdFbnRlciBQYXNzd29yZCcgYnV0dG9uLCByZWplY3RzIHdpdGggY29kZSAnLTMnIChzZWUgYWJvdmUpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW50ZXJQYXNzd29yZExhYmVsICBDdXN0b20gdGV4dCBmb3IgdGhlICdFbnRlciBQYXNzd29yZCcgYnV0dG9uXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhlIHJlc29sdmVzIGlmIHRoZSBmaW5nZXJwcmludCBzY2FuIHdhcyBzdWNjZXNzZnVsLCByZWplY3RzIHdpdGggYW4gZXJyb3IgY29kZSAoc2VlIGFib3ZlKS5cbiAgICAgKi9cbiAgICB2ZXJpZnlGaW5nZXJwcmludFdpdGhDdXN0b21QYXNzd29yZEZhbGxiYWNrQW5kRW50ZXJQYXNzd29yZExhYmVsKG1lc3NhZ2U6IHN0cmluZywgZW50ZXJQYXNzd29yZExhYmVsOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBmaW5nZXJwcmludCBkYXRhYmFzZSBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB5ZXMsIHJlamVjdHMgaWYgbm8uXG4gICAgICovXG4gICAgZGlkRmluZ2VycHJpbnREYXRhYmFzZUNoYW5nZSgpOiBQcm9taXNlPGFueT47XG59XG4iXX0=