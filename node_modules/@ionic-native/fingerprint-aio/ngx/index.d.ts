import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export interface FingerprintOptions {
    /**
     * Title in biometric prompt (android only)
     * @default {APP_NAME} Biometric Sign On
     */
    title?: string;
    /**
     * Subtitle in biometric Prompt (android only)
     * @default null
     */
    subtitle?: string;
    /**
     * Description in biometric Prompt
     * @default null
     */
    description?: string;
    /**
     * Title of fallback button.
     * @default "Use Pin"
     */
    fallbackButtonTitle?: string;
    /**
     * Title for cancel button on Android
     * @default "Cancel"
     */
    cancelButtonTitle?: string;
    /**
     * Disable 'use backup' option.
     * @default false
     */
    disableBackup?: boolean;
}
/**
 * @name Fingerprint AIO
 * @description
 * Use simple fingerprint authentication on Android and iOS.
 * Requires Cordova plugin: cordova-plugin-fingerprint-aio. For more info about plugin, vist: https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio
 *
 * @usage
 * ```typescript
 * import { FingerprintAIO } from '@ionic-native/fingerprint-aio/ngx';
 *
 * constructor(private faio: FingerprintAIO) { }
 *
 * ...
 *
 * this.faio.show().then((result: any) => console.log(result)).catch((error: any) => console.log(error));
 *
 *  OR with options...
 *
 * this.faio.show({
 *     title: 'Biometric Authentication', // (Android Only) | optional | Default: "<APP_NAME> Biometric Sign On"
 *     subtitle: 'Coolest Plugin ever' // (Android Only) | optional | Default: null
 *     description: 'Please authenticate' // optional | Default: null
 *     fallbackButtonTitle: 'Use Backup', // optional | When disableBackup is false defaults to "Use Pin".
 *                                        // When disableBackup is true defaults to "Cancel"
 *     disableBackup:true,  // optional | default: false
 * })
 * .then((result: any) => console.log(result))
 * .catch((error: any) => console.log(error));
 *
 * ```
 * @interfaces
 * FingerprintOptions
 */
export declare class FingerprintAIO extends IonicNativePlugin {
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_UNKNOWN_ERROR: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_UNAVAILABLE: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_AUTHENTICATION_FAILED: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_SDK_NOT_SUPPORTED: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_HARDWARE_NOT_SUPPORTED: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_PERMISSION_NOT_GRANTED: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_NOT_ENROLLED: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_INTERNAL_PLUGIN_ERROR: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_DISMISSED: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_PIN_OR_PATTERN_DISMISSED: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_SCREEN_GUARD_UNSECURED: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_LOCKED_OUT: number;
    /**
     * Convenience constant
     * @type {number}
     */
    BIOMETRIC_LOCKED_OUT_PERMANENT: number;
    /**
     * Check if fingerprint authentication is available
     * @return {Promise<any>} Returns a promise with result
     */
    isAvailable(): Promise<any>;
    /**
     * Show authentication dialogue
     * @param {FingerprintOptions} options Options for platform specific fingerprint API
     * @return {Promise<any>} Returns a promise that resolves when authentication was successful
     */
    show(options: FingerprintOptions): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FingerprintAIO, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FingerprintAIO>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5leHBvcnQgaW50ZXJmYWNlIEZpbmdlcnByaW50T3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogVGl0bGUgaW4gYmlvbWV0cmljIHByb21wdCAoYW5kcm9pZCBvbmx5KVxuICAgICAqIEBkZWZhdWx0IHtBUFBfTkFNRX0gQmlvbWV0cmljIFNpZ24gT25cbiAgICAgKi9cbiAgICB0aXRsZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTdWJ0aXRsZSBpbiBiaW9tZXRyaWMgUHJvbXB0IChhbmRyb2lkIG9ubHkpXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHN1YnRpdGxlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uIGluIGJpb21ldHJpYyBQcm9tcHRcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGl0bGUgb2YgZmFsbGJhY2sgYnV0dG9uLlxuICAgICAqIEBkZWZhdWx0IFwiVXNlIFBpblwiXG4gICAgICovXG4gICAgZmFsbGJhY2tCdXR0b25UaXRsZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaXRsZSBmb3IgY2FuY2VsIGJ1dHRvbiBvbiBBbmRyb2lkXG4gICAgICogQGRlZmF1bHQgXCJDYW5jZWxcIlxuICAgICAqL1xuICAgIGNhbmNlbEJ1dHRvblRpdGxlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERpc2FibGUgJ3VzZSBiYWNrdXAnIG9wdGlvbi5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGRpc2FibGVCYWNrdXA/OiBib29sZWFuO1xufVxuLyoqXG4gKiBAbmFtZSBGaW5nZXJwcmludCBBSU9cbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHNpbXBsZSBmaW5nZXJwcmludCBhdXRoZW50aWNhdGlvbiBvbiBBbmRyb2lkIGFuZCBpT1MuXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogY29yZG92YS1wbHVnaW4tZmluZ2VycHJpbnQtYWlvLiBGb3IgbW9yZSBpbmZvIGFib3V0IHBsdWdpbiwgdmlzdDogaHR0cHM6Ly9naXRodWIuY29tL05pa2xhc01lcnovY29yZG92YS1wbHVnaW4tZmluZ2VycHJpbnQtYWlvXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBGaW5nZXJwcmludEFJTyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZmluZ2VycHJpbnQtYWlvL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBmYWlvOiBGaW5nZXJwcmludEFJTykgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5mYWlvLnNob3coKS50aGVuKChyZXN1bHQ6IGFueSkgPT4gY29uc29sZS5sb2cocmVzdWx0KSkuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKSk7XG4gKlxuICogIE9SIHdpdGggb3B0aW9ucy4uLlxuICpcbiAqIHRoaXMuZmFpby5zaG93KHtcbiAqICAgICB0aXRsZTogJ0Jpb21ldHJpYyBBdXRoZW50aWNhdGlvbicsIC8vIChBbmRyb2lkIE9ubHkpIHwgb3B0aW9uYWwgfCBEZWZhdWx0OiBcIjxBUFBfTkFNRT4gQmlvbWV0cmljIFNpZ24gT25cIlxuICogICAgIHN1YnRpdGxlOiAnQ29vbGVzdCBQbHVnaW4gZXZlcicgLy8gKEFuZHJvaWQgT25seSkgfCBvcHRpb25hbCB8IERlZmF1bHQ6IG51bGxcbiAqICAgICBkZXNjcmlwdGlvbjogJ1BsZWFzZSBhdXRoZW50aWNhdGUnIC8vIG9wdGlvbmFsIHwgRGVmYXVsdDogbnVsbFxuICogICAgIGZhbGxiYWNrQnV0dG9uVGl0bGU6ICdVc2UgQmFja3VwJywgLy8gb3B0aW9uYWwgfCBXaGVuIGRpc2FibGVCYWNrdXAgaXMgZmFsc2UgZGVmYXVsdHMgdG8gXCJVc2UgUGluXCIuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIGRpc2FibGVCYWNrdXAgaXMgdHJ1ZSBkZWZhdWx0cyB0byBcIkNhbmNlbFwiXG4gKiAgICAgZGlzYWJsZUJhY2t1cDp0cnVlLCAgLy8gb3B0aW9uYWwgfCBkZWZhdWx0OiBmYWxzZVxuICogfSlcbiAqIC50aGVuKChyZXN1bHQ6IGFueSkgPT4gY29uc29sZS5sb2cocmVzdWx0KSlcbiAqIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBGaW5nZXJwcmludE9wdGlvbnNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmluZ2VycHJpbnRBSU8gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIEJJT01FVFJJQ19VTktOT1dOX0VSUk9SOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIEJJT01FVFJJQ19VTkFWQUlMQUJMRTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBCSU9NRVRSSUNfQVVUSEVOVElDQVRJT05fRkFJTEVEOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIEJJT01FVFJJQ19TREtfTk9UX1NVUFBPUlRFRDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBCSU9NRVRSSUNfSEFSRFdBUkVfTk9UX1NVUFBPUlRFRDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBCSU9NRVRSSUNfUEVSTUlTU0lPTl9OT1RfR1JBTlRFRDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBCSU9NRVRSSUNfTk9UX0VOUk9MTEVEOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIEJJT01FVFJJQ19JTlRFUk5BTF9QTFVHSU5fRVJST1I6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBjb25zdGFudFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgQklPTUVUUklDX0RJU01JU1NFRDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBCSU9NRVRSSUNfUElOX09SX1BBVFRFUk5fRElTTUlTU0VEOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIEJJT01FVFJJQ19TQ1JFRU5fR1VBUkRfVU5TRUNVUkVEOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIEJJT01FVFJJQ19MT0NLRURfT1VUOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIEJJT01FVFJJQ19MT0NLRURfT1VUX1BFUk1BTkVOVDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGZpbmdlcnByaW50IGF1dGhlbnRpY2F0aW9uIGlzIGF2YWlsYWJsZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCByZXN1bHRcbiAgICAgKi9cbiAgICBpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogU2hvdyBhdXRoZW50aWNhdGlvbiBkaWFsb2d1ZVxuICAgICAqIEBwYXJhbSB7RmluZ2VycHJpbnRPcHRpb25zfSBvcHRpb25zIE9wdGlvbnMgZm9yIHBsYXRmb3JtIHNwZWNpZmljIGZpbmdlcnByaW50IEFQSVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGF1dGhlbnRpY2F0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAgICovXG4gICAgc2hvdyhvcHRpb25zOiBGaW5nZXJwcmludE9wdGlvbnMpOiBQcm9taXNlPGFueT47XG59XG4iXX0=