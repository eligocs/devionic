import { IonicNativePlugin } from '@ionic-native/core';
/**
 * Options for sending an SMS
 */
import * as ɵngcc0 from '@angular/core';
export interface SmsOptions {
    /**
     * Set to true to replace \n by a new line. Default: false
     */
    replaceLineBreaks?: boolean;
    android?: SmsOptionsAndroid;
}
export interface SmsOptionsAndroid {
    /**
     * Set to "INTENT" to send SMS with the native android SMS messaging. Leaving it empty will send the SMS without opening any app.
     */
    intent?: string;
}
/**
 * @name SMS
 * @description
 *
 * Requires Cordova plugin: cordova-sms-plugin. For more info, please see the [SMS plugin docs](https://github.com/cordova-sms/cordova-sms-plugin).
 *
 * @usage
 * ```typescript
 * import { SMS } from '@ionic-native/sms/ngx';
 *
 * constructor(private sms: SMS) { }
 *
 *
 * ...
 *
 *
 * // Send a text message using default options
 * this.sms.send('416123456', 'Hello world!');
 * ```
 * @interfaces
 * SmsOptions
 * SmsOptionsAndroid
 */
export declare class SMS extends IonicNativePlugin {
    /**
     * Sends sms to a number
     * @param phoneNumber {string|string[]} Phone number
     * @param message {string} Message
     * @param options {SmsOptions} Options
     * @returns {Promise<any>} Resolves promise when the SMS has been sent
     */
    send(phoneNumber: string | string[], message: string, options?: SmsOptions): Promise<any>;
    /**
     * This function lets you know if the app has permission to send SMS
     * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if we have permission
     */
    hasPermission(): Promise<boolean>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SMS, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SMS>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbi8qKlxuICogT3B0aW9ucyBmb3Igc2VuZGluZyBhbiBTTVNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTbXNPcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gdHJ1ZSB0byByZXBsYWNlIFxcbiBieSBhIG5ldyBsaW5lLiBEZWZhdWx0OiBmYWxzZVxuICAgICAqL1xuICAgIHJlcGxhY2VMaW5lQnJlYWtzPzogYm9vbGVhbjtcbiAgICBhbmRyb2lkPzogU21zT3B0aW9uc0FuZHJvaWQ7XG59XG5leHBvcnQgaW50ZXJmYWNlIFNtc09wdGlvbnNBbmRyb2lkIHtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gXCJJTlRFTlRcIiB0byBzZW5kIFNNUyB3aXRoIHRoZSBuYXRpdmUgYW5kcm9pZCBTTVMgbWVzc2FnaW5nLiBMZWF2aW5nIGl0IGVtcHR5IHdpbGwgc2VuZCB0aGUgU01TIHdpdGhvdXQgb3BlbmluZyBhbnkgYXBwLlxuICAgICAqL1xuICAgIGludGVudD86IHN0cmluZztcbn1cbi8qKlxuICogQG5hbWUgU01TXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogY29yZG92YS1zbXMtcGx1Z2luLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbU01TIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vY29yZG92YS1zbXMvY29yZG92YS1zbXMtcGx1Z2luKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNNUyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc21zL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzbXM6IFNNUykgeyB9XG4gKlxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiAvLyBTZW5kIGEgdGV4dCBtZXNzYWdlIHVzaW5nIGRlZmF1bHQgb3B0aW9uc1xuICogdGhpcy5zbXMuc2VuZCgnNDE2MTIzNDU2JywgJ0hlbGxvIHdvcmxkIScpO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogU21zT3B0aW9uc1xuICogU21zT3B0aW9uc0FuZHJvaWRcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU01TIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqIFNlbmRzIHNtcyB0byBhIG51bWJlclxuICAgICAqIEBwYXJhbSBwaG9uZU51bWJlciB7c3RyaW5nfHN0cmluZ1tdfSBQaG9uZSBudW1iZXJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSB7c3RyaW5nfSBNZXNzYWdlXG4gICAgICogQHBhcmFtIG9wdGlvbnMge1Ntc09wdGlvbnN9IE9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXNvbHZlcyBwcm9taXNlIHdoZW4gdGhlIFNNUyBoYXMgYmVlbiBzZW50XG4gICAgICovXG4gICAgc2VuZChwaG9uZU51bWJlcjogc3RyaW5nIHwgc3RyaW5nW10sIG1lc3NhZ2U6IHN0cmluZywgb3B0aW9ucz86IFNtc09wdGlvbnMpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBsZXRzIHlvdSBrbm93IGlmIHRoZSBhcHAgaGFzIHBlcm1pc3Npb24gdG8gc2VuZCBTTVNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHdlIGhhdmUgcGVybWlzc2lvblxuICAgICAqL1xuICAgIGhhc1Blcm1pc3Npb24oKTogUHJvbWlzZTxib29sZWFuPjtcbn1cbiJdfQ==