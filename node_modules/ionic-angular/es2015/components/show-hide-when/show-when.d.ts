import { NgZone } from '@angular/core';
import { DisplayWhen } from './display-when';
import { Platform } from '../../platform/platform';
/**
 *
 * @name ShowWhen
 * @description
 * The `showWhen` attribute takes a string that represents a platform or screen orientation.
 * The element the attribute is added to will only be shown when that platform or screen orientation is active.
 *
 * Complements the [hideWhen attribute](../HideWhen). If the `showWhen` attribute is used on an
 * element that also has the `hideWhen` attribute, the element will not show if `hideWhen` evaluates
 * to `true` or `showWhen` evaluates to `false`. If the `hidden` attribute is also added, the element
 * will not show if `hidden` evaluates to `true`.
 *
 * View the [Platform API docs](../../../platform/Platform) for more information on the different
 * platforms you can use.
 *
 * @usage
 * ```html
 * <div showWhen="android">
 *  I am visible on Android!
 * </div>
 *
 * <div showWhen="ios">
 *  I am visible on iOS!
 * </div>
 *
 * <div showWhen="android,ios">
 *  I am visible on Android and iOS!
 * </div>
 *
 * <div showWhen="portrait">
 *  I am visible on Portrait!
 * </div>
 *
 * <div showWhen="landscape">
 *  I am visible on Landscape!
 * </div>
 * ```
 * @demo /docs/demos/src/show-when/
 * @see {@link ../HideWhen HideWhen API Docs}
 * @see {@link ../../../platform/Platform Platform API Docs}
 */
import * as ɵngcc0 from '@angular/core';
export declare class ShowWhen extends DisplayWhen {
    constructor(showWhen: string, plt: Platform, zone: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ShowWhen, [{ attribute: "showWhen"; }, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ShowWhen, "[showWhen]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy13aGVuLmQudHMiLCJzb3VyY2VzIjpbInNob3ctd2hlbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpc3BsYXlXaGVuIH0gZnJvbSAnLi9kaXNwbGF5LXdoZW4nO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICcuLi8uLi9wbGF0Zm9ybS9wbGF0Zm9ybSc7XG4vKipcbiAqXG4gKiBAbmFtZSBTaG93V2hlblxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYHNob3dXaGVuYCBhdHRyaWJ1dGUgdGFrZXMgYSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIGEgcGxhdGZvcm0gb3Igc2NyZWVuIG9yaWVudGF0aW9uLlxuICogVGhlIGVsZW1lbnQgdGhlIGF0dHJpYnV0ZSBpcyBhZGRlZCB0byB3aWxsIG9ubHkgYmUgc2hvd24gd2hlbiB0aGF0IHBsYXRmb3JtIG9yIHNjcmVlbiBvcmllbnRhdGlvbiBpcyBhY3RpdmUuXG4gKlxuICogQ29tcGxlbWVudHMgdGhlIFtoaWRlV2hlbiBhdHRyaWJ1dGVdKC4uL0hpZGVXaGVuKS4gSWYgdGhlIGBzaG93V2hlbmAgYXR0cmlidXRlIGlzIHVzZWQgb24gYW5cbiAqIGVsZW1lbnQgdGhhdCBhbHNvIGhhcyB0aGUgYGhpZGVXaGVuYCBhdHRyaWJ1dGUsIHRoZSBlbGVtZW50IHdpbGwgbm90IHNob3cgaWYgYGhpZGVXaGVuYCBldmFsdWF0ZXNcbiAqIHRvIGB0cnVlYCBvciBgc2hvd1doZW5gIGV2YWx1YXRlcyB0byBgZmFsc2VgLiBJZiB0aGUgYGhpZGRlbmAgYXR0cmlidXRlIGlzIGFsc28gYWRkZWQsIHRoZSBlbGVtZW50XG4gKiB3aWxsIG5vdCBzaG93IGlmIGBoaWRkZW5gIGV2YWx1YXRlcyB0byBgdHJ1ZWAuXG4gKlxuICogVmlldyB0aGUgW1BsYXRmb3JtIEFQSSBkb2NzXSguLi8uLi8uLi9wbGF0Zm9ybS9QbGF0Zm9ybSkgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlIGRpZmZlcmVudFxuICogcGxhdGZvcm1zIHlvdSBjYW4gdXNlLlxuICpcbiAqIEB1c2FnZVxuICogYGBgaHRtbFxuICogPGRpdiBzaG93V2hlbj1cImFuZHJvaWRcIj5cbiAqICBJIGFtIHZpc2libGUgb24gQW5kcm9pZCFcbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgc2hvd1doZW49XCJpb3NcIj5cbiAqICBJIGFtIHZpc2libGUgb24gaU9TIVxuICogPC9kaXY+XG4gKlxuICogPGRpdiBzaG93V2hlbj1cImFuZHJvaWQsaW9zXCI+XG4gKiAgSSBhbSB2aXNpYmxlIG9uIEFuZHJvaWQgYW5kIGlPUyFcbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgc2hvd1doZW49XCJwb3J0cmFpdFwiPlxuICogIEkgYW0gdmlzaWJsZSBvbiBQb3J0cmFpdCFcbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgc2hvd1doZW49XCJsYW5kc2NhcGVcIj5cbiAqICBJIGFtIHZpc2libGUgb24gTGFuZHNjYXBlIVxuICogPC9kaXY+XG4gKiBgYGBcbiAqIEBkZW1vIC9kb2NzL2RlbW9zL3NyYy9zaG93LXdoZW4vXG4gKiBAc2VlIHtAbGluayAuLi9IaWRlV2hlbiBIaWRlV2hlbiBBUEkgRG9jc31cbiAqIEBzZWUge0BsaW5rIC4uLy4uLy4uL3BsYXRmb3JtL1BsYXRmb3JtIFBsYXRmb3JtIEFQSSBEb2NzfVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTaG93V2hlbiBleHRlbmRzIERpc3BsYXlXaGVuIHtcbiAgICBjb25zdHJ1Y3RvcihzaG93V2hlbjogc3RyaW5nLCBwbHQ6IFBsYXRmb3JtLCB6b25lOiBOZ1pvbmUpO1xufVxuIl19