import { ElementRef, EventEmitter, NgZone } from '@angular/core';
import { Config } from '../../config/config';
import { DomController, DomDebouncer } from '../../platform/dom-controller';
import { Haptic } from '../../tap-click/haptic';
import { PickerColumn } from './picker-options';
import { Platform } from '../../platform/platform';
import { UIEventManager } from '../../gestures/ui-event-manager';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class PickerColumnCmp {
    private config;
    private _plt;
    private elementRef;
    private _zone;
    private _haptic;
    colEle: ElementRef;
    col: PickerColumn;
    y: number;
    colHeight: number;
    optHeight: number;
    velocity: number;
    pos: number[];
    startY: number;
    rafId: number;
    bounceFrom: number;
    minY: number;
    maxY: number;
    rotateFactor: number;
    scaleFactor: number;
    lastIndex: number;
    lastTempIndex: number;
    decelerateFunc: Function;
    debouncer: DomDebouncer;
    events: UIEventManager;
    ionChange: EventEmitter<any>;
    constructor(config: Config, _plt: Platform, elementRef: ElementRef, _zone: NgZone, _haptic: Haptic, plt: Platform, domCtrl: DomController);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    pointerStart(ev: UIEvent): boolean;
    pointerMove(ev: UIEvent): void;
    pointerEnd(ev: UIEvent): void;
    decelerate(): void;
    optClick(ev: UIEvent, index: number): void;
    setSelected(selectedIndex: number, duration: number): void;
    update(y: number, duration: number, saveY: boolean, emitChange: boolean): void;
    refresh(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PickerColumnCmp, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PickerColumnCmp, ".picker-col", never, { "col": "col"; }, { "ionChange": "ionChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLWNvbHVtbi5kLnRzIiwic291cmNlcyI6WyJwaWNrZXItY29sdW1uLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgRG9tQ29udHJvbGxlciwgRG9tRGVib3VuY2VyIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vZG9tLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgSGFwdGljIH0gZnJvbSAnLi4vLi4vdGFwLWNsaWNrL2hhcHRpYyc7XG5pbXBvcnQgeyBQaWNrZXJDb2x1bW4gfSBmcm9tICcuL3BpY2tlci1vcHRpb25zJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vcGxhdGZvcm0nO1xuaW1wb3J0IHsgVUlFdmVudE1hbmFnZXIgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy91aS1ldmVudC1tYW5hZ2VyJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQaWNrZXJDb2x1bW5DbXAge1xuICAgIHByaXZhdGUgY29uZmlnO1xuICAgIHByaXZhdGUgX3BsdDtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBfem9uZTtcbiAgICBwcml2YXRlIF9oYXB0aWM7XG4gICAgY29sRWxlOiBFbGVtZW50UmVmO1xuICAgIGNvbDogUGlja2VyQ29sdW1uO1xuICAgIHk6IG51bWJlcjtcbiAgICBjb2xIZWlnaHQ6IG51bWJlcjtcbiAgICBvcHRIZWlnaHQ6IG51bWJlcjtcbiAgICB2ZWxvY2l0eTogbnVtYmVyO1xuICAgIHBvczogbnVtYmVyW107XG4gICAgc3RhcnRZOiBudW1iZXI7XG4gICAgcmFmSWQ6IG51bWJlcjtcbiAgICBib3VuY2VGcm9tOiBudW1iZXI7XG4gICAgbWluWTogbnVtYmVyO1xuICAgIG1heFk6IG51bWJlcjtcbiAgICByb3RhdGVGYWN0b3I6IG51bWJlcjtcbiAgICBzY2FsZUZhY3RvcjogbnVtYmVyO1xuICAgIGxhc3RJbmRleDogbnVtYmVyO1xuICAgIGxhc3RUZW1wSW5kZXg6IG51bWJlcjtcbiAgICBkZWNlbGVyYXRlRnVuYzogRnVuY3Rpb247XG4gICAgZGVib3VuY2VyOiBEb21EZWJvdW5jZXI7XG4gICAgZXZlbnRzOiBVSUV2ZW50TWFuYWdlcjtcbiAgICBpb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnLCBfcGx0OiBQbGF0Zm9ybSwgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgX3pvbmU6IE5nWm9uZSwgX2hhcHRpYzogSGFwdGljLCBwbHQ6IFBsYXRmb3JtLCBkb21DdHJsOiBEb21Db250cm9sbGVyKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHBvaW50ZXJTdGFydChldjogVUlFdmVudCk6IGJvb2xlYW47XG4gICAgcG9pbnRlck1vdmUoZXY6IFVJRXZlbnQpOiB2b2lkO1xuICAgIHBvaW50ZXJFbmQoZXY6IFVJRXZlbnQpOiB2b2lkO1xuICAgIGRlY2VsZXJhdGUoKTogdm9pZDtcbiAgICBvcHRDbGljayhldjogVUlFdmVudCwgaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgc2V0U2VsZWN0ZWQoc2VsZWN0ZWRJbmRleDogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKTogdm9pZDtcbiAgICB1cGRhdGUoeTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyLCBzYXZlWTogYm9vbGVhbiwgZW1pdENoYW5nZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgcmVmcmVzaCgpOiB2b2lkO1xufVxuIl19