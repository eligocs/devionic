import { ElementRef, QueryList, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { BlockerDelegate, GestureController } from '../../gestures/gesture-controller';
import { NavParams } from '../../navigation/nav-params';
import { PickerOptions } from './picker-options';
import { ViewController } from '../../navigation/view-controller';
import { PickerColumnCmp } from './picker-column';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class PickerCmp {
    private _viewCtrl;
    private _elementRef;
    _cols: QueryList<PickerColumnCmp>;
    d: PickerOptions;
    enabled: boolean;
    lastClick: number;
    id: number;
    mode: string;
    _gestureBlocker: BlockerDelegate;
    constructor(_viewCtrl: ViewController, _elementRef: ElementRef, config: Config, gestureCtrl: GestureController, params: NavParams, renderer: Renderer);
    ionViewWillLoad(): void;
    ionViewDidLoad(): void;
    ionViewWillEnter(): void;
    ionViewDidLeave(): void;
    refresh(): void;
    _colChange(): void;
    _keyUp(ev: KeyboardEvent): void;
    ionViewDidEnter(): void;
    btnClick(button: any): void;
    bdClick(): void;
    dismiss(role: string): Promise<any>;
    getSelected(): any;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PickerCmp, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PickerCmp, "ion-picker-cmp", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLWNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwaWNrZXItY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFF1ZXJ5TGlzdCwgUmVuZGVyZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgQmxvY2tlckRlbGVnYXRlLCBHZXN0dXJlQ29udHJvbGxlciB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL2dlc3R1cmUtY29udHJvbGxlcic7XG5pbXBvcnQgeyBOYXZQYXJhbXMgfSBmcm9tICcuLi8uLi9uYXZpZ2F0aW9uL25hdi1wYXJhbXMnO1xuaW1wb3J0IHsgUGlja2VyT3B0aW9ucyB9IGZyb20gJy4vcGlja2VyLW9wdGlvbnMnO1xuaW1wb3J0IHsgVmlld0NvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi9uYXZpZ2F0aW9uL3ZpZXctY29udHJvbGxlcic7XG5pbXBvcnQgeyBQaWNrZXJDb2x1bW5DbXAgfSBmcm9tICcuL3BpY2tlci1jb2x1bW4nO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBpY2tlckNtcCB7XG4gICAgcHJpdmF0ZSBfdmlld0N0cmw7XG4gICAgcHJpdmF0ZSBfZWxlbWVudFJlZjtcbiAgICBfY29sczogUXVlcnlMaXN0PFBpY2tlckNvbHVtbkNtcD47XG4gICAgZDogUGlja2VyT3B0aW9ucztcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIGxhc3RDbGljazogbnVtYmVyO1xuICAgIGlkOiBudW1iZXI7XG4gICAgbW9kZTogc3RyaW5nO1xuICAgIF9nZXN0dXJlQmxvY2tlcjogQmxvY2tlckRlbGVnYXRlO1xuICAgIGNvbnN0cnVjdG9yKF92aWV3Q3RybDogVmlld0NvbnRyb2xsZXIsIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBjb25maWc6IENvbmZpZywgZ2VzdHVyZUN0cmw6IEdlc3R1cmVDb250cm9sbGVyLCBwYXJhbXM6IE5hdlBhcmFtcywgcmVuZGVyZXI6IFJlbmRlcmVyKTtcbiAgICBpb25WaWV3V2lsbExvYWQoKTogdm9pZDtcbiAgICBpb25WaWV3RGlkTG9hZCgpOiB2b2lkO1xuICAgIGlvblZpZXdXaWxsRW50ZXIoKTogdm9pZDtcbiAgICBpb25WaWV3RGlkTGVhdmUoKTogdm9pZDtcbiAgICByZWZyZXNoKCk6IHZvaWQ7XG4gICAgX2NvbENoYW5nZSgpOiB2b2lkO1xuICAgIF9rZXlVcChldjogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgaW9uVmlld0RpZEVudGVyKCk6IHZvaWQ7XG4gICAgYnRuQ2xpY2soYnV0dG9uOiBhbnkpOiB2b2lkO1xuICAgIGJkQ2xpY2soKTogdm9pZDtcbiAgICBkaXNtaXNzKHJvbGU6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICBnZXRTZWxlY3RlZCgpOiBhbnk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==