import { EventEmitter } from '@angular/core';
import { App } from '../app/app';
import { Config } from '../../config/config';
import { NavOptions } from '../../navigation/nav-util';
import { PickerColumn, PickerOptions } from './picker-options';
import { ViewController } from '../../navigation/view-controller';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class Picker extends ViewController {
    private _app;
    ionChange: EventEmitter<any>;
    constructor(app: App, opts: PickerOptions, config: Config);
    /**
    * @hidden
    */
    getTransitionName(direction: string): any;
    /**
     * @param {any} button Picker toolbar button
     */
    addButton(button: any): void;
    /**
     * @param {PickerColumn} column Picker toolbar button
     */
    addColumn(column: PickerColumn): void;
    getColumns(): PickerColumn[];
    getColumn(name: string): PickerColumn;
    refresh(): void;
    /**
     * @param {string} cssClass CSS class name to add to the picker's outer wrapper.
     */
    setCssClass(cssClass: string): void;
    /**
     * Present the picker instance.
     *
     * @param {NavOptions} [navOptions={}] Nav options to go with this transition.
     * @returns {Promise} Returns a promise which is resolved when the transition has completed.
     */
    present(navOptions?: NavOptions): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Picker, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Picker, never, never, {}, { "ionChange": "ionChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLmQudHMiLCJzb3VyY2VzIjpbInBpY2tlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHAgfSBmcm9tICcuLi9hcHAvYXBwJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgTmF2T3B0aW9ucyB9IGZyb20gJy4uLy4uL25hdmlnYXRpb24vbmF2LXV0aWwnO1xuaW1wb3J0IHsgUGlja2VyQ29sdW1uLCBQaWNrZXJPcHRpb25zIH0gZnJvbSAnLi9waWNrZXItb3B0aW9ucyc7XG5pbXBvcnQgeyBWaWV3Q29udHJvbGxlciB9IGZyb20gJy4uLy4uL25hdmlnYXRpb24vdmlldy1jb250cm9sbGVyJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQaWNrZXIgZXh0ZW5kcyBWaWV3Q29udHJvbGxlciB7XG4gICAgcHJpdmF0ZSBfYXBwO1xuICAgIGlvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIG9wdHM6IFBpY2tlck9wdGlvbnMsIGNvbmZpZzogQ29uZmlnKTtcbiAgICAvKipcbiAgICAqIEBoaWRkZW5cbiAgICAqL1xuICAgIGdldFRyYW5zaXRpb25OYW1lKGRpcmVjdGlvbjogc3RyaW5nKTogYW55O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7YW55fSBidXR0b24gUGlja2VyIHRvb2xiYXIgYnV0dG9uXG4gICAgICovXG4gICAgYWRkQnV0dG9uKGJ1dHRvbjogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1BpY2tlckNvbHVtbn0gY29sdW1uIFBpY2tlciB0b29sYmFyIGJ1dHRvblxuICAgICAqL1xuICAgIGFkZENvbHVtbihjb2x1bW46IFBpY2tlckNvbHVtbik6IHZvaWQ7XG4gICAgZ2V0Q29sdW1ucygpOiBQaWNrZXJDb2x1bW5bXTtcbiAgICBnZXRDb2x1bW4obmFtZTogc3RyaW5nKTogUGlja2VyQ29sdW1uO1xuICAgIHJlZnJlc2goKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY3NzQ2xhc3MgQ1NTIGNsYXNzIG5hbWUgdG8gYWRkIHRvIHRoZSBwaWNrZXIncyBvdXRlciB3cmFwcGVyLlxuICAgICAqL1xuICAgIHNldENzc0NsYXNzKGNzc0NsYXNzOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFByZXNlbnQgdGhlIHBpY2tlciBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TmF2T3B0aW9uc30gW25hdk9wdGlvbnM9e31dIE5hdiBvcHRpb25zIHRvIGdvIHdpdGggdGhpcyB0cmFuc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBpcyByZXNvbHZlZCB3aGVuIHRoZSB0cmFuc2l0aW9uIGhhcyBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgcHJlc2VudChuYXZPcHRpb25zPzogTmF2T3B0aW9ucyk6IFByb21pc2U8YW55Pjtcbn1cbiJdfQ==