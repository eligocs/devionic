import { NavController } from '../../navigation/nav-controller';
import { Page } from '../../navigation/nav-util';
/**
 * @name NavPush
 * @description
 * Directive to declaratively push a new page to the current nav
 * stack.
 *
 * @usage
 * ```html
 * <button ion-button [navPush]="pushPage"></button>
 * ```
 *
 * To specify parameters you can use array syntax or the `navParams`
 * property:
 *
 * ```html
 * <button ion-button [navPush]="pushPage" [navParams]="params">Go</button>
 * ```
 *
 * Where `pushPage` and `params` are specified in your component,
 * and `pushPage` contains a reference to a
 * component you would like to push:
 *
 * ```ts
 * import { LoginPage } from './login';
 *
 * @Component({
 *   template: `<button ion-button [navPush]="pushPage" [navParams]="params">Go</button>`
 * })
 * class MyPage {
 *   pushPage: any;
 *   params: Object;
 *   constructor(){
 *     this.pushPage = LoginPage;
 *     this.params = { id: 42 };
 *   }
 * }
 * ```
 *
 * @demo /docs/demos/src/navigation/
 * @see {@link /docs/components#navigation Navigation Component Docs}
 * @see {@link ../NavPop NavPop API Docs}
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class NavPush {
    _nav: NavController;
    /**
     * @input {Page | string} The component class or deeplink name you want to push onto the navigation stack.
     */
    navPush: Page | string;
    /**
     * @input {any} Any NavParams you want to pass along to the next view.
     */
    navParams: {
        [k: string]: any;
    };
    constructor(_nav: NavController);
    /**
     * @hidden
     */
    onClick(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NavPush, [{ optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NavPush, "[navPush]", never, { "navPush": "navPush"; "navParams": "navParams"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LXB1c2guZC50cyIsInNvdXJjZXMiOlsibmF2LXB1c2guZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOYXZDb250cm9sbGVyIH0gZnJvbSAnLi4vLi4vbmF2aWdhdGlvbi9uYXYtY29udHJvbGxlcic7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAnLi4vLi4vbmF2aWdhdGlvbi9uYXYtdXRpbCc7XG4vKipcbiAqIEBuYW1lIE5hdlB1c2hcbiAqIEBkZXNjcmlwdGlvblxuICogRGlyZWN0aXZlIHRvIGRlY2xhcmF0aXZlbHkgcHVzaCBhIG5ldyBwYWdlIHRvIHRoZSBjdXJyZW50IG5hdlxuICogc3RhY2suXG4gKlxuICogQHVzYWdlXG4gKiBgYGBodG1sXG4gKiA8YnV0dG9uIGlvbi1idXR0b24gW25hdlB1c2hdPVwicHVzaFBhZ2VcIj48L2J1dHRvbj5cbiAqIGBgYFxuICpcbiAqIFRvIHNwZWNpZnkgcGFyYW1ldGVycyB5b3UgY2FuIHVzZSBhcnJheSBzeW50YXggb3IgdGhlIGBuYXZQYXJhbXNgXG4gKiBwcm9wZXJ0eTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8YnV0dG9uIGlvbi1idXR0b24gW25hdlB1c2hdPVwicHVzaFBhZ2VcIiBbbmF2UGFyYW1zXT1cInBhcmFtc1wiPkdvPC9idXR0b24+XG4gKiBgYGBcbiAqXG4gKiBXaGVyZSBgcHVzaFBhZ2VgIGFuZCBgcGFyYW1zYCBhcmUgc3BlY2lmaWVkIGluIHlvdXIgY29tcG9uZW50LFxuICogYW5kIGBwdXNoUGFnZWAgY29udGFpbnMgYSByZWZlcmVuY2UgdG8gYVxuICogY29tcG9uZW50IHlvdSB3b3VsZCBsaWtlIHRvIHB1c2g6XG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IExvZ2luUGFnZSB9IGZyb20gJy4vbG9naW4nO1xuICpcbiAqIEBDb21wb25lbnQoe1xuICogICB0ZW1wbGF0ZTogYDxidXR0b24gaW9uLWJ1dHRvbiBbbmF2UHVzaF09XCJwdXNoUGFnZVwiIFtuYXZQYXJhbXNdPVwicGFyYW1zXCI+R288L2J1dHRvbj5gXG4gKiB9KVxuICogY2xhc3MgTXlQYWdlIHtcbiAqICAgcHVzaFBhZ2U6IGFueTtcbiAqICAgcGFyYW1zOiBPYmplY3Q7XG4gKiAgIGNvbnN0cnVjdG9yKCl7XG4gKiAgICAgdGhpcy5wdXNoUGFnZSA9IExvZ2luUGFnZTtcbiAqICAgICB0aGlzLnBhcmFtcyA9IHsgaWQ6IDQyIH07XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBkZW1vIC9kb2NzL2RlbW9zL3NyYy9uYXZpZ2F0aW9uL1xuICogQHNlZSB7QGxpbmsgL2RvY3MvY29tcG9uZW50cyNuYXZpZ2F0aW9uIE5hdmlnYXRpb24gQ29tcG9uZW50IERvY3N9XG4gKiBAc2VlIHtAbGluayAuLi9OYXZQb3AgTmF2UG9wIEFQSSBEb2NzfVxuICpcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmF2UHVzaCB7XG4gICAgX25hdjogTmF2Q29udHJvbGxlcjtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge1BhZ2UgfCBzdHJpbmd9IFRoZSBjb21wb25lbnQgY2xhc3Mgb3IgZGVlcGxpbmsgbmFtZSB5b3Ugd2FudCB0byBwdXNoIG9udG8gdGhlIG5hdmlnYXRpb24gc3RhY2suXG4gICAgICovXG4gICAgbmF2UHVzaDogUGFnZSB8IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge2FueX0gQW55IE5hdlBhcmFtcyB5b3Ugd2FudCB0byBwYXNzIGFsb25nIHRvIHRoZSBuZXh0IHZpZXcuXG4gICAgICovXG4gICAgbmF2UGFyYW1zOiB7XG4gICAgICAgIFtrOiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihfbmF2OiBOYXZDb250cm9sbGVyKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25DbGljaygpOiBib29sZWFuO1xufVxuIl19