import { AfterViewInit, ComponentFactoryResolver, ElementRef, ErrorHandler, NgZone, Renderer, ViewContainerRef } from '@angular/core';
import { App } from '../app/app';
import { Config } from '../../config/config';
import { DeepLinker } from '../../navigation/deep-linker';
import { DomController } from '../../platform/dom-controller';
import { GestureController } from '../../gestures/gesture-controller';
import { Nav as INav } from '../../navigation/nav-interfaces';
import { NavController } from '../../navigation/nav-controller';
import { NavControllerBase } from '../../navigation/nav-controller-base';
import { NavOptions } from '../../navigation/nav-util';
import { Platform } from '../../platform/platform';
import { TransitionController } from '../../transitions/transition-controller';
import { ViewController } from '../../navigation/view-controller';
import { RootNode } from '../split-pane/split-pane';
/**
 * @name Nav
 * @description
 *
 * `ion-nav` is the declarative component for a [NavController](../../../navigation/NavController/).
 *
 * For more information on using nav controllers like Nav or [Tab](../../Tabs/Tab/),
 * take a look at the [NavController API Docs](../../../navigation/NavController/).
 *
 *
 * @usage
 * You must set a root page to be loaded initially by any Nav you create, using
 * the 'root' property:
 *
 * ```ts
 * import { Component } from '@angular/core';
 * import { GettingStartedPage } from './getting-started';
 *
 * @Component({
 *   template: `<ion-nav [root]="root"></ion-nav>`
 * })
 * class MyApp {
 *   root = GettingStartedPage;
 *
 *   constructor(){
 *   }
 * }
 * ```
 *
 * @demo /docs/demos/src/navigation/
 * @see {@link /docs/components#navigation Navigation Component Docs}
 */
import * as ɵngcc0 from '@angular/core';
export declare class Nav extends NavControllerBase implements AfterViewInit, RootNode, INav {
    private _root;
    private _hasInit;
    constructor(viewCtrl: ViewController, parent: NavController, app: App, config: Config, plt: Platform, elementRef: ElementRef, zone: NgZone, renderer: Renderer, cfr: ComponentFactoryResolver, gestureCtrl: GestureController, transCtrl: TransitionController, linker: DeepLinker, domCtrl: DomController, errHandler: ErrorHandler);
    /**
     * @hidden
     */
    _vp: ViewContainerRef;
    ngAfterViewInit(): Promise<any>;
    /**
     * @input {Page} The Page component to load as the root page within this nav.
     */
    root: any;
    /**
     * @input {object} Any nav-params to pass to the root page of this nav.
     */
    rootParams: any;
    /**
     * @input {string} a unique name for the nav element
     */
    name: string;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    initPane(): boolean;
    paneChanged(isPane: boolean): void;
    goToRoot(opts: NavOptions): Promise<any>;
    getType(): string;
    getSecondaryIdentifier(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Nav, [{ optional: true; }, { optional: true; }, null, null, null, null, null, null, null, null, null, { optional: true; }, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Nav, "ion-nav", never, { "root": "root"; "rootParams": "rootParams"; "name": "name"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LmQudHMiLCJzb3VyY2VzIjpbIm5hdi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEVsZW1lbnRSZWYsIEVycm9ySGFuZGxlciwgTmdab25lLCBSZW5kZXJlciwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi4vYXBwL2FwcCc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnJztcbmltcG9ydCB7IERlZXBMaW5rZXIgfSBmcm9tICcuLi8uLi9uYXZpZ2F0aW9uL2RlZXAtbGlua2VyJztcbmltcG9ydCB7IERvbUNvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi9wbGF0Zm9ybS9kb20tY29udHJvbGxlcic7XG5pbXBvcnQgeyBHZXN0dXJlQ29udHJvbGxlciB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL2dlc3R1cmUtY29udHJvbGxlcic7XG5pbXBvcnQgeyBOYXYgYXMgSU5hdiB9IGZyb20gJy4uLy4uL25hdmlnYXRpb24vbmF2LWludGVyZmFjZXMnO1xuaW1wb3J0IHsgTmF2Q29udHJvbGxlciB9IGZyb20gJy4uLy4uL25hdmlnYXRpb24vbmF2LWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgTmF2Q29udHJvbGxlckJhc2UgfSBmcm9tICcuLi8uLi9uYXZpZ2F0aW9uL25hdi1jb250cm9sbGVyLWJhc2UnO1xuaW1wb3J0IHsgTmF2T3B0aW9ucyB9IGZyb20gJy4uLy4uL25hdmlnYXRpb24vbmF2LXV0aWwnO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICcuLi8uLi9wbGF0Zm9ybS9wbGF0Zm9ybSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uQ29udHJvbGxlciB9IGZyb20gJy4uLy4uL3RyYW5zaXRpb25zL3RyYW5zaXRpb24tY29udHJvbGxlcic7XG5pbXBvcnQgeyBWaWV3Q29udHJvbGxlciB9IGZyb20gJy4uLy4uL25hdmlnYXRpb24vdmlldy1jb250cm9sbGVyJztcbmltcG9ydCB7IFJvb3ROb2RlIH0gZnJvbSAnLi4vc3BsaXQtcGFuZS9zcGxpdC1wYW5lJztcbi8qKlxuICogQG5hbWUgTmF2XG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgaW9uLW5hdmAgaXMgdGhlIGRlY2xhcmF0aXZlIGNvbXBvbmVudCBmb3IgYSBbTmF2Q29udHJvbGxlcl0oLi4vLi4vLi4vbmF2aWdhdGlvbi9OYXZDb250cm9sbGVyLykuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdXNpbmcgbmF2IGNvbnRyb2xsZXJzIGxpa2UgTmF2IG9yIFtUYWJdKC4uLy4uL1RhYnMvVGFiLyksXG4gKiB0YWtlIGEgbG9vayBhdCB0aGUgW05hdkNvbnRyb2xsZXIgQVBJIERvY3NdKC4uLy4uLy4uL25hdmlnYXRpb24vTmF2Q29udHJvbGxlci8pLlxuICpcbiAqXG4gKiBAdXNhZ2VcbiAqIFlvdSBtdXN0IHNldCBhIHJvb3QgcGFnZSB0byBiZSBsb2FkZWQgaW5pdGlhbGx5IGJ5IGFueSBOYXYgeW91IGNyZWF0ZSwgdXNpbmdcbiAqIHRoZSAncm9vdCcgcHJvcGVydHk6XG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICogaW1wb3J0IHsgR2V0dGluZ1N0YXJ0ZWRQYWdlIH0gZnJvbSAnLi9nZXR0aW5nLXN0YXJ0ZWQnO1xuICpcbiAqIEBDb21wb25lbnQoe1xuICogICB0ZW1wbGF0ZTogYDxpb24tbmF2IFtyb290XT1cInJvb3RcIj48L2lvbi1uYXY+YFxuICogfSlcbiAqIGNsYXNzIE15QXBwIHtcbiAqICAgcm9vdCA9IEdldHRpbmdTdGFydGVkUGFnZTtcbiAqXG4gKiAgIGNvbnN0cnVjdG9yKCl7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBkZW1vIC9kb2NzL2RlbW9zL3NyYy9uYXZpZ2F0aW9uL1xuICogQHNlZSB7QGxpbmsgL2RvY3MvY29tcG9uZW50cyNuYXZpZ2F0aW9uIE5hdmlnYXRpb24gQ29tcG9uZW50IERvY3N9XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5hdiBleHRlbmRzIE5hdkNvbnRyb2xsZXJCYXNlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgUm9vdE5vZGUsIElOYXYge1xuICAgIHByaXZhdGUgX3Jvb3Q7XG4gICAgcHJpdmF0ZSBfaGFzSW5pdDtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q3RybDogVmlld0NvbnRyb2xsZXIsIHBhcmVudDogTmF2Q29udHJvbGxlciwgYXBwOiBBcHAsIGNvbmZpZzogQ29uZmlnLCBwbHQ6IFBsYXRmb3JtLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCB6b25lOiBOZ1pvbmUsIHJlbmRlcmVyOiBSZW5kZXJlciwgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGdlc3R1cmVDdHJsOiBHZXN0dXJlQ29udHJvbGxlciwgdHJhbnNDdHJsOiBUcmFuc2l0aW9uQ29udHJvbGxlciwgbGlua2VyOiBEZWVwTGlua2VyLCBkb21DdHJsOiBEb21Db250cm9sbGVyLCBlcnJIYW5kbGVyOiBFcnJvckhhbmRsZXIpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBfdnA6IFZpZXdDb250YWluZXJSZWY7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge1BhZ2V9IFRoZSBQYWdlIGNvbXBvbmVudCB0byBsb2FkIGFzIHRoZSByb290IHBhZ2Ugd2l0aGluIHRoaXMgbmF2LlxuICAgICAqL1xuICAgIHJvb3Q6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge29iamVjdH0gQW55IG5hdi1wYXJhbXMgdG8gcGFzcyB0byB0aGUgcm9vdCBwYWdlIG9mIHRoaXMgbmF2LlxuICAgICAqL1xuICAgIHJvb3RQYXJhbXM6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge3N0cmluZ30gYSB1bmlxdWUgbmFtZSBmb3IgdGhlIG5hdiBlbGVtZW50XG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGluaXRQYW5lKCk6IGJvb2xlYW47XG4gICAgcGFuZUNoYW5nZWQoaXNQYW5lOiBib29sZWFuKTogdm9pZDtcbiAgICBnb1RvUm9vdChvcHRzOiBOYXZPcHRpb25zKTogUHJvbWlzZTxhbnk+O1xuICAgIGdldFR5cGUoKTogc3RyaW5nO1xuICAgIGdldFNlY29uZGFyeUlkZW50aWZpZXIoKTogc3RyaW5nO1xufVxuIl19