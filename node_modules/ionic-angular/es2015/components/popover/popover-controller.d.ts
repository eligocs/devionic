import { App } from '../app/app';
import { Config } from '../../config/config';
import { Popover } from './popover';
import { PopoverOptions } from './popover-options';
import { DeepLinker } from '../../navigation/deep-linker';
/**
 * @name PopoverController
 * @description
 * A Popover is a dialog that appears on top of the current page.
 * It can be used for anything, but generally it is used for overflow
 * actions that don't fit in the navigation bar.
 *
 * ### Creating
 * A popover can be created by calling the `create` method. The view
 * to display in the popover should be passed as the first argument.
 * Any data to pass to the popover view can optionally be passed in
 * the second argument. Options for the popover can optionally be
 * passed in the third argument. See the [create](#create) method
 * below for all available options.
 *
 * ### Presenting
 * To present a popover, call the `present` method on a PopoverController instance.
 * In order to position the popover relative to the element clicked, a click event
 * needs to be passed into the options of the the `present method. If the event
 * is not passed, the popover will be positioned in the center of the current
 * view. See the [usage](#usage) section for an example of passing this event.
 *
 * ### Dismissing
 * To dismiss the popover after creation, call the `dismiss()` method on the
 * `Popover` instance. The popover can also be dismissed from within the popover's
 * view by calling the `dismiss()` method on the [ViewController](../../navigation/ViewController).
 * The `dismiss()` call accepts an optional parameter that will be passed to the callback described
 * as follows. The `onDidDismiss(<func>)` function can be called to set up a callback action that will
 * be performed after the popover is dismissed, receiving the parameter passed to `dismiss()`.
 * The popover will dismiss when the backdrop is clicked by implicitly performing `dismiss(null)`,
 * but this can be disabled by setting `enableBackdropDismiss` to `false` in the popover options.
 *
 * > Note that after the component is dismissed, it will not be usable anymore and
 * another one must be created. This can be avoided by wrapping the creation and
 * presentation of the component in a reusable function as shown in the [usage](#usage)
 * section below.
 *
 * @usage
 *
 * To open a popover on the click of a button, pass `$event` to the method
 * which creates and presents the popover:
 *
 * ```html
 * <button ion-button icon-only (click)="presentPopover($event)">
 *   <ion-icon name="more"></ion-icon>
 * </button>
 * ```
 *
 * ```ts
 * import { PopoverController } from 'ionic-angular';
 *
 * @Component({})
 * class MyPage {
 *   constructor(public popoverCtrl: PopoverController) {}
 *
 *   presentPopover(myEvent) {
 *     let popover = this.popoverCtrl.create(PopoverPage);
 *     popover.present({
 *       ev: myEvent
 *     });
 *   }
 * }
 * ```
 *
 * The `PopoverPage` will display inside of the popover, and
 * can be anything. Below is an example of a page with items
 * that close the popover on click.
 *
 * ```ts
 * @Component({
 *   template: `
 *     <ion-list>
 *       <ion-list-header>Ionic</ion-list-header>
 *       <button ion-item (click)="close()">Learn Ionic</button>
 *       <button ion-item (click)="close()">Documentation</button>
 *       <button ion-item (click)="close()">Showcase</button>
 *       <button ion-item (click)="close()">GitHub Repo</button>
 *     </ion-list>
 *   `
 * })
 * class PopoverPage {
 *   constructor(public viewCtrl: ViewController) {}
 *
 *   close() {
 *     this.viewCtrl.dismiss();
 *   }
 * }
 * ```
 * @advanced
 * Popover Options
 *
 * | Option                | Type       | Description                                                                                                      |
 * |-----------------------|------------|------------------------------------------------------------------------------------------------------------------|
 * | cssClass              |`string`    | Additional classes for custom styles, separated by spaces.                                                       |
 * | showBackdrop          |`boolean`   | Whether to show the backdrop. Default true.                                                                      |
 * | enableBackdropDismiss |`boolean`   | Whether the popover should be dismissed by tapping the backdrop. Default true.                                   |
 *
 *
 *
 * @demo /docs/demos/src/popover/
 */
import * as ɵngcc0 from '@angular/core';
export declare class PopoverController {
    private _app;
    config: Config;
    private _deepLinker;
    constructor(_app: App, config: Config, _deepLinker: DeepLinker);
    /**
     * Present a popover. See below for options
     * @param {object} component The Popover
     * @param {object} data Any data to pass to the Popover view
     * @param {PopoverOptions} opts Popover options
     */
    create(component: any, data?: {}, opts?: PopoverOptions): Popover;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PopoverController, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PopoverController>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb250cm9sbGVyLmQudHMiLCJzb3VyY2VzIjpbInBvcG92ZXItY29udHJvbGxlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAgfSBmcm9tICcuLi9hcHAvYXBwJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgUG9wb3ZlciB9IGZyb20gJy4vcG9wb3Zlcic7XG5pbXBvcnQgeyBQb3BvdmVyT3B0aW9ucyB9IGZyb20gJy4vcG9wb3Zlci1vcHRpb25zJztcbmltcG9ydCB7IERlZXBMaW5rZXIgfSBmcm9tICcuLi8uLi9uYXZpZ2F0aW9uL2RlZXAtbGlua2VyJztcbi8qKlxuICogQG5hbWUgUG9wb3ZlckNvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogQSBQb3BvdmVyIGlzIGEgZGlhbG9nIHRoYXQgYXBwZWFycyBvbiB0b3Agb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqIEl0IGNhbiBiZSB1c2VkIGZvciBhbnl0aGluZywgYnV0IGdlbmVyYWxseSBpdCBpcyB1c2VkIGZvciBvdmVyZmxvd1xuICogYWN0aW9ucyB0aGF0IGRvbid0IGZpdCBpbiB0aGUgbmF2aWdhdGlvbiBiYXIuXG4gKlxuICogIyMjIENyZWF0aW5nXG4gKiBBIHBvcG92ZXIgY2FuIGJlIGNyZWF0ZWQgYnkgY2FsbGluZyB0aGUgYGNyZWF0ZWAgbWV0aG9kLiBUaGUgdmlld1xuICogdG8gZGlzcGxheSBpbiB0aGUgcG9wb3ZlciBzaG91bGQgYmUgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudC5cbiAqIEFueSBkYXRhIHRvIHBhc3MgdG8gdGhlIHBvcG92ZXIgdmlldyBjYW4gb3B0aW9uYWxseSBiZSBwYXNzZWQgaW5cbiAqIHRoZSBzZWNvbmQgYXJndW1lbnQuIE9wdGlvbnMgZm9yIHRoZSBwb3BvdmVyIGNhbiBvcHRpb25hbGx5IGJlXG4gKiBwYXNzZWQgaW4gdGhlIHRoaXJkIGFyZ3VtZW50LiBTZWUgdGhlIFtjcmVhdGVdKCNjcmVhdGUpIG1ldGhvZFxuICogYmVsb3cgZm9yIGFsbCBhdmFpbGFibGUgb3B0aW9ucy5cbiAqXG4gKiAjIyMgUHJlc2VudGluZ1xuICogVG8gcHJlc2VudCBhIHBvcG92ZXIsIGNhbGwgdGhlIGBwcmVzZW50YCBtZXRob2Qgb24gYSBQb3BvdmVyQ29udHJvbGxlciBpbnN0YW5jZS5cbiAqIEluIG9yZGVyIHRvIHBvc2l0aW9uIHRoZSBwb3BvdmVyIHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50IGNsaWNrZWQsIGEgY2xpY2sgZXZlbnRcbiAqIG5lZWRzIHRvIGJlIHBhc3NlZCBpbnRvIHRoZSBvcHRpb25zIG9mIHRoZSB0aGUgYHByZXNlbnQgbWV0aG9kLiBJZiB0aGUgZXZlbnRcbiAqIGlzIG5vdCBwYXNzZWQsIHRoZSBwb3BvdmVyIHdpbGwgYmUgcG9zaXRpb25lZCBpbiB0aGUgY2VudGVyIG9mIHRoZSBjdXJyZW50XG4gKiB2aWV3LiBTZWUgdGhlIFt1c2FnZV0oI3VzYWdlKSBzZWN0aW9uIGZvciBhbiBleGFtcGxlIG9mIHBhc3NpbmcgdGhpcyBldmVudC5cbiAqXG4gKiAjIyMgRGlzbWlzc2luZ1xuICogVG8gZGlzbWlzcyB0aGUgcG9wb3ZlciBhZnRlciBjcmVhdGlvbiwgY2FsbCB0aGUgYGRpc21pc3MoKWAgbWV0aG9kIG9uIHRoZVxuICogYFBvcG92ZXJgIGluc3RhbmNlLiBUaGUgcG9wb3ZlciBjYW4gYWxzbyBiZSBkaXNtaXNzZWQgZnJvbSB3aXRoaW4gdGhlIHBvcG92ZXInc1xuICogdmlldyBieSBjYWxsaW5nIHRoZSBgZGlzbWlzcygpYCBtZXRob2Qgb24gdGhlIFtWaWV3Q29udHJvbGxlcl0oLi4vLi4vbmF2aWdhdGlvbi9WaWV3Q29udHJvbGxlcikuXG4gKiBUaGUgYGRpc21pc3MoKWAgY2FsbCBhY2NlcHRzIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFjayBkZXNjcmliZWRcbiAqIGFzIGZvbGxvd3MuIFRoZSBgb25EaWREaXNtaXNzKDxmdW5jPilgIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgdG8gc2V0IHVwIGEgY2FsbGJhY2sgYWN0aW9uIHRoYXQgd2lsbFxuICogYmUgcGVyZm9ybWVkIGFmdGVyIHRoZSBwb3BvdmVyIGlzIGRpc21pc3NlZCwgcmVjZWl2aW5nIHRoZSBwYXJhbWV0ZXIgcGFzc2VkIHRvIGBkaXNtaXNzKClgLlxuICogVGhlIHBvcG92ZXIgd2lsbCBkaXNtaXNzIHdoZW4gdGhlIGJhY2tkcm9wIGlzIGNsaWNrZWQgYnkgaW1wbGljaXRseSBwZXJmb3JtaW5nIGBkaXNtaXNzKG51bGwpYCxcbiAqIGJ1dCB0aGlzIGNhbiBiZSBkaXNhYmxlZCBieSBzZXR0aW5nIGBlbmFibGVCYWNrZHJvcERpc21pc3NgIHRvIGBmYWxzZWAgaW4gdGhlIHBvcG92ZXIgb3B0aW9ucy5cbiAqXG4gKiA+IE5vdGUgdGhhdCBhZnRlciB0aGUgY29tcG9uZW50IGlzIGRpc21pc3NlZCwgaXQgd2lsbCBub3QgYmUgdXNhYmxlIGFueW1vcmUgYW5kXG4gKiBhbm90aGVyIG9uZSBtdXN0IGJlIGNyZWF0ZWQuIFRoaXMgY2FuIGJlIGF2b2lkZWQgYnkgd3JhcHBpbmcgdGhlIGNyZWF0aW9uIGFuZFxuICogcHJlc2VudGF0aW9uIG9mIHRoZSBjb21wb25lbnQgaW4gYSByZXVzYWJsZSBmdW5jdGlvbiBhcyBzaG93biBpbiB0aGUgW3VzYWdlXSgjdXNhZ2UpXG4gKiBzZWN0aW9uIGJlbG93LlxuICpcbiAqIEB1c2FnZVxuICpcbiAqIFRvIG9wZW4gYSBwb3BvdmVyIG9uIHRoZSBjbGljayBvZiBhIGJ1dHRvbiwgcGFzcyBgJGV2ZW50YCB0byB0aGUgbWV0aG9kXG4gKiB3aGljaCBjcmVhdGVzIGFuZCBwcmVzZW50cyB0aGUgcG9wb3ZlcjpcbiAqXG4gKiBgYGBodG1sXG4gKiA8YnV0dG9uIGlvbi1idXR0b24gaWNvbi1vbmx5IChjbGljayk9XCJwcmVzZW50UG9wb3ZlcigkZXZlbnQpXCI+XG4gKiAgIDxpb24taWNvbiBuYW1lPVwibW9yZVwiPjwvaW9uLWljb24+XG4gKiA8L2J1dHRvbj5cbiAqIGBgYFxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBQb3BvdmVyQ29udHJvbGxlciB9IGZyb20gJ2lvbmljLWFuZ3VsYXInO1xuICpcbiAqIEBDb21wb25lbnQoe30pXG4gKiBjbGFzcyBNeVBhZ2Uge1xuICogICBjb25zdHJ1Y3RvcihwdWJsaWMgcG9wb3ZlckN0cmw6IFBvcG92ZXJDb250cm9sbGVyKSB7fVxuICpcbiAqICAgcHJlc2VudFBvcG92ZXIobXlFdmVudCkge1xuICogICAgIGxldCBwb3BvdmVyID0gdGhpcy5wb3BvdmVyQ3RybC5jcmVhdGUoUG9wb3ZlclBhZ2UpO1xuICogICAgIHBvcG92ZXIucHJlc2VudCh7XG4gKiAgICAgICBldjogbXlFdmVudFxuICogICAgIH0pO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgYFBvcG92ZXJQYWdlYCB3aWxsIGRpc3BsYXkgaW5zaWRlIG9mIHRoZSBwb3BvdmVyLCBhbmRcbiAqIGNhbiBiZSBhbnl0aGluZy4gQmVsb3cgaXMgYW4gZXhhbXBsZSBvZiBhIHBhZ2Ugd2l0aCBpdGVtc1xuICogdGhhdCBjbG9zZSB0aGUgcG9wb3ZlciBvbiBjbGljay5cbiAqXG4gKiBgYGB0c1xuICogQENvbXBvbmVudCh7XG4gKiAgIHRlbXBsYXRlOiBgXG4gKiAgICAgPGlvbi1saXN0PlxuICogICAgICAgPGlvbi1saXN0LWhlYWRlcj5Jb25pYzwvaW9uLWxpc3QtaGVhZGVyPlxuICogICAgICAgPGJ1dHRvbiBpb24taXRlbSAoY2xpY2spPVwiY2xvc2UoKVwiPkxlYXJuIElvbmljPC9idXR0b24+XG4gKiAgICAgICA8YnV0dG9uIGlvbi1pdGVtIChjbGljayk9XCJjbG9zZSgpXCI+RG9jdW1lbnRhdGlvbjwvYnV0dG9uPlxuICogICAgICAgPGJ1dHRvbiBpb24taXRlbSAoY2xpY2spPVwiY2xvc2UoKVwiPlNob3djYXNlPC9idXR0b24+XG4gKiAgICAgICA8YnV0dG9uIGlvbi1pdGVtIChjbGljayk9XCJjbG9zZSgpXCI+R2l0SHViIFJlcG88L2J1dHRvbj5cbiAqICAgICA8L2lvbi1saXN0PlxuICogICBgXG4gKiB9KVxuICogY2xhc3MgUG9wb3ZlclBhZ2Uge1xuICogICBjb25zdHJ1Y3RvcihwdWJsaWMgdmlld0N0cmw6IFZpZXdDb250cm9sbGVyKSB7fVxuICpcbiAqICAgY2xvc2UoKSB7XG4gKiAgICAgdGhpcy52aWV3Q3RybC5kaXNtaXNzKCk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICogQGFkdmFuY2VkXG4gKiBQb3BvdmVyIE9wdGlvbnNcbiAqXG4gKiB8IE9wdGlvbiAgICAgICAgICAgICAgICB8IFR5cGUgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCBjc3NDbGFzcyAgICAgICAgICAgICAgfGBzdHJpbmdgICAgIHwgQWRkaXRpb25hbCBjbGFzc2VzIGZvciBjdXN0b20gc3R5bGVzLCBzZXBhcmF0ZWQgYnkgc3BhY2VzLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHNob3dCYWNrZHJvcCAgICAgICAgICB8YGJvb2xlYW5gICAgfCBXaGV0aGVyIHRvIHNob3cgdGhlIGJhY2tkcm9wLiBEZWZhdWx0IHRydWUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgZW5hYmxlQmFja2Ryb3BEaXNtaXNzIHxgYm9vbGVhbmAgICB8IFdoZXRoZXIgdGhlIHBvcG92ZXIgc2hvdWxkIGJlIGRpc21pc3NlZCBieSB0YXBwaW5nIHRoZSBiYWNrZHJvcC4gRGVmYXVsdCB0cnVlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqXG4gKlxuICogQGRlbW8gL2RvY3MvZGVtb3Mvc3JjL3BvcG92ZXIvXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvcG92ZXJDb250cm9sbGVyIHtcbiAgICBwcml2YXRlIF9hcHA7XG4gICAgY29uZmlnOiBDb25maWc7XG4gICAgcHJpdmF0ZSBfZGVlcExpbmtlcjtcbiAgICBjb25zdHJ1Y3RvcihfYXBwOiBBcHAsIGNvbmZpZzogQ29uZmlnLCBfZGVlcExpbmtlcjogRGVlcExpbmtlcik7XG4gICAgLyoqXG4gICAgICogUHJlc2VudCBhIHBvcG92ZXIuIFNlZSBiZWxvdyBmb3Igb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgVGhlIFBvcG92ZXJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBBbnkgZGF0YSB0byBwYXNzIHRvIHRoZSBQb3BvdmVyIHZpZXdcbiAgICAgKiBAcGFyYW0ge1BvcG92ZXJPcHRpb25zfSBvcHRzIFBvcG92ZXIgb3B0aW9uc1xuICAgICAqL1xuICAgIGNyZWF0ZShjb21wb25lbnQ6IGFueSwgZGF0YT86IHt9LCBvcHRzPzogUG9wb3Zlck9wdGlvbnMpOiBQb3BvdmVyO1xufVxuIl19