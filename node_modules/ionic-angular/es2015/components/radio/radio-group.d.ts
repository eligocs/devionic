import { ChangeDetectorRef, ElementRef, EventEmitter, Renderer } from '@angular/core';
import { RadioButton } from './radio-button';
/**
 * @name RadioGroup
 * @description
 * A radio group is a group of [radio buttons](../RadioButton). It allows
 * a user to select at most one radio button from a set. Checking one radio
 * button that belongs to a radio group unchecks any previous checked
 * radio button within the same group.
 *
 * See the [Angular Forms Docs](https://angular.io/docs/ts/latest/guide/forms.html)
 * for more information on forms and inputs.
 *
 * @usage
 * ```html
 * <ion-list radio-group [(ngModel)]="autoManufacturers">
 *
 *   <ion-list-header>
 *     Auto Manufacturers
 *   </ion-list-header>
 *
 *   <ion-item>
 *     <ion-label>Cord</ion-label>
 *     <ion-radio value="cord"></ion-radio>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label>Duesenberg</ion-label>
 *     <ion-radio value="duesenberg"></ion-radio>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label>Hudson</ion-label>
 *     <ion-radio value="hudson"></ion-radio>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label>Packard</ion-label>
 *     <ion-radio value="packard"></ion-radio>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label>Studebaker</ion-label>
 *     <ion-radio value="studebaker"></ion-radio>
 *   </ion-item>
 *
 * </ion-list>
 * ```
 *
 * @demo /docs/demos/src/radio/
 * @see {@link /docs/components#radio Radio Component Docs}
 * @see {@link ../RadioButton RadioButton API Docs}
*/
import * as ɵngcc0 from '@angular/core';
export declare class RadioGroup {
    private _renderer;
    private _elementRef;
    private _cd;
    /**
     * @internal
     */
    _disabled: boolean;
    /**
     * @hidden
     */
    _btns: RadioButton[];
    /**
     * @hidden
     */
    _fn: Function;
    /**
     * @hidden
     */
    _ids: number;
    /**
     * @hidden
     */
    _init: boolean;
    /**
     * @hidden
     */
    value: any;
    /**
     * @hidden
     */
    id: number;
    /**
     * @input {boolean} If true, the user cannot interact with any of the buttons in the group.
     */
    disabled: boolean;
    /**
     * @output {any} Emitted when the selected button has changed.
     */
    ionChange: EventEmitter<RadioGroup>;
    constructor(_renderer: Renderer, _elementRef: ElementRef, _cd: ChangeDetectorRef);
    /**
     * @hidden
     */
    ngAfterContentInit(): void;
    /**
     * @hidden
     */
    writeValue(val: any): void;
    /**
     * @hidden
     */
    registerOnChange(fn: Function): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    /**
     * @hidden
     */
    _update(): void;
    /**
     * @hidden
     */
    _setActive(radioButton: RadioButton): void;
    /**
     * @hidden
     */
    add(button: RadioButton): string;
    /**
     * @hidden
     */
    remove(button: RadioButton): void;
    /**
     * @hidden
     */
    _header: any;
    /**
     * @hidden
     */
    onChange(val: any): void;
    /**
     * @hidden
     */
    onTouched(): void;
    /**
     * @hidden
     */
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RadioGroup, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<RadioGroup, "[radio-group]", never, { "disabled": "disabled"; }, { "ionChange": "ionChange"; }, ["_header"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuZC50cyIsInNvdXJjZXMiOlsicmFkaW8tZ3JvdXAuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgUmVuZGVyZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJhZGlvQnV0dG9uIH0gZnJvbSAnLi9yYWRpby1idXR0b24nO1xuLyoqXG4gKiBAbmFtZSBSYWRpb0dyb3VwXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgcmFkaW8gZ3JvdXAgaXMgYSBncm91cCBvZiBbcmFkaW8gYnV0dG9uc10oLi4vUmFkaW9CdXR0b24pLiBJdCBhbGxvd3NcbiAqIGEgdXNlciB0byBzZWxlY3QgYXQgbW9zdCBvbmUgcmFkaW8gYnV0dG9uIGZyb20gYSBzZXQuIENoZWNraW5nIG9uZSByYWRpb1xuICogYnV0dG9uIHRoYXQgYmVsb25ncyB0byBhIHJhZGlvIGdyb3VwIHVuY2hlY2tzIGFueSBwcmV2aW91cyBjaGVja2VkXG4gKiByYWRpbyBidXR0b24gd2l0aGluIHRoZSBzYW1lIGdyb3VwLlxuICpcbiAqIFNlZSB0aGUgW0FuZ3VsYXIgRm9ybXMgRG9jc10oaHR0cHM6Ly9hbmd1bGFyLmlvL2RvY3MvdHMvbGF0ZXN0L2d1aWRlL2Zvcm1zLmh0bWwpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBmb3JtcyBhbmQgaW5wdXRzLlxuICpcbiAqIEB1c2FnZVxuICogYGBgaHRtbFxuICogPGlvbi1saXN0IHJhZGlvLWdyb3VwIFsobmdNb2RlbCldPVwiYXV0b01hbnVmYWN0dXJlcnNcIj5cbiAqXG4gKiAgIDxpb24tbGlzdC1oZWFkZXI+XG4gKiAgICAgQXV0byBNYW51ZmFjdHVyZXJzXG4gKiAgIDwvaW9uLWxpc3QtaGVhZGVyPlxuICpcbiAqICAgPGlvbi1pdGVtPlxuICogICAgIDxpb24tbGFiZWw+Q29yZDwvaW9uLWxhYmVsPlxuICogICAgIDxpb24tcmFkaW8gdmFsdWU9XCJjb3JkXCI+PC9pb24tcmFkaW8+XG4gKiAgIDwvaW9uLWl0ZW0+XG4gKlxuICogICA8aW9uLWl0ZW0+XG4gKiAgICAgPGlvbi1sYWJlbD5EdWVzZW5iZXJnPC9pb24tbGFiZWw+XG4gKiAgICAgPGlvbi1yYWRpbyB2YWx1ZT1cImR1ZXNlbmJlcmdcIj48L2lvbi1yYWRpbz5cbiAqICAgPC9pb24taXRlbT5cbiAqXG4gKiAgIDxpb24taXRlbT5cbiAqICAgICA8aW9uLWxhYmVsPkh1ZHNvbjwvaW9uLWxhYmVsPlxuICogICAgIDxpb24tcmFkaW8gdmFsdWU9XCJodWRzb25cIj48L2lvbi1yYWRpbz5cbiAqICAgPC9pb24taXRlbT5cbiAqXG4gKiAgIDxpb24taXRlbT5cbiAqICAgICA8aW9uLWxhYmVsPlBhY2thcmQ8L2lvbi1sYWJlbD5cbiAqICAgICA8aW9uLXJhZGlvIHZhbHVlPVwicGFja2FyZFwiPjwvaW9uLXJhZGlvPlxuICogICA8L2lvbi1pdGVtPlxuICpcbiAqICAgPGlvbi1pdGVtPlxuICogICAgIDxpb24tbGFiZWw+U3R1ZGViYWtlcjwvaW9uLWxhYmVsPlxuICogICAgIDxpb24tcmFkaW8gdmFsdWU9XCJzdHVkZWJha2VyXCI+PC9pb24tcmFkaW8+XG4gKiAgIDwvaW9uLWl0ZW0+XG4gKlxuICogPC9pb24tbGlzdD5cbiAqIGBgYFxuICpcbiAqIEBkZW1vIC9kb2NzL2RlbW9zL3NyYy9yYWRpby9cbiAqIEBzZWUge0BsaW5rIC9kb2NzL2NvbXBvbmVudHMjcmFkaW8gUmFkaW8gQ29tcG9uZW50IERvY3N9XG4gKiBAc2VlIHtAbGluayAuLi9SYWRpb0J1dHRvbiBSYWRpb0J1dHRvbiBBUEkgRG9jc31cbiovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSYWRpb0dyb3VwIHtcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmO1xuICAgIHByaXZhdGUgX2NkO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9kaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2J0bnM6IFJhZGlvQnV0dG9uW107XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9mbjogRnVuY3Rpb247XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9pZHM6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2luaXQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHZhbHVlOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGlkOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtib29sZWFufSBJZiB0cnVlLCB0aGUgdXNlciBjYW5ub3QgaW50ZXJhY3Qgd2l0aCBhbnkgb2YgdGhlIGJ1dHRvbnMgaW4gdGhlIGdyb3VwLlxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBvdXRwdXQge2FueX0gRW1pdHRlZCB3aGVuIHRoZSBzZWxlY3RlZCBidXR0b24gaGFzIGNoYW5nZWQuXG4gICAgICovXG4gICAgaW9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8UmFkaW9Hcm91cD47XG4gICAgY29uc3RydWN0b3IoX3JlbmRlcmVyOiBSZW5kZXJlciwgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIF9jZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgd3JpdGVWYWx1ZSh2YWw6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IEZ1bmN0aW9uKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF91cGRhdGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX3NldEFjdGl2ZShyYWRpb0J1dHRvbjogUmFkaW9CdXR0b24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBhZGQoYnV0dG9uOiBSYWRpb0J1dHRvbik6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVtb3ZlKGJ1dHRvbjogUmFkaW9CdXR0b24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBfaGVhZGVyOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uQ2hhbmdlKHZhbDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25Ub3VjaGVkKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG59XG4iXX0=