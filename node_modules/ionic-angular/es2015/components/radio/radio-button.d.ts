import { ElementRef, EventEmitter, OnDestroy, OnInit, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { Form, IonicTapInput } from '../../util/form';
import { Ion } from '../ion';
import { Item } from '../item/item';
import { RadioGroup } from './radio-group';
/**
 * @description
 * A radio button is a button that can be either checked or unchecked. A user can tap
 * the button to check or uncheck it. It can also be checked from the template using
 * the `checked` property.
 *
 * Use an element with a `radio-group` attribute to group a set of radio buttons. When
 * radio buttons are inside a [radio group](../RadioGroup), exactly one radio button
 * in the group can be checked at any time. If a radio button is not placed in a group,
 * they will all have the ability to be checked at the same time.
 *
 * See the [Angular Forms Docs](https://angular.io/docs/ts/latest/guide/forms.html) for
 * more information on forms and input.
 *
 * @usage
 * ```html
 * <ion-list radio-group [(ngModel)]="relationship">
 *   <ion-item>
 *     <ion-label>Friends</ion-label>
 *     <ion-radio value="friends" checked></ion-radio>
 *   </ion-item>
 *   <ion-item>
 *     <ion-label>Family</ion-label>
 *     <ion-radio value="family"></ion-radio>
 *   </ion-item>
 *   <ion-item>
 *     <ion-label>Enemies</ion-label>
 *     <ion-radio value="enemies" [disabled]="isDisabled"></ion-radio>
 *   </ion-item>
 * </ion-list>
 * ```
 * @demo /docs/demos/src/radio/
 * @see {@link /docs/components#radio Radio Component Docs}
 * @see {@link ../RadioGroup RadioGroup API Docs}
 */
import * as ɵngcc0 from '@angular/core';
export declare class RadioButton extends Ion implements IonicTapInput, OnDestroy, OnInit {
    private _form;
    private _item;
    private _group;
    /**
     * @internal
     */
    _checked: boolean;
    /**
     * @internal
     */
    _disabled: boolean;
    /**
     * @internal
     */
    _labelId: string;
    /**
     * @internal
     */
    _value: any;
    /**
     * @internal
     */
    id: string;
    /**
     * @input {string} The color to use from your Sass `$colors` map.
     * Default options are: `"primary"`, `"secondary"`, `"danger"`, `"light"`, and `"dark"`.
     * For more information, see [Theming your App](/docs/theming/theming-your-app).
     */
    color: string;
    /**
     * @output {any} Emitted when the radio button is selected.
     */
    ionSelect: EventEmitter<any>;
    constructor(_form: Form, config: Config, elementRef: ElementRef, renderer: Renderer, _item: Item, _group: RadioGroup);
    /**
     * @input {any} The value of the radio button. Defaults to the generated id.
     */
    value: any;
    /**
     * @input {boolean} If true, the element is selected, and other buttons in the group are unselected.
     */
    checked: boolean;
    /**
     * @input {boolean} If true, the user cannot interact with this element.
     */
    disabled: boolean;
    /**
     * @hidden
     */
    initFocus(): void;
    /**
     * @internal
     */
    _click(ev: UIEvent): void;
    /**
     * @internal
     */
    ngOnInit(): void;
    /**
     * @internal
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RadioButton, [null, null, null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RadioButton, "ion-radio", never, { "color": "color"; "value": "value"; "checked": "checked"; "disabled": "disabled"; }, { "ionSelect": "ionSelect"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tYnV0dG9uLmQudHMiLCJzb3VyY2VzIjpbInJhZGlvLWJ1dHRvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnJztcbmltcG9ydCB7IEZvcm0sIElvbmljVGFwSW5wdXQgfSBmcm9tICcuLi8uLi91dGlsL2Zvcm0nO1xuaW1wb3J0IHsgSW9uIH0gZnJvbSAnLi4vaW9uJztcbmltcG9ydCB7IEl0ZW0gfSBmcm9tICcuLi9pdGVtL2l0ZW0nO1xuaW1wb3J0IHsgUmFkaW9Hcm91cCB9IGZyb20gJy4vcmFkaW8tZ3JvdXAnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgcmFkaW8gYnV0dG9uIGlzIGEgYnV0dG9uIHRoYXQgY2FuIGJlIGVpdGhlciBjaGVja2VkIG9yIHVuY2hlY2tlZC4gQSB1c2VyIGNhbiB0YXBcbiAqIHRoZSBidXR0b24gdG8gY2hlY2sgb3IgdW5jaGVjayBpdC4gSXQgY2FuIGFsc28gYmUgY2hlY2tlZCBmcm9tIHRoZSB0ZW1wbGF0ZSB1c2luZ1xuICogdGhlIGBjaGVja2VkYCBwcm9wZXJ0eS5cbiAqXG4gKiBVc2UgYW4gZWxlbWVudCB3aXRoIGEgYHJhZGlvLWdyb3VwYCBhdHRyaWJ1dGUgdG8gZ3JvdXAgYSBzZXQgb2YgcmFkaW8gYnV0dG9ucy4gV2hlblxuICogcmFkaW8gYnV0dG9ucyBhcmUgaW5zaWRlIGEgW3JhZGlvIGdyb3VwXSguLi9SYWRpb0dyb3VwKSwgZXhhY3RseSBvbmUgcmFkaW8gYnV0dG9uXG4gKiBpbiB0aGUgZ3JvdXAgY2FuIGJlIGNoZWNrZWQgYXQgYW55IHRpbWUuIElmIGEgcmFkaW8gYnV0dG9uIGlzIG5vdCBwbGFjZWQgaW4gYSBncm91cCxcbiAqIHRoZXkgd2lsbCBhbGwgaGF2ZSB0aGUgYWJpbGl0eSB0byBiZSBjaGVja2VkIGF0IHRoZSBzYW1lIHRpbWUuXG4gKlxuICogU2VlIHRoZSBbQW5ndWxhciBGb3JtcyBEb2NzXShodHRwczovL2FuZ3VsYXIuaW8vZG9jcy90cy9sYXRlc3QvZ3VpZGUvZm9ybXMuaHRtbCkgZm9yXG4gKiBtb3JlIGluZm9ybWF0aW9uIG9uIGZvcm1zIGFuZCBpbnB1dC5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYGh0bWxcbiAqIDxpb24tbGlzdCByYWRpby1ncm91cCBbKG5nTW9kZWwpXT1cInJlbGF0aW9uc2hpcFwiPlxuICogICA8aW9uLWl0ZW0+XG4gKiAgICAgPGlvbi1sYWJlbD5GcmllbmRzPC9pb24tbGFiZWw+XG4gKiAgICAgPGlvbi1yYWRpbyB2YWx1ZT1cImZyaWVuZHNcIiBjaGVja2VkPjwvaW9uLXJhZGlvPlxuICogICA8L2lvbi1pdGVtPlxuICogICA8aW9uLWl0ZW0+XG4gKiAgICAgPGlvbi1sYWJlbD5GYW1pbHk8L2lvbi1sYWJlbD5cbiAqICAgICA8aW9uLXJhZGlvIHZhbHVlPVwiZmFtaWx5XCI+PC9pb24tcmFkaW8+XG4gKiAgIDwvaW9uLWl0ZW0+XG4gKiAgIDxpb24taXRlbT5cbiAqICAgICA8aW9uLWxhYmVsPkVuZW1pZXM8L2lvbi1sYWJlbD5cbiAqICAgICA8aW9uLXJhZGlvIHZhbHVlPVwiZW5lbWllc1wiIFtkaXNhYmxlZF09XCJpc0Rpc2FibGVkXCI+PC9pb24tcmFkaW8+XG4gKiAgIDwvaW9uLWl0ZW0+XG4gKiA8L2lvbi1saXN0PlxuICogYGBgXG4gKiBAZGVtbyAvZG9jcy9kZW1vcy9zcmMvcmFkaW8vXG4gKiBAc2VlIHtAbGluayAvZG9jcy9jb21wb25lbnRzI3JhZGlvIFJhZGlvIENvbXBvbmVudCBEb2NzfVxuICogQHNlZSB7QGxpbmsgLi4vUmFkaW9Hcm91cCBSYWRpb0dyb3VwIEFQSSBEb2NzfVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSYWRpb0J1dHRvbiBleHRlbmRzIElvbiBpbXBsZW1lbnRzIElvbmljVGFwSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgICBwcml2YXRlIF9mb3JtO1xuICAgIHByaXZhdGUgX2l0ZW07XG4gICAgcHJpdmF0ZSBfZ3JvdXA7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX2NoZWNrZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX2Rpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9sYWJlbElkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX3ZhbHVlOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge3N0cmluZ30gVGhlIGNvbG9yIHRvIHVzZSBmcm9tIHlvdXIgU2FzcyBgJGNvbG9yc2AgbWFwLlxuICAgICAqIERlZmF1bHQgb3B0aW9ucyBhcmU6IGBcInByaW1hcnlcImAsIGBcInNlY29uZGFyeVwiYCwgYFwiZGFuZ2VyXCJgLCBgXCJsaWdodFwiYCwgYW5kIGBcImRhcmtcImAuXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBbVGhlbWluZyB5b3VyIEFwcF0oL2RvY3MvdGhlbWluZy90aGVtaW5nLXlvdXItYXBwKS5cbiAgICAgKi9cbiAgICBjb2xvcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBvdXRwdXQge2FueX0gRW1pdHRlZCB3aGVuIHRoZSByYWRpbyBidXR0b24gaXMgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgaW9uU2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb25zdHJ1Y3RvcihfZm9ybTogRm9ybSwgY29uZmlnOiBDb25maWcsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlciwgX2l0ZW06IEl0ZW0sIF9ncm91cDogUmFkaW9Hcm91cCk7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHthbnl9IFRoZSB2YWx1ZSBvZiB0aGUgcmFkaW8gYnV0dG9uLiBEZWZhdWx0cyB0byB0aGUgZ2VuZXJhdGVkIGlkLlxuICAgICAqL1xuICAgIHZhbHVlOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtib29sZWFufSBJZiB0cnVlLCB0aGUgZWxlbWVudCBpcyBzZWxlY3RlZCwgYW5kIG90aGVyIGJ1dHRvbnMgaW4gdGhlIGdyb3VwIGFyZSB1bnNlbGVjdGVkLlxuICAgICAqL1xuICAgIGNoZWNrZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtib29sZWFufSBJZiB0cnVlLCB0aGUgdXNlciBjYW5ub3QgaW50ZXJhY3Qgd2l0aCB0aGlzIGVsZW1lbnQuXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGluaXRGb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9jbGljayhldjogVUlFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19