import { ElementRef } from '@angular/core';
/**
 * @name Scroll
 * @description
 * Scroll is a non-flexboxed scroll area that can scroll horizontally or vertically. `ion-Scroll` Can be used in places where you may not need a full page scroller, but a highly customized one, such as image scubber or comment scroller.
 * @usage
 * ```html
 * <ion-scroll scrollX="true">
 * </ion-scroll>
 *
 * <ion-scroll scrollY="true">
 * </ion-scroll>
 *
 * <ion-scroll scrollX="true" scrollY="true">
 * </ion-scroll>
 * ```
 * @demo /docs/demos/src/scroll/
 */
import * as ɵngcc0 from '@angular/core';
export declare class Scroll {
    _scrollX: boolean;
    _scrollY: boolean;
    _zoom: boolean;
    _maxZoom: number;
    /**
     * @input {boolean} If true, scrolling along the X axis is enabled.
     */
    scrollX: any;
    /**
     * @input {boolean} If true, scrolling along the Y axis is enabled; requires the following CSS declaration: ion-scroll { white-space: nowrap; }
     */
    scrollY: any;
    /**
     * @input {boolean} If true, zooming is enabled.
     */
    zoom: any;
    /**
     * @input {number} Set the max zoom amount.
     */
    maxZoom: any;
    /**
     * @hidden
     */
    maxScale: number;
    /**
     * @hidden
     */
    zoomDuration: number;
    /** @internal */
    _scrollContent: ElementRef;
    constructor();
    /**
     * @hidden
     * Add a scroll event handler to the scroll element if it exists.
     * @param {Function} handler  The scroll handler to add to the scroll element.
     * @returns {?Function} a function to remove the specified handler, otherwise
     * undefined if the scroll element doesn't exist.
     */
    addScrollEventListener(handler: any): () => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Scroll, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Scroll, "ion-scroll", never, { "scrollX": "scrollX"; "scrollY": "scrollY"; "zoom": "zoom"; "maxZoom": "maxZoom"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLmQudHMiLCJzb3VyY2VzIjpbInNjcm9sbC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIEBuYW1lIFNjcm9sbFxuICogQGRlc2NyaXB0aW9uXG4gKiBTY3JvbGwgaXMgYSBub24tZmxleGJveGVkIHNjcm9sbCBhcmVhIHRoYXQgY2FuIHNjcm9sbCBob3Jpem9udGFsbHkgb3IgdmVydGljYWxseS4gYGlvbi1TY3JvbGxgIENhbiBiZSB1c2VkIGluIHBsYWNlcyB3aGVyZSB5b3UgbWF5IG5vdCBuZWVkIGEgZnVsbCBwYWdlIHNjcm9sbGVyLCBidXQgYSBoaWdobHkgY3VzdG9taXplZCBvbmUsIHN1Y2ggYXMgaW1hZ2Ugc2N1YmJlciBvciBjb21tZW50IHNjcm9sbGVyLlxuICogQHVzYWdlXG4gKiBgYGBodG1sXG4gKiA8aW9uLXNjcm9sbCBzY3JvbGxYPVwidHJ1ZVwiPlxuICogPC9pb24tc2Nyb2xsPlxuICpcbiAqIDxpb24tc2Nyb2xsIHNjcm9sbFk9XCJ0cnVlXCI+XG4gKiA8L2lvbi1zY3JvbGw+XG4gKlxuICogPGlvbi1zY3JvbGwgc2Nyb2xsWD1cInRydWVcIiBzY3JvbGxZPVwidHJ1ZVwiPlxuICogPC9pb24tc2Nyb2xsPlxuICogYGBgXG4gKiBAZGVtbyAvZG9jcy9kZW1vcy9zcmMvc2Nyb2xsL1xuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTY3JvbGwge1xuICAgIF9zY3JvbGxYOiBib29sZWFuO1xuICAgIF9zY3JvbGxZOiBib29sZWFuO1xuICAgIF96b29tOiBib29sZWFuO1xuICAgIF9tYXhab29tOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtib29sZWFufSBJZiB0cnVlLCBzY3JvbGxpbmcgYWxvbmcgdGhlIFggYXhpcyBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIHNjcm9sbFg6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge2Jvb2xlYW59IElmIHRydWUsIHNjcm9sbGluZyBhbG9uZyB0aGUgWSBheGlzIGlzIGVuYWJsZWQ7IHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgQ1NTIGRlY2xhcmF0aW9uOiBpb24tc2Nyb2xsIHsgd2hpdGUtc3BhY2U6IG5vd3JhcDsgfVxuICAgICAqL1xuICAgIHNjcm9sbFk6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge2Jvb2xlYW59IElmIHRydWUsIHpvb21pbmcgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICB6b29tOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtudW1iZXJ9IFNldCB0aGUgbWF4IHpvb20gYW1vdW50LlxuICAgICAqL1xuICAgIG1heFpvb206IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbWF4U2NhbGU6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgem9vbUR1cmF0aW9uOiBudW1iZXI7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9zY3JvbGxDb250ZW50OiBFbGVtZW50UmVmO1xuICAgIGNvbnN0cnVjdG9yKCk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEFkZCBhIHNjcm9sbCBldmVudCBoYW5kbGVyIHRvIHRoZSBzY3JvbGwgZWxlbWVudCBpZiBpdCBleGlzdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciAgVGhlIHNjcm9sbCBoYW5kbGVyIHRvIGFkZCB0byB0aGUgc2Nyb2xsIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgez9GdW5jdGlvbn0gYSBmdW5jdGlvbiB0byByZW1vdmUgdGhlIHNwZWNpZmllZCBoYW5kbGVyLCBvdGhlcndpc2VcbiAgICAgKiB1bmRlZmluZWQgaWYgdGhlIHNjcm9sbCBlbGVtZW50IGRvZXNuJ3QgZXhpc3QuXG4gICAgICovXG4gICAgYWRkU2Nyb2xsRXZlbnRMaXN0ZW5lcihoYW5kbGVyOiBhbnkpOiAoKSA9PiB2b2lkO1xufVxuIl19