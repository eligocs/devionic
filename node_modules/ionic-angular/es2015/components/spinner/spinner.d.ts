import { ElementRef, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { Ion } from '../ion';
/**
 * @name Spinner
 * @description
 * The `ion-spinner` component provides a variety of animated SVG spinners.
 * Spinners enables you to give users feedback that the app is actively
 * processing/thinking/waiting/chillin’ out, or whatever you’d like it to indicate.
 * By default, the `ion-refresher` feature uses this spinner component while it's
 * the refresher is in the `refreshing` state.
 *
 * Ionic offers a handful of spinners out of the box, and by default, it will use
 * the appropriate spinner for the platform on which it’s running.
 *
 * <table class="table spinner-table">
 *  <tr>
 *    <th>
 *      <code>ios</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="ios"></ion-spinner>
 *    </td>
 *  </tr>
 *  <tr>
 *    <th>
 *      <code>ios-small</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="ios-small"></ion-spinner>
 *    </td>
 *  </tr>
 *  <tr>
 *    <th>
 *      <code>bubbles</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="bubbles"></ion-spinner>
 *    </td>
 *  </tr>
 *  <tr>
 *    <th>
 *      <code>circles</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="circles"></ion-spinner>
 *    </td>
 *  </tr>
 *  <tr>
 *    <th>
 *      <code>crescent</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="crescent"></ion-spinner>
 *    </td>
 *  </tr>
 *  <tr>
 *    <th>
 *      <code>dots</code>
 *    </th>
 *    <td>
 *      <ion-spinner name="dots"></ion-spinner>
 *    </td>
 *  </tr>
 * </table>
 *
 * @usage
 * The following code would use the default spinner for the platform it's
 * running from. If it's neither iOS or Android, it'll default to use `ios`.
 *
 * ```html
 * <ion-spinner></ion-spinner>
 * ```
 *
 * By setting the `name` property, you can specify which predefined spinner to
 * use, no matter what the platform is.
 *
 * ```html
 * <ion-spinner name="bubbles"></ion-spinner>
 * ```
 *
 * ## Styling SVG with CSS
 * One cool thing about SVG is its ability to be styled with CSS! One thing to note
 * is that some of the CSS properties on an SVG element have different names. For
 * example, SVG uses the term `stroke` instead of `border`, and `fill` instead
 * of `background-color`.
 *
 * ```css
 * ion-spinner * {
 *   width: 28px;
 *   height: 28px;
 *   stroke: #444;
 *   fill: #222;
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class Spinner extends Ion {
    _c: any[];
    _l: any[];
    _name: string;
    _dur: number;
    _init: boolean;
    _paused: boolean;
    /**
     * @input {string} SVG spinner name.
     */
    name: string;
    /**
     * @input {string} How long it takes it to do one loop.
     */
    duration: number;
    /**
     * @input {boolean} If true, pause the animation.
     */
    paused: boolean;
    constructor(config: Config, elementRef: ElementRef, renderer: Renderer);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    load(): void;
    _loadEle(spinner: any, index: number, total: number): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Spinner, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Spinner, "ion-spinner", never, { "name": "name"; "duration": "duration"; "paused": "paused"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5kLnRzIiwic291cmNlcyI6WyJzcGlubmVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgSW9uIH0gZnJvbSAnLi4vaW9uJztcbi8qKlxuICogQG5hbWUgU3Bpbm5lclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYGlvbi1zcGlubmVyYCBjb21wb25lbnQgcHJvdmlkZXMgYSB2YXJpZXR5IG9mIGFuaW1hdGVkIFNWRyBzcGlubmVycy5cbiAqIFNwaW5uZXJzIGVuYWJsZXMgeW91IHRvIGdpdmUgdXNlcnMgZmVlZGJhY2sgdGhhdCB0aGUgYXBwIGlzIGFjdGl2ZWx5XG4gKiBwcm9jZXNzaW5nL3RoaW5raW5nL3dhaXRpbmcvY2hpbGxpbuKAmSBvdXQsIG9yIHdoYXRldmVyIHlvdeKAmWQgbGlrZSBpdCB0byBpbmRpY2F0ZS5cbiAqIEJ5IGRlZmF1bHQsIHRoZSBgaW9uLXJlZnJlc2hlcmAgZmVhdHVyZSB1c2VzIHRoaXMgc3Bpbm5lciBjb21wb25lbnQgd2hpbGUgaXQnc1xuICogdGhlIHJlZnJlc2hlciBpcyBpbiB0aGUgYHJlZnJlc2hpbmdgIHN0YXRlLlxuICpcbiAqIElvbmljIG9mZmVycyBhIGhhbmRmdWwgb2Ygc3Bpbm5lcnMgb3V0IG9mIHRoZSBib3gsIGFuZCBieSBkZWZhdWx0LCBpdCB3aWxsIHVzZVxuICogdGhlIGFwcHJvcHJpYXRlIHNwaW5uZXIgZm9yIHRoZSBwbGF0Zm9ybSBvbiB3aGljaCBpdOKAmXMgcnVubmluZy5cbiAqXG4gKiA8dGFibGUgY2xhc3M9XCJ0YWJsZSBzcGlubmVyLXRhYmxlXCI+XG4gKiAgPHRyPlxuICogICAgPHRoPlxuICogICAgICA8Y29kZT5pb3M8L2NvZGU+XG4gKiAgICA8L3RoPlxuICogICAgPHRkPlxuICogICAgICA8aW9uLXNwaW5uZXIgbmFtZT1cImlvc1wiPjwvaW9uLXNwaW5uZXI+XG4gKiAgICA8L3RkPlxuICogIDwvdHI+XG4gKiAgPHRyPlxuICogICAgPHRoPlxuICogICAgICA8Y29kZT5pb3Mtc21hbGw8L2NvZGU+XG4gKiAgICA8L3RoPlxuICogICAgPHRkPlxuICogICAgICA8aW9uLXNwaW5uZXIgbmFtZT1cImlvcy1zbWFsbFwiPjwvaW9uLXNwaW5uZXI+XG4gKiAgICA8L3RkPlxuICogIDwvdHI+XG4gKiAgPHRyPlxuICogICAgPHRoPlxuICogICAgICA8Y29kZT5idWJibGVzPC9jb2RlPlxuICogICAgPC90aD5cbiAqICAgIDx0ZD5cbiAqICAgICAgPGlvbi1zcGlubmVyIG5hbWU9XCJidWJibGVzXCI+PC9pb24tc3Bpbm5lcj5cbiAqICAgIDwvdGQ+XG4gKiAgPC90cj5cbiAqICA8dHI+XG4gKiAgICA8dGg+XG4gKiAgICAgIDxjb2RlPmNpcmNsZXM8L2NvZGU+XG4gKiAgICA8L3RoPlxuICogICAgPHRkPlxuICogICAgICA8aW9uLXNwaW5uZXIgbmFtZT1cImNpcmNsZXNcIj48L2lvbi1zcGlubmVyPlxuICogICAgPC90ZD5cbiAqICA8L3RyPlxuICogIDx0cj5cbiAqICAgIDx0aD5cbiAqICAgICAgPGNvZGU+Y3Jlc2NlbnQ8L2NvZGU+XG4gKiAgICA8L3RoPlxuICogICAgPHRkPlxuICogICAgICA8aW9uLXNwaW5uZXIgbmFtZT1cImNyZXNjZW50XCI+PC9pb24tc3Bpbm5lcj5cbiAqICAgIDwvdGQ+XG4gKiAgPC90cj5cbiAqICA8dHI+XG4gKiAgICA8dGg+XG4gKiAgICAgIDxjb2RlPmRvdHM8L2NvZGU+XG4gKiAgICA8L3RoPlxuICogICAgPHRkPlxuICogICAgICA8aW9uLXNwaW5uZXIgbmFtZT1cImRvdHNcIj48L2lvbi1zcGlubmVyPlxuICogICAgPC90ZD5cbiAqICA8L3RyPlxuICogPC90YWJsZT5cbiAqXG4gKiBAdXNhZ2VcbiAqIFRoZSBmb2xsb3dpbmcgY29kZSB3b3VsZCB1c2UgdGhlIGRlZmF1bHQgc3Bpbm5lciBmb3IgdGhlIHBsYXRmb3JtIGl0J3NcbiAqIHJ1bm5pbmcgZnJvbS4gSWYgaXQncyBuZWl0aGVyIGlPUyBvciBBbmRyb2lkLCBpdCdsbCBkZWZhdWx0IHRvIHVzZSBgaW9zYC5cbiAqXG4gKiBgYGBodG1sXG4gKiA8aW9uLXNwaW5uZXI+PC9pb24tc3Bpbm5lcj5cbiAqIGBgYFxuICpcbiAqIEJ5IHNldHRpbmcgdGhlIGBuYW1lYCBwcm9wZXJ0eSwgeW91IGNhbiBzcGVjaWZ5IHdoaWNoIHByZWRlZmluZWQgc3Bpbm5lciB0b1xuICogdXNlLCBubyBtYXR0ZXIgd2hhdCB0aGUgcGxhdGZvcm0gaXMuXG4gKlxuICogYGBgaHRtbFxuICogPGlvbi1zcGlubmVyIG5hbWU9XCJidWJibGVzXCI+PC9pb24tc3Bpbm5lcj5cbiAqIGBgYFxuICpcbiAqICMjIFN0eWxpbmcgU1ZHIHdpdGggQ1NTXG4gKiBPbmUgY29vbCB0aGluZyBhYm91dCBTVkcgaXMgaXRzIGFiaWxpdHkgdG8gYmUgc3R5bGVkIHdpdGggQ1NTISBPbmUgdGhpbmcgdG8gbm90ZVxuICogaXMgdGhhdCBzb21lIG9mIHRoZSBDU1MgcHJvcGVydGllcyBvbiBhbiBTVkcgZWxlbWVudCBoYXZlIGRpZmZlcmVudCBuYW1lcy4gRm9yXG4gKiBleGFtcGxlLCBTVkcgdXNlcyB0aGUgdGVybSBgc3Ryb2tlYCBpbnN0ZWFkIG9mIGBib3JkZXJgLCBhbmQgYGZpbGxgIGluc3RlYWRcbiAqIG9mIGBiYWNrZ3JvdW5kLWNvbG9yYC5cbiAqXG4gKiBgYGBjc3NcbiAqIGlvbi1zcGlubmVyICoge1xuICogICB3aWR0aDogMjhweDtcbiAqICAgaGVpZ2h0OiAyOHB4O1xuICogICBzdHJva2U6ICM0NDQ7XG4gKiAgIGZpbGw6ICMyMjI7XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3Bpbm5lciBleHRlbmRzIElvbiB7XG4gICAgX2M6IGFueVtdO1xuICAgIF9sOiBhbnlbXTtcbiAgICBfbmFtZTogc3RyaW5nO1xuICAgIF9kdXI6IG51bWJlcjtcbiAgICBfaW5pdDogYm9vbGVhbjtcbiAgICBfcGF1c2VkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBpbnB1dCB7c3RyaW5nfSBTVkcgc3Bpbm5lciBuYW1lLlxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge3N0cmluZ30gSG93IGxvbmcgaXQgdGFrZXMgaXQgdG8gZG8gb25lIGxvb3AuXG4gICAgICovXG4gICAgZHVyYXRpb246IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge2Jvb2xlYW59IElmIHRydWUsIHBhdXNlIHRoZSBhbmltYXRpb24uXG4gICAgICovXG4gICAgcGF1c2VkOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBsb2FkKCk6IHZvaWQ7XG4gICAgX2xvYWRFbGUoc3Bpbm5lcjogYW55LCBpbmRleDogbnVtYmVyLCB0b3RhbDogbnVtYmVyKTogYW55O1xufVxuIl19