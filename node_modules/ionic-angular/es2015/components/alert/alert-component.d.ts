import { ElementRef, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { BlockerDelegate, GestureController } from '../../gestures/gesture-controller';
import { NavParams } from '../../navigation/nav-params';
import { Platform } from '../../platform/platform';
import { ViewController } from '../../navigation/view-controller';
import { AlertOptions } from './alert-options';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class AlertCmp {
    _viewCtrl: ViewController;
    _elementRef: ElementRef;
    private _renderer;
    private _plt;
    activeId: string;
    descId: string;
    d: AlertOptions;
    enabled: boolean;
    hdrId: string;
    id: number;
    inputType: string;
    lastClick: number;
    msgId: string;
    subHdrId: string;
    mode: string;
    keyboardResizes: boolean;
    gestureBlocker: BlockerDelegate;
    constructor(_viewCtrl: ViewController, _elementRef: ElementRef, config: Config, gestureCtrl: GestureController, params: NavParams, _renderer: Renderer, _plt: Platform);
    ionViewDidLoad(): void;
    ionViewWillEnter(): void;
    ionViewDidLeave(): void;
    ionViewDidEnter(): void;
    keyUp(ev: KeyboardEvent): void;
    btnClick(button: any): void;
    rbClick(checkedInput: any): void;
    cbClick(checkedInput: any): void;
    bdClick(): void;
    dismiss(role: string): Promise<any>;
    getValues(): any;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AlertCmp, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AlertCmp, "ion-alert", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQtY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFsZXJ0LWNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnJztcbmltcG9ydCB7IEJsb2NrZXJEZWxlZ2F0ZSwgR2VzdHVyZUNvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy9nZXN0dXJlLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgTmF2UGFyYW1zIH0gZnJvbSAnLi4vLi4vbmF2aWdhdGlvbi9uYXYtcGFyYW1zJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vcGxhdGZvcm0nO1xuaW1wb3J0IHsgVmlld0NvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi9uYXZpZ2F0aW9uL3ZpZXctY29udHJvbGxlcic7XG5pbXBvcnQgeyBBbGVydE9wdGlvbnMgfSBmcm9tICcuL2FsZXJ0LW9wdGlvbnMnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFsZXJ0Q21wIHtcbiAgICBfdmlld0N0cmw6IFZpZXdDb250cm9sbGVyO1xuICAgIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgX3JlbmRlcmVyO1xuICAgIHByaXZhdGUgX3BsdDtcbiAgICBhY3RpdmVJZDogc3RyaW5nO1xuICAgIGRlc2NJZDogc3RyaW5nO1xuICAgIGQ6IEFsZXJ0T3B0aW9ucztcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIGhkcklkOiBzdHJpbmc7XG4gICAgaWQ6IG51bWJlcjtcbiAgICBpbnB1dFR5cGU6IHN0cmluZztcbiAgICBsYXN0Q2xpY2s6IG51bWJlcjtcbiAgICBtc2dJZDogc3RyaW5nO1xuICAgIHN1YkhkcklkOiBzdHJpbmc7XG4gICAgbW9kZTogc3RyaW5nO1xuICAgIGtleWJvYXJkUmVzaXplczogYm9vbGVhbjtcbiAgICBnZXN0dXJlQmxvY2tlcjogQmxvY2tlckRlbGVnYXRlO1xuICAgIGNvbnN0cnVjdG9yKF92aWV3Q3RybDogVmlld0NvbnRyb2xsZXIsIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBjb25maWc6IENvbmZpZywgZ2VzdHVyZUN0cmw6IEdlc3R1cmVDb250cm9sbGVyLCBwYXJhbXM6IE5hdlBhcmFtcywgX3JlbmRlcmVyOiBSZW5kZXJlciwgX3BsdDogUGxhdGZvcm0pO1xuICAgIGlvblZpZXdEaWRMb2FkKCk6IHZvaWQ7XG4gICAgaW9uVmlld1dpbGxFbnRlcigpOiB2b2lkO1xuICAgIGlvblZpZXdEaWRMZWF2ZSgpOiB2b2lkO1xuICAgIGlvblZpZXdEaWRFbnRlcigpOiB2b2lkO1xuICAgIGtleVVwKGV2OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBidG5DbGljayhidXR0b246IGFueSk6IHZvaWQ7XG4gICAgcmJDbGljayhjaGVja2VkSW5wdXQ6IGFueSk6IHZvaWQ7XG4gICAgY2JDbGljayhjaGVja2VkSW5wdXQ6IGFueSk6IHZvaWQ7XG4gICAgYmRDbGljaygpOiB2b2lkO1xuICAgIGRpc21pc3Mocm9sZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIGdldFZhbHVlcygpOiBhbnk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==