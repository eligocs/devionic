import { ElementRef, EventEmitter } from '@angular/core';
import { Platform } from '../../platform/platform';
import { Side } from '../../util/util';
import { ItemSliding } from './item-sliding';
/**
 * @name ItemOptions
 * @description
 * The option buttons for an `ion-item-sliding`. These buttons can be placed either on the left or right side.
 * You can combine the `(ionSwipe)` event plus the `expandable` directive to create a full swipe action for the item.
 *
 * @usage
 *
 * ```html
 * <ion-item-sliding>
 *   <ion-item>
 *     Item 1
 *   </ion-item>
 *   <ion-item-options side="right" (ionSwipe)="saveItem(item)">
 *     <button ion-button expandable (click)="saveItem(item)">
 *       <ion-icon name="star"></ion-icon>
 *     </button>
 *   </ion-item-options>
 * </ion-item-sliding>
 *```
 */
import * as ɵngcc0 from '@angular/core';
export declare class ItemOptions {
    private _elementRef;
    private _plt;
    /**
     * @input {string} The side the option button should be on. Defaults to `"right"`.
     * If you have multiple `ion-item-options`, a side must be provided for each.
     */
    side: Side;
    /**
     * @output {event} Emitted when the item has been fully swiped.
     */
    ionSwipe: EventEmitter<ItemSliding>;
    constructor(_elementRef: ElementRef, _plt: Platform);
    /**
     * @hidden
     */
    isRightSide(): boolean;
    /**
     * @hidden
     */
    width(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ItemOptions, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ItemOptions, "ion-item-options", never, { "side": "side"; }, { "ionSwipe": "ionSwipe"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1vcHRpb25zLmQudHMiLCJzb3VyY2VzIjpbIml0ZW0tb3B0aW9ucy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vcGxhdGZvcm0nO1xuaW1wb3J0IHsgU2lkZSB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBJdGVtU2xpZGluZyB9IGZyb20gJy4vaXRlbS1zbGlkaW5nJztcbi8qKlxuICogQG5hbWUgSXRlbU9wdGlvbnNcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG9wdGlvbiBidXR0b25zIGZvciBhbiBgaW9uLWl0ZW0tc2xpZGluZ2AuIFRoZXNlIGJ1dHRvbnMgY2FuIGJlIHBsYWNlZCBlaXRoZXIgb24gdGhlIGxlZnQgb3IgcmlnaHQgc2lkZS5cbiAqIFlvdSBjYW4gY29tYmluZSB0aGUgYChpb25Td2lwZSlgIGV2ZW50IHBsdXMgdGhlIGBleHBhbmRhYmxlYCBkaXJlY3RpdmUgdG8gY3JlYXRlIGEgZnVsbCBzd2lwZSBhY3Rpb24gZm9yIHRoZSBpdGVtLlxuICpcbiAqIEB1c2FnZVxuICpcbiAqIGBgYGh0bWxcbiAqIDxpb24taXRlbS1zbGlkaW5nPlxuICogICA8aW9uLWl0ZW0+XG4gKiAgICAgSXRlbSAxXG4gKiAgIDwvaW9uLWl0ZW0+XG4gKiAgIDxpb24taXRlbS1vcHRpb25zIHNpZGU9XCJyaWdodFwiIChpb25Td2lwZSk9XCJzYXZlSXRlbShpdGVtKVwiPlxuICogICAgIDxidXR0b24gaW9uLWJ1dHRvbiBleHBhbmRhYmxlIChjbGljayk9XCJzYXZlSXRlbShpdGVtKVwiPlxuICogICAgICAgPGlvbi1pY29uIG5hbWU9XCJzdGFyXCI+PC9pb24taWNvbj5cbiAqICAgICA8L2J1dHRvbj5cbiAqICAgPC9pb24taXRlbS1vcHRpb25zPlxuICogPC9pb24taXRlbS1zbGlkaW5nPlxuICpgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSXRlbU9wdGlvbnMge1xuICAgIHByaXZhdGUgX2VsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBfcGx0O1xuICAgIC8qKlxuICAgICAqIEBpbnB1dCB7c3RyaW5nfSBUaGUgc2lkZSB0aGUgb3B0aW9uIGJ1dHRvbiBzaG91bGQgYmUgb24uIERlZmF1bHRzIHRvIGBcInJpZ2h0XCJgLlxuICAgICAqIElmIHlvdSBoYXZlIG11bHRpcGxlIGBpb24taXRlbS1vcHRpb25zYCwgYSBzaWRlIG11c3QgYmUgcHJvdmlkZWQgZm9yIGVhY2guXG4gICAgICovXG4gICAgc2lkZTogU2lkZTtcbiAgICAvKipcbiAgICAgKiBAb3V0cHV0IHtldmVudH0gRW1pdHRlZCB3aGVuIHRoZSBpdGVtIGhhcyBiZWVuIGZ1bGx5IHN3aXBlZC5cbiAgICAgKi9cbiAgICBpb25Td2lwZTogRXZlbnRFbWl0dGVyPEl0ZW1TbGlkaW5nPjtcbiAgICBjb25zdHJ1Y3RvcihfZWxlbWVudFJlZjogRWxlbWVudFJlZiwgX3BsdDogUGxhdGZvcm0pO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpc1JpZ2h0U2lkZSgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB3aWR0aCgpOiBhbnk7XG59XG4iXX0=