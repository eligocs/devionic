import { ElementRef, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { Ion } from '../ion';
/**
  * @name Typography
  * @module ionic
  * @description
  *
  * The Typography component is a simple component that can be used to style the text color of any element.
  * The `ion-text` attribute should be added to the element in order to pass a color from the Sass `$colors`
  * map and change the text color of that element.
  *
  * @usage
  *
  * ```html
  * <h1 ion-text color="secondary">H1: The quick brown fox jumps over the lazy dog</h1>
  *
  * <h2 ion-text color="primary">H2: The quick brown fox jumps over the lazy dog</h2>
  *
  * <h3 ion-text color="light">H3: The quick brown fox jumps over the lazy dog</h3>
  *
  * <h4 ion-text color="danger">H4: The quick brown fox jumps over the lazy dog</h4>
  *
  * <h5 ion-text color="dark">H5: The quick brown fox jumps over the lazy dog</h5>
  *
  * <h6 ion-text [color]="dynamicColor">H6: The quick brown fox jumps over the lazy dog</h6>
  *
  * <p>
  *   I saw a werewolf with a Chinese menu in his hand.
  *   Walking through the <sub ion-text color="danger">streets</sub> of Soho in the rain.
  *   He <i ion-text color="primary">was</i> looking for a place called Lee Ho Fook's.
  *   Gonna get a <a ion-text color="secondary">big dish of beef chow mein.</a>
  * </p>
  *
  * <p>
  *   He's the hairy-handed gent who ran amuck in Kent.
  *   Lately he's <sup ion-text color="primary">been</sup> overheard in Mayfair.
  *   Better stay away from him.
  *   He'll rip your lungs out, Jim.
  *   I'd like to meet his tailor.
  * </p>
  * ```
  *
 */
import * as ɵngcc0 from '@angular/core';
export declare class Typography extends Ion {
    constructor(config: Config, elementRef: ElementRef, renderer: Renderer);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Typography, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Typography, "[ion-text]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwb2dyYXBoeS5kLnRzIiwic291cmNlcyI6WyJ0eXBvZ3JhcGh5LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnJztcbmltcG9ydCB7IElvbiB9IGZyb20gJy4uL2lvbic7XG4vKipcbiAgKiBAbmFtZSBUeXBvZ3JhcGh5XG4gICogQG1vZHVsZSBpb25pY1xuICAqIEBkZXNjcmlwdGlvblxuICAqXG4gICogVGhlIFR5cG9ncmFwaHkgY29tcG9uZW50IGlzIGEgc2ltcGxlIGNvbXBvbmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0IGNvbG9yIG9mIGFueSBlbGVtZW50LlxuICAqIFRoZSBgaW9uLXRleHRgIGF0dHJpYnV0ZSBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQgaW4gb3JkZXIgdG8gcGFzcyBhIGNvbG9yIGZyb20gdGhlIFNhc3MgYCRjb2xvcnNgXG4gICogbWFwIGFuZCBjaGFuZ2UgdGhlIHRleHQgY29sb3Igb2YgdGhhdCBlbGVtZW50LlxuICAqXG4gICogQHVzYWdlXG4gICpcbiAgKiBgYGBodG1sXG4gICogPGgxIGlvbi10ZXh0IGNvbG9yPVwic2Vjb25kYXJ5XCI+SDE6IFRoZSBxdWljayBicm93biBmb3gganVtcHMgb3ZlciB0aGUgbGF6eSBkb2c8L2gxPlxuICAqXG4gICogPGgyIGlvbi10ZXh0IGNvbG9yPVwicHJpbWFyeVwiPkgyOiBUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nPC9oMj5cbiAgKlxuICAqIDxoMyBpb24tdGV4dCBjb2xvcj1cImxpZ2h0XCI+SDM6IFRoZSBxdWljayBicm93biBmb3gganVtcHMgb3ZlciB0aGUgbGF6eSBkb2c8L2gzPlxuICAqXG4gICogPGg0IGlvbi10ZXh0IGNvbG9yPVwiZGFuZ2VyXCI+SDQ6IFRoZSBxdWljayBicm93biBmb3gganVtcHMgb3ZlciB0aGUgbGF6eSBkb2c8L2g0PlxuICAqXG4gICogPGg1IGlvbi10ZXh0IGNvbG9yPVwiZGFya1wiPkg1OiBUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nPC9oNT5cbiAgKlxuICAqIDxoNiBpb24tdGV4dCBbY29sb3JdPVwiZHluYW1pY0NvbG9yXCI+SDY6IFRoZSBxdWljayBicm93biBmb3gganVtcHMgb3ZlciB0aGUgbGF6eSBkb2c8L2g2PlxuICAqXG4gICogPHA+XG4gICogICBJIHNhdyBhIHdlcmV3b2xmIHdpdGggYSBDaGluZXNlIG1lbnUgaW4gaGlzIGhhbmQuXG4gICogICBXYWxraW5nIHRocm91Z2ggdGhlIDxzdWIgaW9uLXRleHQgY29sb3I9XCJkYW5nZXJcIj5zdHJlZXRzPC9zdWI+IG9mIFNvaG8gaW4gdGhlIHJhaW4uXG4gICogICBIZSA8aSBpb24tdGV4dCBjb2xvcj1cInByaW1hcnlcIj53YXM8L2k+IGxvb2tpbmcgZm9yIGEgcGxhY2UgY2FsbGVkIExlZSBIbyBGb29rJ3MuXG4gICogICBHb25uYSBnZXQgYSA8YSBpb24tdGV4dCBjb2xvcj1cInNlY29uZGFyeVwiPmJpZyBkaXNoIG9mIGJlZWYgY2hvdyBtZWluLjwvYT5cbiAgKiA8L3A+XG4gICpcbiAgKiA8cD5cbiAgKiAgIEhlJ3MgdGhlIGhhaXJ5LWhhbmRlZCBnZW50IHdobyByYW4gYW11Y2sgaW4gS2VudC5cbiAgKiAgIExhdGVseSBoZSdzIDxzdXAgaW9uLXRleHQgY29sb3I9XCJwcmltYXJ5XCI+YmVlbjwvc3VwPiBvdmVyaGVhcmQgaW4gTWF5ZmFpci5cbiAgKiAgIEJldHRlciBzdGF5IGF3YXkgZnJvbSBoaW0uXG4gICogICBIZSdsbCByaXAgeW91ciBsdW5ncyBvdXQsIEppbS5cbiAgKiAgIEknZCBsaWtlIHRvIG1lZXQgaGlzIHRhaWxvci5cbiAgKiA8L3A+XG4gICogYGBgXG4gICpcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVHlwb2dyYXBoeSBleHRlbmRzIElvbiB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBDb25maWcsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcik7XG59XG4iXX0=