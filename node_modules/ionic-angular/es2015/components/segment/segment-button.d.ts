import { EventEmitter } from '@angular/core';
/**
 * @name SegmentButton
 * @description
 * The child buttons of the `ion-segment` component. Each `ion-segment-button` must have a value.
 *
 * @usage
 *
 * ```html
 * <ion-content>
 *   <!-- Segment buttons with icons -->
 *   <ion-segment [(ngModel)]="icons" color="secondary">
 *     <ion-segment-button value="camera">
 *       <ion-icon name="camera"></ion-icon>
 *     </ion-segment-button>
 *     <ion-segment-button value="bookmark">
 *       <ion-icon name="bookmark"></ion-icon>
 *     </ion-segment-button>
 *   </ion-segment>
 *
 *   <!-- Segment buttons with text -->
 *   <ion-segment [(ngModel)]="relationship" color="primary">
 *     <ion-segment-button value="friends" (ionSelect)="selectedFriends()">
 *       Friends
 *     </ion-segment-button>
 *     <ion-segment-button value="enemies" (ionSelect)="selectedEnemies()">
 *       Enemies
 *     </ion-segment-button>
 *   </ion-segment>
 * </ion-content>
 * ```
 *
 *
 * @demo /docs/demos/src/segment/
 * @see {@link /docs/components#segment Segment Component Docs}
 * @see {@link /docs/api/components/segment/Segment/ Segment API Docs}
 */
import * as ɵngcc0 from '@angular/core';
export declare class SegmentButton {
    isActive: boolean;
    _disabled: boolean;
    /**
     * @input {string} the value of the segment button. Required.
     */
    value: string;
    /**
     * @output {SegmentButton} Emitted when a segment button has been clicked.
     */
    ionSelect: EventEmitter<SegmentButton>;
    /**
     * @input {boolean} If true, the user cannot interact with this element.
     */
    disabled: boolean;
    constructor();
    /**
     * @hidden
     * On click of a SegmentButton
     */
    onClick(): void;
    /**
     * @hidden
     */
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SegmentButton, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SegmentButton, "ion-segment-button", never, { "disabled": "disabled"; "value": "value"; }, { "ionSelect": "ionSelect"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VnbWVudC1idXR0b24uZC50cyIsInNvdXJjZXMiOlsic2VnbWVudC1idXR0b24uZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogQG5hbWUgU2VnbWVudEJ1dHRvblxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgY2hpbGQgYnV0dG9ucyBvZiB0aGUgYGlvbi1zZWdtZW50YCBjb21wb25lbnQuIEVhY2ggYGlvbi1zZWdtZW50LWJ1dHRvbmAgbXVzdCBoYXZlIGEgdmFsdWUuXG4gKlxuICogQHVzYWdlXG4gKlxuICogYGBgaHRtbFxuICogPGlvbi1jb250ZW50PlxuICogICA8IS0tIFNlZ21lbnQgYnV0dG9ucyB3aXRoIGljb25zIC0tPlxuICogICA8aW9uLXNlZ21lbnQgWyhuZ01vZGVsKV09XCJpY29uc1wiIGNvbG9yPVwic2Vjb25kYXJ5XCI+XG4gKiAgICAgPGlvbi1zZWdtZW50LWJ1dHRvbiB2YWx1ZT1cImNhbWVyYVwiPlxuICogICAgICAgPGlvbi1pY29uIG5hbWU9XCJjYW1lcmFcIj48L2lvbi1pY29uPlxuICogICAgIDwvaW9uLXNlZ21lbnQtYnV0dG9uPlxuICogICAgIDxpb24tc2VnbWVudC1idXR0b24gdmFsdWU9XCJib29rbWFya1wiPlxuICogICAgICAgPGlvbi1pY29uIG5hbWU9XCJib29rbWFya1wiPjwvaW9uLWljb24+XG4gKiAgICAgPC9pb24tc2VnbWVudC1idXR0b24+XG4gKiAgIDwvaW9uLXNlZ21lbnQ+XG4gKlxuICogICA8IS0tIFNlZ21lbnQgYnV0dG9ucyB3aXRoIHRleHQgLS0+XG4gKiAgIDxpb24tc2VnbWVudCBbKG5nTW9kZWwpXT1cInJlbGF0aW9uc2hpcFwiIGNvbG9yPVwicHJpbWFyeVwiPlxuICogICAgIDxpb24tc2VnbWVudC1idXR0b24gdmFsdWU9XCJmcmllbmRzXCIgKGlvblNlbGVjdCk9XCJzZWxlY3RlZEZyaWVuZHMoKVwiPlxuICogICAgICAgRnJpZW5kc1xuICogICAgIDwvaW9uLXNlZ21lbnQtYnV0dG9uPlxuICogICAgIDxpb24tc2VnbWVudC1idXR0b24gdmFsdWU9XCJlbmVtaWVzXCIgKGlvblNlbGVjdCk9XCJzZWxlY3RlZEVuZW1pZXMoKVwiPlxuICogICAgICAgRW5lbWllc1xuICogICAgIDwvaW9uLXNlZ21lbnQtYnV0dG9uPlxuICogICA8L2lvbi1zZWdtZW50PlxuICogPC9pb24tY29udGVudD5cbiAqIGBgYFxuICpcbiAqXG4gKiBAZGVtbyAvZG9jcy9kZW1vcy9zcmMvc2VnbWVudC9cbiAqIEBzZWUge0BsaW5rIC9kb2NzL2NvbXBvbmVudHMjc2VnbWVudCBTZWdtZW50IENvbXBvbmVudCBEb2NzfVxuICogQHNlZSB7QGxpbmsgL2RvY3MvYXBpL2NvbXBvbmVudHMvc2VnbWVudC9TZWdtZW50LyBTZWdtZW50IEFQSSBEb2NzfVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTZWdtZW50QnV0dG9uIHtcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICBfZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtzdHJpbmd9IHRoZSB2YWx1ZSBvZiB0aGUgc2VnbWVudCBidXR0b24uIFJlcXVpcmVkLlxuICAgICAqL1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG91dHB1dCB7U2VnbWVudEJ1dHRvbn0gRW1pdHRlZCB3aGVuIGEgc2VnbWVudCBidXR0b24gaGFzIGJlZW4gY2xpY2tlZC5cbiAgICAgKi9cbiAgICBpb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxTZWdtZW50QnV0dG9uPjtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge2Jvb2xlYW59IElmIHRydWUsIHRoZSB1c2VyIGNhbm5vdCBpbnRlcmFjdCB3aXRoIHRoaXMgZWxlbWVudC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcigpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBPbiBjbGljayBvZiBhIFNlZ21lbnRCdXR0b25cbiAgICAgKi9cbiAgICBvbkNsaWNrKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG59XG4iXX0=