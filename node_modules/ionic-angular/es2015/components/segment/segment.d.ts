import { AfterContentInit, ElementRef, QueryList, Renderer } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Config } from '../../config/config';
import { BaseInput } from '../../util/base-input';
import { SegmentButton } from './segment-button';
/**
 * @name Segment
 * @description
 * A Segment is a group of buttons, sometimes known as Segmented Controls, that allow the user to interact with a compact group of a number of controls.
 * Segments provide functionality similar to tabs, selecting one will unselect all others. You should use a tab bar instead of a segmented control when you want to let the user move back and forth between distinct pages in your app.
 * You could use Angular's `ngModel` or `FormBuilder` API. For an overview on how `FormBuilder` works, checkout [Angular Forms](http://learnangular2.com/forms/), or [Angular FormBuilder](https://angular.io/docs/ts/latest/api/forms/index/FormBuilder-class.html)
 *
 *
 * ```html
 * <!-- Segment in a header -->
 * <ion-header>
 *   <ion-toolbar>
 *     <ion-segment [(ngModel)]="icons" color="secondary">
 *       <ion-segment-button value="camera">
 *         <ion-icon name="camera"></ion-icon>
 *       </ion-segment-button>
 *       <ion-segment-button value="bookmark">
 *         <ion-icon name="bookmark"></ion-icon>
 *       </ion-segment-button>
 *     </ion-segment>
 *   </ion-toolbar>
 * </ion-header>
 *
 * <ion-content>
 *   <!-- Segment in content with material design mode on all devices -->
 *   <ion-segment [(ngModel)]="relationship" color="primary" mode="md" (ionChange)="segmentChanged($event)">
 *     <ion-segment-button value="friends">
 *       Friends
 *     </ion-segment-button>
 *     <ion-segment-button value="enemies">
 *       Enemies
 *     </ion-segment-button>
 *   </ion-segment>
 *
 *   <!-- Segment in a form -->
 *   <form [formGroup]="myForm">
 *     <ion-segment formControlName="mapStyle" color="danger">
 *       <ion-segment-button value="standard">
 *         Standard
 *       </ion-segment-button>
 *       <ion-segment-button value="hybrid">
 *         Hybrid
 *       </ion-segment-button>
 *       <ion-segment-button value="sat">
 *         Satellite
 *       </ion-segment-button>
 *     </ion-segment>
 *   </form>
 * </ion-content>
 * ```
 *
 *
 * @demo /docs/demos/src/segment/
 * @see {@link /docs/components#segment Segment Component Docs}
 * @see [Angular Forms](http://learnangular2.com/forms/)
 */
import * as ɵngcc0 from '@angular/core';
export declare class Segment extends BaseInput<string> implements AfterContentInit {
    /**
     * @hidden
     */
    _buttons: QueryList<SegmentButton>;
    constructor(config: Config, elementRef: ElementRef, renderer: Renderer, ngControl: NgControl);
    /**
     * @hidden
     */
    ngAfterContentInit(): void;
    /**
     * @hidden
     * Write a new value to the element.
     */
    _inputUpdated(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Segment, [null, null, null, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Segment, "ion-segment", never, {}, {}, ["_buttons"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VnbWVudC5kLnRzIiwic291cmNlcyI6WyJzZWdtZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEVsZW1lbnRSZWYsIFF1ZXJ5TGlzdCwgUmVuZGVyZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgQmFzZUlucHV0IH0gZnJvbSAnLi4vLi4vdXRpbC9iYXNlLWlucHV0JztcbmltcG9ydCB7IFNlZ21lbnRCdXR0b24gfSBmcm9tICcuL3NlZ21lbnQtYnV0dG9uJztcbi8qKlxuICogQG5hbWUgU2VnbWVudFxuICogQGRlc2NyaXB0aW9uXG4gKiBBIFNlZ21lbnQgaXMgYSBncm91cCBvZiBidXR0b25zLCBzb21ldGltZXMga25vd24gYXMgU2VnbWVudGVkIENvbnRyb2xzLCB0aGF0IGFsbG93IHRoZSB1c2VyIHRvIGludGVyYWN0IHdpdGggYSBjb21wYWN0IGdyb3VwIG9mIGEgbnVtYmVyIG9mIGNvbnRyb2xzLlxuICogU2VnbWVudHMgcHJvdmlkZSBmdW5jdGlvbmFsaXR5IHNpbWlsYXIgdG8gdGFicywgc2VsZWN0aW5nIG9uZSB3aWxsIHVuc2VsZWN0IGFsbCBvdGhlcnMuIFlvdSBzaG91bGQgdXNlIGEgdGFiIGJhciBpbnN0ZWFkIG9mIGEgc2VnbWVudGVkIGNvbnRyb2wgd2hlbiB5b3Ugd2FudCB0byBsZXQgdGhlIHVzZXIgbW92ZSBiYWNrIGFuZCBmb3J0aCBiZXR3ZWVuIGRpc3RpbmN0IHBhZ2VzIGluIHlvdXIgYXBwLlxuICogWW91IGNvdWxkIHVzZSBBbmd1bGFyJ3MgYG5nTW9kZWxgIG9yIGBGb3JtQnVpbGRlcmAgQVBJLiBGb3IgYW4gb3ZlcnZpZXcgb24gaG93IGBGb3JtQnVpbGRlcmAgd29ya3MsIGNoZWNrb3V0IFtBbmd1bGFyIEZvcm1zXShodHRwOi8vbGVhcm5hbmd1bGFyMi5jb20vZm9ybXMvKSwgb3IgW0FuZ3VsYXIgRm9ybUJ1aWxkZXJdKGh0dHBzOi8vYW5ndWxhci5pby9kb2NzL3RzL2xhdGVzdC9hcGkvZm9ybXMvaW5kZXgvRm9ybUJ1aWxkZXItY2xhc3MuaHRtbClcbiAqXG4gKlxuICogYGBgaHRtbFxuICogPCEtLSBTZWdtZW50IGluIGEgaGVhZGVyIC0tPlxuICogPGlvbi1oZWFkZXI+XG4gKiAgIDxpb24tdG9vbGJhcj5cbiAqICAgICA8aW9uLXNlZ21lbnQgWyhuZ01vZGVsKV09XCJpY29uc1wiIGNvbG9yPVwic2Vjb25kYXJ5XCI+XG4gKiAgICAgICA8aW9uLXNlZ21lbnQtYnV0dG9uIHZhbHVlPVwiY2FtZXJhXCI+XG4gKiAgICAgICAgIDxpb24taWNvbiBuYW1lPVwiY2FtZXJhXCI+PC9pb24taWNvbj5cbiAqICAgICAgIDwvaW9uLXNlZ21lbnQtYnV0dG9uPlxuICogICAgICAgPGlvbi1zZWdtZW50LWJ1dHRvbiB2YWx1ZT1cImJvb2ttYXJrXCI+XG4gKiAgICAgICAgIDxpb24taWNvbiBuYW1lPVwiYm9va21hcmtcIj48L2lvbi1pY29uPlxuICogICAgICAgPC9pb24tc2VnbWVudC1idXR0b24+XG4gKiAgICAgPC9pb24tc2VnbWVudD5cbiAqICAgPC9pb24tdG9vbGJhcj5cbiAqIDwvaW9uLWhlYWRlcj5cbiAqXG4gKiA8aW9uLWNvbnRlbnQ+XG4gKiAgIDwhLS0gU2VnbWVudCBpbiBjb250ZW50IHdpdGggbWF0ZXJpYWwgZGVzaWduIG1vZGUgb24gYWxsIGRldmljZXMgLS0+XG4gKiAgIDxpb24tc2VnbWVudCBbKG5nTW9kZWwpXT1cInJlbGF0aW9uc2hpcFwiIGNvbG9yPVwicHJpbWFyeVwiIG1vZGU9XCJtZFwiIChpb25DaGFuZ2UpPVwic2VnbWVudENoYW5nZWQoJGV2ZW50KVwiPlxuICogICAgIDxpb24tc2VnbWVudC1idXR0b24gdmFsdWU9XCJmcmllbmRzXCI+XG4gKiAgICAgICBGcmllbmRzXG4gKiAgICAgPC9pb24tc2VnbWVudC1idXR0b24+XG4gKiAgICAgPGlvbi1zZWdtZW50LWJ1dHRvbiB2YWx1ZT1cImVuZW1pZXNcIj5cbiAqICAgICAgIEVuZW1pZXNcbiAqICAgICA8L2lvbi1zZWdtZW50LWJ1dHRvbj5cbiAqICAgPC9pb24tc2VnbWVudD5cbiAqXG4gKiAgIDwhLS0gU2VnbWVudCBpbiBhIGZvcm0gLS0+XG4gKiAgIDxmb3JtIFtmb3JtR3JvdXBdPVwibXlGb3JtXCI+XG4gKiAgICAgPGlvbi1zZWdtZW50IGZvcm1Db250cm9sTmFtZT1cIm1hcFN0eWxlXCIgY29sb3I9XCJkYW5nZXJcIj5cbiAqICAgICAgIDxpb24tc2VnbWVudC1idXR0b24gdmFsdWU9XCJzdGFuZGFyZFwiPlxuICogICAgICAgICBTdGFuZGFyZFxuICogICAgICAgPC9pb24tc2VnbWVudC1idXR0b24+XG4gKiAgICAgICA8aW9uLXNlZ21lbnQtYnV0dG9uIHZhbHVlPVwiaHlicmlkXCI+XG4gKiAgICAgICAgIEh5YnJpZFxuICogICAgICAgPC9pb24tc2VnbWVudC1idXR0b24+XG4gKiAgICAgICA8aW9uLXNlZ21lbnQtYnV0dG9uIHZhbHVlPVwic2F0XCI+XG4gKiAgICAgICAgIFNhdGVsbGl0ZVxuICogICAgICAgPC9pb24tc2VnbWVudC1idXR0b24+XG4gKiAgICAgPC9pb24tc2VnbWVudD5cbiAqICAgPC9mb3JtPlxuICogPC9pb24tY29udGVudD5cbiAqIGBgYFxuICpcbiAqXG4gKiBAZGVtbyAvZG9jcy9kZW1vcy9zcmMvc2VnbWVudC9cbiAqIEBzZWUge0BsaW5rIC9kb2NzL2NvbXBvbmVudHMjc2VnbWVudCBTZWdtZW50IENvbXBvbmVudCBEb2NzfVxuICogQHNlZSBbQW5ndWxhciBGb3Jtc10oaHR0cDovL2xlYXJuYW5ndWxhcjIuY29tL2Zvcm1zLylcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2VnbWVudCBleHRlbmRzIEJhc2VJbnB1dDxzdHJpbmc+IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9idXR0b25zOiBRdWVyeUxpc3Q8U2VnbWVudEJ1dHRvbj47XG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBDb25maWcsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlciwgbmdDb250cm9sOiBOZ0NvbnRyb2wpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogV3JpdGUgYSBuZXcgdmFsdWUgdG8gdGhlIGVsZW1lbnQuXG4gICAgICovXG4gICAgX2lucHV0VXBkYXRlZCgpOiB2b2lkO1xufVxuIl19