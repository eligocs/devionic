import { ElementRef, EventEmitter, Renderer } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Config } from '../../config/config';
import { BaseInput } from '../../util/base-input';
import { TimeoutDebouncer } from '../../util/debouncer';
import { Platform } from '../../platform/platform';
/**
 * @name Searchbar
 * @module ionic
 * @description
 * Manages the display of a Searchbar which can be used to search or filter items.
 *
 * @usage
 * ```html
 * <ion-searchbar
 *   [(ngModel)]="myInput"
 *   [showCancelButton]="shouldShowCancel"
 *   (ionInput)="onInput($event)"
 *   (ionCancel)="onCancel($event)">
 * </ion-searchbar>
 * ```
 *
 * @demo /docs/demos/src/searchbar/
 * @see {@link /docs/components#searchbar Searchbar Component Docs}
 */
import * as ɵngcc0 from '@angular/core';
export declare class Searchbar extends BaseInput<string> {
    private _plt;
    _shouldBlur: boolean;
    _shouldAlignLeft: boolean;
    _isCancelVisible: boolean;
    _spellcheck: boolean;
    _autocomplete: string;
    _autocorrect: string;
    _isActive: boolean;
    _showCancelButton: boolean;
    _animated: boolean;
    _inputDebouncer: TimeoutDebouncer;
    /**
     * @input {string} Set the the cancel button text. Default: `"Cancel"`.
     */
    cancelButtonText: string;
    /**
     * @input {boolean} If true, show the cancel button. Default `false`.
     */
    showCancelButton: boolean;
    /**
     * @input {number} How long, in milliseconds, to wait to trigger the `ionInput` event after each keystroke. Default `250`.
     */
    debounce: number;
    /**
     * @input {string} Set the input's placeholder. Default `"Search"`.
     */
    placeholder: string;
    /**
     * @input {string} Set the input's autocomplete property. Values: `"on"`, `"off"`. Default `"off"`.
     */
    autocomplete: string;
    /**
     * @input {string} Set the input's autocorrect property. Values: `"on"`, `"off"`. Default `"off"`.
     */
    autocorrect: string;
    /**
     * @input {string|boolean} Set the input's spellcheck property. Values: `true`, `false`. Default `false`.
     */
    spellcheck: string | boolean;
    /**
     * @input {string} Set the type of the input. Values: `"text"`, `"password"`, `"email"`, `"number"`, `"search"`, `"tel"`, `"url"`. Default `"search"`.
     */
    type: string;
    /**
     * @input {boolean} If true, enable searchbar animation. Default `false`.
     */
    animated: boolean;
    /**
     * @output {event} Emitted when the Searchbar input has changed, including when it's cleared.
     */
    ionInput: EventEmitter<UIEvent>;
    /**
     * @output {event} Emitted when the cancel button is clicked.
     */
    ionCancel: EventEmitter<UIEvent>;
    /**
     * @output {event} Emitted when the clear input button is clicked.
     */
    ionClear: EventEmitter<UIEvent>;
    constructor(config: Config, _plt: Platform, elementRef: ElementRef, renderer: Renderer, ngControl: NgControl);
    _searchbarInput: ElementRef;
    _searchbarIcon: ElementRef;
    _cancelButton: ElementRef;
    /**
     * @hidden
     * On Initialization check for attributes
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    _inputUpdated(): void;
    /**
     * @hidden
     * Positions the input search icon, placeholder, and the cancel button
     * based on the input value and if it is focused. (ios only)
     */
    positionElements(): void;
    positionPlaceholder(): void;
    /**
     * @hidden
     * Show the iOS Cancel button on focus, hide it offscreen otherwise
     */
    positionCancelButton(): void;
    /**
     * @hidden
     * Update the Searchbar input value when the input changes
     */
    inputChanged(ev: any): void;
    /**
     * @hidden
     * Sets the Searchbar to focused and active on input focus.
     */
    inputFocused(): void;
    /**
     * @hidden
     * Sets the Searchbar to not focused and checks if it should align left
     * based on whether there is a value in the searchbar or not.
     */
    inputBlurred(): void;
    /**
     * @hidden
     * Clears the input field and triggers the control change.
     */
    clearInput(ev: UIEvent): void;
    /**
     * @hidden
     * Clears the input field and tells the input to blur since
     * the clearInput function doesn't want the input to blur
     * then calls the custom cancel function if the user passed one in.
     */
    cancelSearchbar(ev: UIEvent): void;
    setFocus(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Searchbar, [null, null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Searchbar, "ion-searchbar", never, { "cancelButtonText": "cancelButtonText"; "placeholder": "placeholder"; "type": "type"; "debounce": "debounce"; "showCancelButton": "showCancelButton"; "autocomplete": "autocomplete"; "autocorrect": "autocorrect"; "spellcheck": "spellcheck"; "animated": "animated"; }, { "ionInput": "ionInput"; "ionCancel": "ionCancel"; "ionClear": "ionClear"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoYmFyLmQudHMiLCJzb3VyY2VzIjpbInNlYXJjaGJhci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFJlbmRlcmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnJztcbmltcG9ydCB7IEJhc2VJbnB1dCB9IGZyb20gJy4uLy4uL3V0aWwvYmFzZS1pbnB1dCc7XG5pbXBvcnQgeyBUaW1lb3V0RGVib3VuY2VyIH0gZnJvbSAnLi4vLi4vdXRpbC9kZWJvdW5jZXInO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICcuLi8uLi9wbGF0Zm9ybS9wbGF0Zm9ybSc7XG4vKipcbiAqIEBuYW1lIFNlYXJjaGJhclxuICogQG1vZHVsZSBpb25pY1xuICogQGRlc2NyaXB0aW9uXG4gKiBNYW5hZ2VzIHRoZSBkaXNwbGF5IG9mIGEgU2VhcmNoYmFyIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHNlYXJjaCBvciBmaWx0ZXIgaXRlbXMuXG4gKlxuICogQHVzYWdlXG4gKiBgYGBodG1sXG4gKiA8aW9uLXNlYXJjaGJhclxuICogICBbKG5nTW9kZWwpXT1cIm15SW5wdXRcIlxuICogICBbc2hvd0NhbmNlbEJ1dHRvbl09XCJzaG91bGRTaG93Q2FuY2VsXCJcbiAqICAgKGlvbklucHV0KT1cIm9uSW5wdXQoJGV2ZW50KVwiXG4gKiAgIChpb25DYW5jZWwpPVwib25DYW5jZWwoJGV2ZW50KVwiPlxuICogPC9pb24tc2VhcmNoYmFyPlxuICogYGBgXG4gKlxuICogQGRlbW8gL2RvY3MvZGVtb3Mvc3JjL3NlYXJjaGJhci9cbiAqIEBzZWUge0BsaW5rIC9kb2NzL2NvbXBvbmVudHMjc2VhcmNoYmFyIFNlYXJjaGJhciBDb21wb25lbnQgRG9jc31cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2VhcmNoYmFyIGV4dGVuZHMgQmFzZUlucHV0PHN0cmluZz4ge1xuICAgIHByaXZhdGUgX3BsdDtcbiAgICBfc2hvdWxkQmx1cjogYm9vbGVhbjtcbiAgICBfc2hvdWxkQWxpZ25MZWZ0OiBib29sZWFuO1xuICAgIF9pc0NhbmNlbFZpc2libGU6IGJvb2xlYW47XG4gICAgX3NwZWxsY2hlY2s6IGJvb2xlYW47XG4gICAgX2F1dG9jb21wbGV0ZTogc3RyaW5nO1xuICAgIF9hdXRvY29ycmVjdDogc3RyaW5nO1xuICAgIF9pc0FjdGl2ZTogYm9vbGVhbjtcbiAgICBfc2hvd0NhbmNlbEJ1dHRvbjogYm9vbGVhbjtcbiAgICBfYW5pbWF0ZWQ6IGJvb2xlYW47XG4gICAgX2lucHV0RGVib3VuY2VyOiBUaW1lb3V0RGVib3VuY2VyO1xuICAgIC8qKlxuICAgICAqIEBpbnB1dCB7c3RyaW5nfSBTZXQgdGhlIHRoZSBjYW5jZWwgYnV0dG9uIHRleHQuIERlZmF1bHQ6IGBcIkNhbmNlbFwiYC5cbiAgICAgKi9cbiAgICBjYW5jZWxCdXR0b25UZXh0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtib29sZWFufSBJZiB0cnVlLCBzaG93IHRoZSBjYW5jZWwgYnV0dG9uLiBEZWZhdWx0IGBmYWxzZWAuXG4gICAgICovXG4gICAgc2hvd0NhbmNlbEJ1dHRvbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge251bWJlcn0gSG93IGxvbmcsIGluIG1pbGxpc2Vjb25kcywgdG8gd2FpdCB0byB0cmlnZ2VyIHRoZSBgaW9uSW5wdXRgIGV2ZW50IGFmdGVyIGVhY2gga2V5c3Ryb2tlLiBEZWZhdWx0IGAyNTBgLlxuICAgICAqL1xuICAgIGRlYm91bmNlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtzdHJpbmd9IFNldCB0aGUgaW5wdXQncyBwbGFjZWhvbGRlci4gRGVmYXVsdCBgXCJTZWFyY2hcImAuXG4gICAgICovXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge3N0cmluZ30gU2V0IHRoZSBpbnB1dCdzIGF1dG9jb21wbGV0ZSBwcm9wZXJ0eS4gVmFsdWVzOiBgXCJvblwiYCwgYFwib2ZmXCJgLiBEZWZhdWx0IGBcIm9mZlwiYC5cbiAgICAgKi9cbiAgICBhdXRvY29tcGxldGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge3N0cmluZ30gU2V0IHRoZSBpbnB1dCdzIGF1dG9jb3JyZWN0IHByb3BlcnR5LiBWYWx1ZXM6IGBcIm9uXCJgLCBgXCJvZmZcImAuIERlZmF1bHQgYFwib2ZmXCJgLlxuICAgICAqL1xuICAgIGF1dG9jb3JyZWN0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtzdHJpbmd8Ym9vbGVhbn0gU2V0IHRoZSBpbnB1dCdzIHNwZWxsY2hlY2sgcHJvcGVydHkuIFZhbHVlczogYHRydWVgLCBgZmFsc2VgLiBEZWZhdWx0IGBmYWxzZWAuXG4gICAgICovXG4gICAgc3BlbGxjaGVjazogc3RyaW5nIHwgYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge3N0cmluZ30gU2V0IHRoZSB0eXBlIG9mIHRoZSBpbnB1dC4gVmFsdWVzOiBgXCJ0ZXh0XCJgLCBgXCJwYXNzd29yZFwiYCwgYFwiZW1haWxcImAsIGBcIm51bWJlclwiYCwgYFwic2VhcmNoXCJgLCBgXCJ0ZWxcImAsIGBcInVybFwiYC4gRGVmYXVsdCBgXCJzZWFyY2hcImAuXG4gICAgICovXG4gICAgdHlwZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBpbnB1dCB7Ym9vbGVhbn0gSWYgdHJ1ZSwgZW5hYmxlIHNlYXJjaGJhciBhbmltYXRpb24uIERlZmF1bHQgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBhbmltYXRlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3V0cHV0IHtldmVudH0gRW1pdHRlZCB3aGVuIHRoZSBTZWFyY2hiYXIgaW5wdXQgaGFzIGNoYW5nZWQsIGluY2x1ZGluZyB3aGVuIGl0J3MgY2xlYXJlZC5cbiAgICAgKi9cbiAgICBpb25JbnB1dDogRXZlbnRFbWl0dGVyPFVJRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEBvdXRwdXQge2V2ZW50fSBFbWl0dGVkIHdoZW4gdGhlIGNhbmNlbCBidXR0b24gaXMgY2xpY2tlZC5cbiAgICAgKi9cbiAgICBpb25DYW5jZWw6IEV2ZW50RW1pdHRlcjxVSUV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBAb3V0cHV0IHtldmVudH0gRW1pdHRlZCB3aGVuIHRoZSBjbGVhciBpbnB1dCBidXR0b24gaXMgY2xpY2tlZC5cbiAgICAgKi9cbiAgICBpb25DbGVhcjogRXZlbnRFbWl0dGVyPFVJRXZlbnQ+O1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnLCBfcGx0OiBQbGF0Zm9ybSwgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBuZ0NvbnRyb2w6IE5nQ29udHJvbCk7XG4gICAgX3NlYXJjaGJhcklucHV0OiBFbGVtZW50UmVmO1xuICAgIF9zZWFyY2hiYXJJY29uOiBFbGVtZW50UmVmO1xuICAgIF9jYW5jZWxCdXR0b246IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIE9uIEluaXRpYWxpemF0aW9uIGNoZWNrIGZvciBhdHRyaWJ1dGVzXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2lucHV0VXBkYXRlZCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBQb3NpdGlvbnMgdGhlIGlucHV0IHNlYXJjaCBpY29uLCBwbGFjZWhvbGRlciwgYW5kIHRoZSBjYW5jZWwgYnV0dG9uXG4gICAgICogYmFzZWQgb24gdGhlIGlucHV0IHZhbHVlIGFuZCBpZiBpdCBpcyBmb2N1c2VkLiAoaW9zIG9ubHkpXG4gICAgICovXG4gICAgcG9zaXRpb25FbGVtZW50cygpOiB2b2lkO1xuICAgIHBvc2l0aW9uUGxhY2Vob2xkZXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogU2hvdyB0aGUgaU9TIENhbmNlbCBidXR0b24gb24gZm9jdXMsIGhpZGUgaXQgb2Zmc2NyZWVuIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHBvc2l0aW9uQ2FuY2VsQnV0dG9uKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFVwZGF0ZSB0aGUgU2VhcmNoYmFyIGlucHV0IHZhbHVlIHdoZW4gdGhlIGlucHV0IGNoYW5nZXNcbiAgICAgKi9cbiAgICBpbnB1dENoYW5nZWQoZXY6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFNldHMgdGhlIFNlYXJjaGJhciB0byBmb2N1c2VkIGFuZCBhY3RpdmUgb24gaW5wdXQgZm9jdXMuXG4gICAgICovXG4gICAgaW5wdXRGb2N1c2VkKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFNldHMgdGhlIFNlYXJjaGJhciB0byBub3QgZm9jdXNlZCBhbmQgY2hlY2tzIGlmIGl0IHNob3VsZCBhbGlnbiBsZWZ0XG4gICAgICogYmFzZWQgb24gd2hldGhlciB0aGVyZSBpcyBhIHZhbHVlIGluIHRoZSBzZWFyY2hiYXIgb3Igbm90LlxuICAgICAqL1xuICAgIGlucHV0Qmx1cnJlZCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBDbGVhcnMgdGhlIGlucHV0IGZpZWxkIGFuZCB0cmlnZ2VycyB0aGUgY29udHJvbCBjaGFuZ2UuXG4gICAgICovXG4gICAgY2xlYXJJbnB1dChldjogVUlFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIENsZWFycyB0aGUgaW5wdXQgZmllbGQgYW5kIHRlbGxzIHRoZSBpbnB1dCB0byBibHVyIHNpbmNlXG4gICAgICogdGhlIGNsZWFySW5wdXQgZnVuY3Rpb24gZG9lc24ndCB3YW50IHRoZSBpbnB1dCB0byBibHVyXG4gICAgICogdGhlbiBjYWxscyB0aGUgY3VzdG9tIGNhbmNlbCBmdW5jdGlvbiBpZiB0aGUgdXNlciBwYXNzZWQgb25lIGluLlxuICAgICAqL1xuICAgIGNhbmNlbFNlYXJjaGJhcihldjogVUlFdmVudCk6IHZvaWQ7XG4gICAgc2V0Rm9jdXMoKTogdm9pZDtcbn1cbiJdfQ==