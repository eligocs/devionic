import { App } from '../app/app';
import { Config } from '../../config/config';
import { Toast } from './toast';
import { ToastOptions } from './toast-options';
/**
 * @name ToastController
 * @description
 * A Toast is a subtle notification commonly used in modern applications.
 * It can be used to provide feedback about an operation or to
 * display a system message. The toast appears on top of the app's content,
 * and can be dismissed by the app to resume user interaction with
 * the app.
 *
 * ### Creating
 * All of the toast options should be passed in the first argument of
 * the create method: `create(opts)`. The message to display should be
 * passed in the `message` property. The `showCloseButton` option can be set to
 * true in order to display a close button on the toast. See the [create](#create)
 * method below for all available options.
 *
 * ### Positioning
 * Toasts can be positioned at the top, bottom or middle of the
 * view port. The position can be passed to the `Toast.create(opts)` method.
 * The position option is a string, and the values accepted are `top`, `bottom` and `middle`.
 * If the position is not specified, the toast will be displayed at the bottom of the view port.
 *
 * ### Dismissing
 * The toast can be dismissed automatically after a specific amount of time
 * by passing the number of milliseconds to display it in the `duration` of
 * the toast options. If `showCloseButton` is set to true, then the close button
 * will dismiss the toast. To dismiss the toast after creation, call the `dismiss()`
 * method on the Toast instance. The `onDidDismiss` function can be called to perform an action after the toast
 * is dismissed.
 *
 * @usage
 * ```ts
 * import { ToastController } from 'ionic-angular';
 *
 * constructor(public toastCtrl: ToastController) { }
 *
 * presentToast() {
 *   const toast = this.toastCtrl.create({
 *     message: 'User was added successfully',
 *     duration: 3000,
 *     position: 'top'
 *   });
 *
 *   toast.onDidDismiss(() => {
 *     console.log('Dismissed toast');
 *   });
 *
 *   toast.present();
 * }
 * ```
 * @advanced
 * | Property              | Type      | Default         | Description                                                                                                   |
 * |-----------------------|-----------|-----------------|---------------------------------------------------------------------------------------------------------------|
 * | message               | `string`  | -               | The message for the toast. Long strings will wrap and the toast container will expand.                        |
 * | duration              | `number`  | -               | How many milliseconds to wait before hiding the toast. By default, it will show until `dismiss()` is called.  |
 * | position              | `string`  | "bottom"        | The position of the toast on the screen. Accepted values: "top", "middle", "bottom".                          |
 * | cssClass              | `string`  | -               | Additional classes for custom styles, separated by spaces.                                                    |
 * | showCloseButton       | `boolean` | false           | Whether or not to show a button to close the toast.                                                           |
 * | closeButtonText       | `string`  | "Close"         | Text to display in the close button.                                                                          |
 * | dismissOnPageChange   | `boolean` | false           | Whether to dismiss the toast when navigating to a new page.                                                   |
 *
 * @demo /docs/demos/src/toast/
 */
import * as ɵngcc0 from '@angular/core';
export declare class ToastController {
    private _app;
    config: Config;
    constructor(_app: App, config: Config);
    /**
     * Create a new toast component. See options below
     * @param {ToastOptions} opts Toast options. See the below table for available options.
     */
    create(opts?: ToastOptions): Toast;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastController, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ToastController>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtY29udHJvbGxlci5kLnRzIiwic291cmNlcyI6WyJ0b2FzdC1jb250cm9sbGVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCB9IGZyb20gJy4uL2FwcC9hcHAnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbmZpZyc7XG5pbXBvcnQgeyBUb2FzdCB9IGZyb20gJy4vdG9hc3QnO1xuaW1wb3J0IHsgVG9hc3RPcHRpb25zIH0gZnJvbSAnLi90b2FzdC1vcHRpb25zJztcbi8qKlxuICogQG5hbWUgVG9hc3RDb250cm9sbGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgVG9hc3QgaXMgYSBzdWJ0bGUgbm90aWZpY2F0aW9uIGNvbW1vbmx5IHVzZWQgaW4gbW9kZXJuIGFwcGxpY2F0aW9ucy5cbiAqIEl0IGNhbiBiZSB1c2VkIHRvIHByb3ZpZGUgZmVlZGJhY2sgYWJvdXQgYW4gb3BlcmF0aW9uIG9yIHRvXG4gKiBkaXNwbGF5IGEgc3lzdGVtIG1lc3NhZ2UuIFRoZSB0b2FzdCBhcHBlYXJzIG9uIHRvcCBvZiB0aGUgYXBwJ3MgY29udGVudCxcbiAqIGFuZCBjYW4gYmUgZGlzbWlzc2VkIGJ5IHRoZSBhcHAgdG8gcmVzdW1lIHVzZXIgaW50ZXJhY3Rpb24gd2l0aFxuICogdGhlIGFwcC5cbiAqXG4gKiAjIyMgQ3JlYXRpbmdcbiAqIEFsbCBvZiB0aGUgdG9hc3Qgb3B0aW9ucyBzaG91bGQgYmUgcGFzc2VkIGluIHRoZSBmaXJzdCBhcmd1bWVudCBvZlxuICogdGhlIGNyZWF0ZSBtZXRob2Q6IGBjcmVhdGUob3B0cylgLiBUaGUgbWVzc2FnZSB0byBkaXNwbGF5IHNob3VsZCBiZVxuICogcGFzc2VkIGluIHRoZSBgbWVzc2FnZWAgcHJvcGVydHkuIFRoZSBgc2hvd0Nsb3NlQnV0dG9uYCBvcHRpb24gY2FuIGJlIHNldCB0b1xuICogdHJ1ZSBpbiBvcmRlciB0byBkaXNwbGF5IGEgY2xvc2UgYnV0dG9uIG9uIHRoZSB0b2FzdC4gU2VlIHRoZSBbY3JlYXRlXSgjY3JlYXRlKVxuICogbWV0aG9kIGJlbG93IGZvciBhbGwgYXZhaWxhYmxlIG9wdGlvbnMuXG4gKlxuICogIyMjIFBvc2l0aW9uaW5nXG4gKiBUb2FzdHMgY2FuIGJlIHBvc2l0aW9uZWQgYXQgdGhlIHRvcCwgYm90dG9tIG9yIG1pZGRsZSBvZiB0aGVcbiAqIHZpZXcgcG9ydC4gVGhlIHBvc2l0aW9uIGNhbiBiZSBwYXNzZWQgdG8gdGhlIGBUb2FzdC5jcmVhdGUob3B0cylgIG1ldGhvZC5cbiAqIFRoZSBwb3NpdGlvbiBvcHRpb24gaXMgYSBzdHJpbmcsIGFuZCB0aGUgdmFsdWVzIGFjY2VwdGVkIGFyZSBgdG9wYCwgYGJvdHRvbWAgYW5kIGBtaWRkbGVgLlxuICogSWYgdGhlIHBvc2l0aW9uIGlzIG5vdCBzcGVjaWZpZWQsIHRoZSB0b2FzdCB3aWxsIGJlIGRpc3BsYXllZCBhdCB0aGUgYm90dG9tIG9mIHRoZSB2aWV3IHBvcnQuXG4gKlxuICogIyMjIERpc21pc3NpbmdcbiAqIFRoZSB0b2FzdCBjYW4gYmUgZGlzbWlzc2VkIGF1dG9tYXRpY2FsbHkgYWZ0ZXIgYSBzcGVjaWZpYyBhbW91bnQgb2YgdGltZVxuICogYnkgcGFzc2luZyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkaXNwbGF5IGl0IGluIHRoZSBgZHVyYXRpb25gIG9mXG4gKiB0aGUgdG9hc3Qgb3B0aW9ucy4gSWYgYHNob3dDbG9zZUJ1dHRvbmAgaXMgc2V0IHRvIHRydWUsIHRoZW4gdGhlIGNsb3NlIGJ1dHRvblxuICogd2lsbCBkaXNtaXNzIHRoZSB0b2FzdC4gVG8gZGlzbWlzcyB0aGUgdG9hc3QgYWZ0ZXIgY3JlYXRpb24sIGNhbGwgdGhlIGBkaXNtaXNzKClgXG4gKiBtZXRob2Qgb24gdGhlIFRvYXN0IGluc3RhbmNlLiBUaGUgYG9uRGlkRGlzbWlzc2AgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCB0byBwZXJmb3JtIGFuIGFjdGlvbiBhZnRlciB0aGUgdG9hc3RcbiAqIGlzIGRpc21pc3NlZC5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBUb2FzdENvbnRyb2xsZXIgfSBmcm9tICdpb25pYy1hbmd1bGFyJztcbiAqXG4gKiBjb25zdHJ1Y3RvcihwdWJsaWMgdG9hc3RDdHJsOiBUb2FzdENvbnRyb2xsZXIpIHsgfVxuICpcbiAqIHByZXNlbnRUb2FzdCgpIHtcbiAqICAgY29uc3QgdG9hc3QgPSB0aGlzLnRvYXN0Q3RybC5jcmVhdGUoe1xuICogICAgIG1lc3NhZ2U6ICdVc2VyIHdhcyBhZGRlZCBzdWNjZXNzZnVsbHknLFxuICogICAgIGR1cmF0aW9uOiAzMDAwLFxuICogICAgIHBvc2l0aW9uOiAndG9wJ1xuICogICB9KTtcbiAqXG4gKiAgIHRvYXN0Lm9uRGlkRGlzbWlzcygoKSA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coJ0Rpc21pc3NlZCB0b2FzdCcpO1xuICogICB9KTtcbiAqXG4gKiAgIHRvYXN0LnByZXNlbnQoKTtcbiAqIH1cbiAqIGBgYFxuICogQGFkdmFuY2VkXG4gKiB8IFByb3BlcnR5ICAgICAgICAgICAgICB8IFR5cGUgICAgICB8IERlZmF1bHQgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgbWVzc2FnZSAgICAgICAgICAgICAgIHwgYHN0cmluZ2AgIHwgLSAgICAgICAgICAgICAgIHwgVGhlIG1lc3NhZ2UgZm9yIHRoZSB0b2FzdC4gTG9uZyBzdHJpbmdzIHdpbGwgd3JhcCBhbmQgdGhlIHRvYXN0IGNvbnRhaW5lciB3aWxsIGV4cGFuZC4gICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGR1cmF0aW9uICAgICAgICAgICAgICB8IGBudW1iZXJgICB8IC0gICAgICAgICAgICAgICB8IEhvdyBtYW55IG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBoaWRpbmcgdGhlIHRvYXN0LiBCeSBkZWZhdWx0LCBpdCB3aWxsIHNob3cgdW50aWwgYGRpc21pc3MoKWAgaXMgY2FsbGVkLiAgfFxuICogfCBwb3NpdGlvbiAgICAgICAgICAgICAgfCBgc3RyaW5nYCAgfCBcImJvdHRvbVwiICAgICAgICB8IFRoZSBwb3NpdGlvbiBvZiB0aGUgdG9hc3Qgb24gdGhlIHNjcmVlbi4gQWNjZXB0ZWQgdmFsdWVzOiBcInRvcFwiLCBcIm1pZGRsZVwiLCBcImJvdHRvbVwiLiAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBjc3NDbGFzcyAgICAgICAgICAgICAgfCBgc3RyaW5nYCAgfCAtICAgICAgICAgICAgICAgfCBBZGRpdGlvbmFsIGNsYXNzZXMgZm9yIGN1c3RvbSBzdHlsZXMsIHNlcGFyYXRlZCBieSBzcGFjZXMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgc2hvd0Nsb3NlQnV0dG9uICAgICAgIHwgYGJvb2xlYW5gIHwgZmFsc2UgICAgICAgICAgIHwgV2hldGhlciBvciBub3QgdG8gc2hvdyBhIGJ1dHRvbiB0byBjbG9zZSB0aGUgdG9hc3QuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGNsb3NlQnV0dG9uVGV4dCAgICAgICB8IGBzdHJpbmdgICB8IFwiQ2xvc2VcIiAgICAgICAgIHwgVGV4dCB0byBkaXNwbGF5IGluIHRoZSBjbG9zZSBidXR0b24uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGRpc21pc3NPblBhZ2VDaGFuZ2UgICB8IGBib29sZWFuYCB8IGZhbHNlICAgICAgICAgICB8IFdoZXRoZXIgdG8gZGlzbWlzcyB0aGUgdG9hc3Qgd2hlbiBuYXZpZ2F0aW5nIHRvIGEgbmV3IHBhZ2UuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIEBkZW1vIC9kb2NzL2RlbW9zL3NyYy90b2FzdC9cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9hc3RDb250cm9sbGVyIHtcbiAgICBwcml2YXRlIF9hcHA7XG4gICAgY29uZmlnOiBDb25maWc7XG4gICAgY29uc3RydWN0b3IoX2FwcDogQXBwLCBjb25maWc6IENvbmZpZyk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHRvYXN0IGNvbXBvbmVudC4gU2VlIG9wdGlvbnMgYmVsb3dcbiAgICAgKiBAcGFyYW0ge1RvYXN0T3B0aW9uc30gb3B0cyBUb2FzdCBvcHRpb25zLiBTZWUgdGhlIGJlbG93IHRhYmxlIGZvciBhdmFpbGFibGUgb3B0aW9ucy5cbiAgICAgKi9cbiAgICBjcmVhdGUob3B0cz86IFRvYXN0T3B0aW9ucyk6IFRvYXN0O1xufVxuIl19