import { ElementRef, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { DomController } from '../../platform/dom-controller';
import { GestureController } from '../../gestures/gesture-controller';
import { Ion } from '../ion';
import { Platform } from '../../platform/platform';
/**
 * The List is a widely used interface element in almost any mobile app,
 * and can include content ranging from basic text all the way to
 * buttons, toggles, icons, and thumbnails.
 *
 * Both the list, which contains items, and the list items themselves
 * can be any HTML element.
 *
 * Using the List and Item components make it easy to support various
 * interaction modes such as swipe to edit, drag to reorder, and
 * removing items.
 *
 * @demo /docs/demos/src/list/
 * @see {@link /docs/components#lists List Component Docs}
 * @advanced
 *
 * Enable the sliding items.
 *
 * ```ts
 * import { Component, ViewChild } from '@angular/core';
 * import { List } from 'ionic-angular';
 *
 * @Component({...})
 * export class MyClass {
 *   @ViewChild(List) list: List;
 *
 *   constructor() { }
 *
 *   stopSliding() {
 *     this.list.enableSlidingItems(false);
 *   }
 * }
 * ```
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class List extends Ion {
    private _plt;
    private _gestureCtrl;
    private _domCtrl;
    private _enableSliding;
    private _containsSlidingItems;
    private _slidingGesture;
    constructor(config: Config, elementRef: ElementRef, renderer: Renderer, _plt: Platform, _gestureCtrl: GestureController, _domCtrl: DomController);
    /**
     * @input {boolean} If true, the sliding items will be enabled.
     */
    sliding: boolean;
    /**
     * @hidden
     */
    containsSlidingItem(contains: boolean): void;
    private _updateSlidingState();
    /**
     * Close any sliding items that are open.
     */
    closeSlidingItems(): void;
    /**
     * @hidden
     */
    destroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<List, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<List, "ion-list", never, { "sliding": "sliding"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5kLnRzIiwic291cmNlcyI6WyJsaXN0LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBSZW5kZXJlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbmZpZyc7XG5pbXBvcnQgeyBEb21Db250cm9sbGVyIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vZG9tLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgR2VzdHVyZUNvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy9nZXN0dXJlLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgSW9uIH0gZnJvbSAnLi4vaW9uJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vcGxhdGZvcm0nO1xuLyoqXG4gKiBUaGUgTGlzdCBpcyBhIHdpZGVseSB1c2VkIGludGVyZmFjZSBlbGVtZW50IGluIGFsbW9zdCBhbnkgbW9iaWxlIGFwcCxcbiAqIGFuZCBjYW4gaW5jbHVkZSBjb250ZW50IHJhbmdpbmcgZnJvbSBiYXNpYyB0ZXh0IGFsbCB0aGUgd2F5IHRvXG4gKiBidXR0b25zLCB0b2dnbGVzLCBpY29ucywgYW5kIHRodW1ibmFpbHMuXG4gKlxuICogQm90aCB0aGUgbGlzdCwgd2hpY2ggY29udGFpbnMgaXRlbXMsIGFuZCB0aGUgbGlzdCBpdGVtcyB0aGVtc2VsdmVzXG4gKiBjYW4gYmUgYW55IEhUTUwgZWxlbWVudC5cbiAqXG4gKiBVc2luZyB0aGUgTGlzdCBhbmQgSXRlbSBjb21wb25lbnRzIG1ha2UgaXQgZWFzeSB0byBzdXBwb3J0IHZhcmlvdXNcbiAqIGludGVyYWN0aW9uIG1vZGVzIHN1Y2ggYXMgc3dpcGUgdG8gZWRpdCwgZHJhZyB0byByZW9yZGVyLCBhbmRcbiAqIHJlbW92aW5nIGl0ZW1zLlxuICpcbiAqIEBkZW1vIC9kb2NzL2RlbW9zL3NyYy9saXN0L1xuICogQHNlZSB7QGxpbmsgL2RvY3MvY29tcG9uZW50cyNsaXN0cyBMaXN0IENvbXBvbmVudCBEb2NzfVxuICogQGFkdmFuY2VkXG4gKlxuICogRW5hYmxlIHRoZSBzbGlkaW5nIGl0ZW1zLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICogaW1wb3J0IHsgTGlzdCB9IGZyb20gJ2lvbmljLWFuZ3VsYXInO1xuICpcbiAqIEBDb21wb25lbnQoey4uLn0pXG4gKiBleHBvcnQgY2xhc3MgTXlDbGFzcyB7XG4gKiAgIEBWaWV3Q2hpbGQoTGlzdCkgbGlzdDogTGlzdDtcbiAqXG4gKiAgIGNvbnN0cnVjdG9yKCkgeyB9XG4gKlxuICogICBzdG9wU2xpZGluZygpIHtcbiAqICAgICB0aGlzLmxpc3QuZW5hYmxlU2xpZGluZ0l0ZW1zKGZhbHNlKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMaXN0IGV4dGVuZHMgSW9uIHtcbiAgICBwcml2YXRlIF9wbHQ7XG4gICAgcHJpdmF0ZSBfZ2VzdHVyZUN0cmw7XG4gICAgcHJpdmF0ZSBfZG9tQ3RybDtcbiAgICBwcml2YXRlIF9lbmFibGVTbGlkaW5nO1xuICAgIHByaXZhdGUgX2NvbnRhaW5zU2xpZGluZ0l0ZW1zO1xuICAgIHByaXZhdGUgX3NsaWRpbmdHZXN0dXJlO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIF9wbHQ6IFBsYXRmb3JtLCBfZ2VzdHVyZUN0cmw6IEdlc3R1cmVDb250cm9sbGVyLCBfZG9tQ3RybDogRG9tQ29udHJvbGxlcik7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtib29sZWFufSBJZiB0cnVlLCB0aGUgc2xpZGluZyBpdGVtcyB3aWxsIGJlIGVuYWJsZWQuXG4gICAgICovXG4gICAgc2xpZGluZzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY29udGFpbnNTbGlkaW5nSXRlbShjb250YWluczogYm9vbGVhbik6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfdXBkYXRlU2xpZGluZ1N0YXRlKCk7XG4gICAgLyoqXG4gICAgICogQ2xvc2UgYW55IHNsaWRpbmcgaXRlbXMgdGhhdCBhcmUgb3Blbi5cbiAgICAgKi9cbiAgICBjbG9zZVNsaWRpbmdJdGVtcygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=