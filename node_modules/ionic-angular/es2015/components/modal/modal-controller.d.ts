import { App } from '../app/app';
import { Config } from '../../config/config';
import { Modal } from './modal';
import { ModalOptions } from './modal-options';
import { DeepLinker } from '../../navigation/deep-linker';
/**
 * @name ModalController
 * @description
 * A Modal is a content pane that goes over the user's current page.
 * Usually it is used for making a choice or editing an item. A modal uses the
 * `NavController` to
 * {@link /docs/api/components/nav/NavController/#present present}
 * itself in the root nav stack. It is added to the stack similar to how
 * {@link /docs/api/components/nav/NavController/#push NavController.push}
 * works.
 *
 * When a modal (or any other overlay such as an alert or actionsheet) is
 * "presented" to a nav controller, the overlay is added to the app's root nav.
 * After the modal has been presented, from within the component instance, the
 * modal can later be closed or "dismissed" by using the ViewController's
 * `dismiss` method. Additionally, you can dismiss any overlay by using `pop`
 * on the root nav controller. Modals are not reusable. When a modal is dismissed
 * it is destroyed.
 *
 * Data can be passed to a new modal through `Modal.create()` as the second
 * argument. The data can then be accessed from the opened page by injecting
 * `NavParams`. Note that the page, which opened as a modal, has no special
 * "modal" logic within it, but uses `NavParams` no differently than a
 * standard page.
 *
 * @usage
 * ```ts
 * import { ModalController, NavParams } from 'ionic-angular';
 *
 * @Component(...)
 * class HomePage {
 *
 *  constructor(public modalCtrl: ModalController) { }
 *
 *  presentProfileModal() {
 *    const profileModal = this.modalCtrl.create(Profile, { userId: 8675309 });
 *    profileModal.present();
 *  }
 *
 * }
 *
 * @Component(...)
 * class Profile {
 *
 *  constructor(params: NavParams) {
 *    console.log('UserId', params.get('userId'));
 *  }
 *
 * }
 * ```
 *
 * @advanced
 *
 * | Option                | Type       | Description                                                                                                      |
 * |-----------------------|------------|------------------------------------------------------------------------------------------------------------------|
 * | showBackdrop          |`boolean`   | Whether to show the backdrop. Default true.                                                                      |
 * | enableBackdropDismiss |`boolean`   | Whether the popover should be dismissed by tapping the backdrop. Default true.                                   |
 * | cssClass              |`string`    | Additional classes for custom styles, separated by spaces.                                                       |
 *
 * A modal can also emit data, which is useful when it is used to add or edit
 * data. For example, a profile page could slide up in a modal, and on submit,
 * the submit button could pass the updated profile data, then dismiss the
 * modal.
 *
 * ```ts
 * import { Component } from '@angular/core';
 * import { ModalController, ViewController } from 'ionic-angular';
 *
 * @Component(...)
 * class HomePage {
 *
 *   constructor(public modalCtrl: ModalController) {
 *
 *   }
 *
 *   presentContactModal() {
 *     let contactModal = this.modalCtrl.create(ContactUs);
 *     contactModal.present();
 *   }
 *
 *   presentProfileModal() {
 *     let profileModal = this.modalCtrl.create(Profile, { userId: 8675309 });
 *
 *     // fires after dismiss animation finishes
 *     profileModal.onDidDismiss(data => {
 *       console.log(data);
 *     });
 *
 *     // fires before dismiss animation begins
 *     profileModal.onWillDismiss(data => {
 *       console.log(data);
 *     });
 *
 *     profileModal.present();
 *   }
 * }
 *
 * @Component(...)
 * class Profile {
 *
 *   constructor(public viewCtrl: ViewController) {
 *
 *   }
 *
 *   dismiss() {
 *     let data = { 'foo': 'bar' };
 *     this.viewCtrl.dismiss(data);
 *   }
 * }
 * ```
 *
 * A common issue is that a developer may try to implement navigation in a modal, but when you try NavController.push(),
 * you will notice that the status bar on iOS gets cut off. The proper way to implement navigation in a modal is to
 * make the modal component a navigation container, and set the root page to the page you want to show in your modal.
 *
 * ```ts
 * @Component({
 *   template: '<ion-nav [root]="rootPage" [rootParams]="rootParams"></ion-nav>'
 * })
 * export class MyModalWrapper {
 *   rootPage = 'MyModalContentPage'; // This is the page you want your modal to display
 *   rootParams;
 *
 *   constructor(navParams: NavParams, private viewCtrl: ViewController) {
 *       this.rootParams = Object.assign({}, navParams.data, {viewCtrl: viewCtrl});
 *       // This line will send the view controller into your child views, so you can dismiss the modals from there.
 *   }
 * }
 * ```
 * @demo /docs/demos/src/modal/
 * @see {@link /docs/components#modals Modal Component Docs}
 */
import * as ɵngcc0 from '@angular/core';
export declare class ModalController {
    private _app;
    config: Config;
    private deepLinker;
    constructor(_app: App, config: Config, deepLinker: DeepLinker);
    /**
     * Create a modal to display. See below for options.
     *
     * @param {object} component The Modal view
     * @param {object} data Any data to pass to the Modal view
     * @param {object} opts Modal options
     */
    create(component: any, data?: any, opts?: ModalOptions): Modal;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ModalController, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ModalController>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29udHJvbGxlci5kLnRzIiwic291cmNlcyI6WyJtb2RhbC1jb250cm9sbGVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAgfSBmcm9tICcuLi9hcHAvYXBwJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgTW9kYWwgfSBmcm9tICcuL21vZGFsJztcbmltcG9ydCB7IE1vZGFsT3B0aW9ucyB9IGZyb20gJy4vbW9kYWwtb3B0aW9ucyc7XG5pbXBvcnQgeyBEZWVwTGlua2VyIH0gZnJvbSAnLi4vLi4vbmF2aWdhdGlvbi9kZWVwLWxpbmtlcic7XG4vKipcbiAqIEBuYW1lIE1vZGFsQ29udHJvbGxlclxuICogQGRlc2NyaXB0aW9uXG4gKiBBIE1vZGFsIGlzIGEgY29udGVudCBwYW5lIHRoYXQgZ29lcyBvdmVyIHRoZSB1c2VyJ3MgY3VycmVudCBwYWdlLlxuICogVXN1YWxseSBpdCBpcyB1c2VkIGZvciBtYWtpbmcgYSBjaG9pY2Ugb3IgZWRpdGluZyBhbiBpdGVtLiBBIG1vZGFsIHVzZXMgdGhlXG4gKiBgTmF2Q29udHJvbGxlcmAgdG9cbiAqIHtAbGluayAvZG9jcy9hcGkvY29tcG9uZW50cy9uYXYvTmF2Q29udHJvbGxlci8jcHJlc2VudCBwcmVzZW50fVxuICogaXRzZWxmIGluIHRoZSByb290IG5hdiBzdGFjay4gSXQgaXMgYWRkZWQgdG8gdGhlIHN0YWNrIHNpbWlsYXIgdG8gaG93XG4gKiB7QGxpbmsgL2RvY3MvYXBpL2NvbXBvbmVudHMvbmF2L05hdkNvbnRyb2xsZXIvI3B1c2ggTmF2Q29udHJvbGxlci5wdXNofVxuICogd29ya3MuXG4gKlxuICogV2hlbiBhIG1vZGFsIChvciBhbnkgb3RoZXIgb3ZlcmxheSBzdWNoIGFzIGFuIGFsZXJ0IG9yIGFjdGlvbnNoZWV0KSBpc1xuICogXCJwcmVzZW50ZWRcIiB0byBhIG5hdiBjb250cm9sbGVyLCB0aGUgb3ZlcmxheSBpcyBhZGRlZCB0byB0aGUgYXBwJ3Mgcm9vdCBuYXYuXG4gKiBBZnRlciB0aGUgbW9kYWwgaGFzIGJlZW4gcHJlc2VudGVkLCBmcm9tIHdpdGhpbiB0aGUgY29tcG9uZW50IGluc3RhbmNlLCB0aGVcbiAqIG1vZGFsIGNhbiBsYXRlciBiZSBjbG9zZWQgb3IgXCJkaXNtaXNzZWRcIiBieSB1c2luZyB0aGUgVmlld0NvbnRyb2xsZXInc1xuICogYGRpc21pc3NgIG1ldGhvZC4gQWRkaXRpb25hbGx5LCB5b3UgY2FuIGRpc21pc3MgYW55IG92ZXJsYXkgYnkgdXNpbmcgYHBvcGBcbiAqIG9uIHRoZSByb290IG5hdiBjb250cm9sbGVyLiBNb2RhbHMgYXJlIG5vdCByZXVzYWJsZS4gV2hlbiBhIG1vZGFsIGlzIGRpc21pc3NlZFxuICogaXQgaXMgZGVzdHJveWVkLlxuICpcbiAqIERhdGEgY2FuIGJlIHBhc3NlZCB0byBhIG5ldyBtb2RhbCB0aHJvdWdoIGBNb2RhbC5jcmVhdGUoKWAgYXMgdGhlIHNlY29uZFxuICogYXJndW1lbnQuIFRoZSBkYXRhIGNhbiB0aGVuIGJlIGFjY2Vzc2VkIGZyb20gdGhlIG9wZW5lZCBwYWdlIGJ5IGluamVjdGluZ1xuICogYE5hdlBhcmFtc2AuIE5vdGUgdGhhdCB0aGUgcGFnZSwgd2hpY2ggb3BlbmVkIGFzIGEgbW9kYWwsIGhhcyBubyBzcGVjaWFsXG4gKiBcIm1vZGFsXCIgbG9naWMgd2l0aGluIGl0LCBidXQgdXNlcyBgTmF2UGFyYW1zYCBubyBkaWZmZXJlbnRseSB0aGFuIGFcbiAqIHN0YW5kYXJkIHBhZ2UuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgTW9kYWxDb250cm9sbGVyLCBOYXZQYXJhbXMgfSBmcm9tICdpb25pYy1hbmd1bGFyJztcbiAqXG4gKiBAQ29tcG9uZW50KC4uLilcbiAqIGNsYXNzIEhvbWVQYWdlIHtcbiAqXG4gKiAgY29uc3RydWN0b3IocHVibGljIG1vZGFsQ3RybDogTW9kYWxDb250cm9sbGVyKSB7IH1cbiAqXG4gKiAgcHJlc2VudFByb2ZpbGVNb2RhbCgpIHtcbiAqICAgIGNvbnN0IHByb2ZpbGVNb2RhbCA9IHRoaXMubW9kYWxDdHJsLmNyZWF0ZShQcm9maWxlLCB7IHVzZXJJZDogODY3NTMwOSB9KTtcbiAqICAgIHByb2ZpbGVNb2RhbC5wcmVzZW50KCk7XG4gKiAgfVxuICpcbiAqIH1cbiAqXG4gKiBAQ29tcG9uZW50KC4uLilcbiAqIGNsYXNzIFByb2ZpbGUge1xuICpcbiAqICBjb25zdHJ1Y3RvcihwYXJhbXM6IE5hdlBhcmFtcykge1xuICogICAgY29uc29sZS5sb2coJ1VzZXJJZCcsIHBhcmFtcy5nZXQoJ3VzZXJJZCcpKTtcbiAqICB9XG4gKlxuICogfVxuICogYGBgXG4gKlxuICogQGFkdmFuY2VkXG4gKlxuICogfCBPcHRpb24gICAgICAgICAgICAgICAgfCBUeXBlICAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgc2hvd0JhY2tkcm9wICAgICAgICAgIHxgYm9vbGVhbmAgICB8IFdoZXRoZXIgdG8gc2hvdyB0aGUgYmFja2Ryb3AuIERlZmF1bHQgdHJ1ZS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBlbmFibGVCYWNrZHJvcERpc21pc3MgfGBib29sZWFuYCAgIHwgV2hldGhlciB0aGUgcG9wb3ZlciBzaG91bGQgYmUgZGlzbWlzc2VkIGJ5IHRhcHBpbmcgdGhlIGJhY2tkcm9wLiBEZWZhdWx0IHRydWUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGNzc0NsYXNzICAgICAgICAgICAgICB8YHN0cmluZ2AgICAgfCBBZGRpdGlvbmFsIGNsYXNzZXMgZm9yIGN1c3RvbSBzdHlsZXMsIHNlcGFyYXRlZCBieSBzcGFjZXMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBBIG1vZGFsIGNhbiBhbHNvIGVtaXQgZGF0YSwgd2hpY2ggaXMgdXNlZnVsIHdoZW4gaXQgaXMgdXNlZCB0byBhZGQgb3IgZWRpdFxuICogZGF0YS4gRm9yIGV4YW1wbGUsIGEgcHJvZmlsZSBwYWdlIGNvdWxkIHNsaWRlIHVwIGluIGEgbW9kYWwsIGFuZCBvbiBzdWJtaXQsXG4gKiB0aGUgc3VibWl0IGJ1dHRvbiBjb3VsZCBwYXNzIHRoZSB1cGRhdGVkIHByb2ZpbGUgZGF0YSwgdGhlbiBkaXNtaXNzIHRoZVxuICogbW9kYWwuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICogaW1wb3J0IHsgTW9kYWxDb250cm9sbGVyLCBWaWV3Q29udHJvbGxlciB9IGZyb20gJ2lvbmljLWFuZ3VsYXInO1xuICpcbiAqIEBDb21wb25lbnQoLi4uKVxuICogY2xhc3MgSG9tZVBhZ2Uge1xuICpcbiAqICAgY29uc3RydWN0b3IocHVibGljIG1vZGFsQ3RybDogTW9kYWxDb250cm9sbGVyKSB7XG4gKlxuICogICB9XG4gKlxuICogICBwcmVzZW50Q29udGFjdE1vZGFsKCkge1xuICogICAgIGxldCBjb250YWN0TW9kYWwgPSB0aGlzLm1vZGFsQ3RybC5jcmVhdGUoQ29udGFjdFVzKTtcbiAqICAgICBjb250YWN0TW9kYWwucHJlc2VudCgpO1xuICogICB9XG4gKlxuICogICBwcmVzZW50UHJvZmlsZU1vZGFsKCkge1xuICogICAgIGxldCBwcm9maWxlTW9kYWwgPSB0aGlzLm1vZGFsQ3RybC5jcmVhdGUoUHJvZmlsZSwgeyB1c2VySWQ6IDg2NzUzMDkgfSk7XG4gKlxuICogICAgIC8vIGZpcmVzIGFmdGVyIGRpc21pc3MgYW5pbWF0aW9uIGZpbmlzaGVzXG4gKiAgICAgcHJvZmlsZU1vZGFsLm9uRGlkRGlzbWlzcyhkYXRhID0+IHtcbiAqICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICogICAgIH0pO1xuICpcbiAqICAgICAvLyBmaXJlcyBiZWZvcmUgZGlzbWlzcyBhbmltYXRpb24gYmVnaW5zXG4gKiAgICAgcHJvZmlsZU1vZGFsLm9uV2lsbERpc21pc3MoZGF0YSA9PiB7XG4gKiAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgcHJvZmlsZU1vZGFsLnByZXNlbnQoKTtcbiAqICAgfVxuICogfVxuICpcbiAqIEBDb21wb25lbnQoLi4uKVxuICogY2xhc3MgUHJvZmlsZSB7XG4gKlxuICogICBjb25zdHJ1Y3RvcihwdWJsaWMgdmlld0N0cmw6IFZpZXdDb250cm9sbGVyKSB7XG4gKlxuICogICB9XG4gKlxuICogICBkaXNtaXNzKCkge1xuICogICAgIGxldCBkYXRhID0geyAnZm9vJzogJ2JhcicgfTtcbiAqICAgICB0aGlzLnZpZXdDdHJsLmRpc21pc3MoZGF0YSk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEEgY29tbW9uIGlzc3VlIGlzIHRoYXQgYSBkZXZlbG9wZXIgbWF5IHRyeSB0byBpbXBsZW1lbnQgbmF2aWdhdGlvbiBpbiBhIG1vZGFsLCBidXQgd2hlbiB5b3UgdHJ5IE5hdkNvbnRyb2xsZXIucHVzaCgpLFxuICogeW91IHdpbGwgbm90aWNlIHRoYXQgdGhlIHN0YXR1cyBiYXIgb24gaU9TIGdldHMgY3V0IG9mZi4gVGhlIHByb3BlciB3YXkgdG8gaW1wbGVtZW50IG5hdmlnYXRpb24gaW4gYSBtb2RhbCBpcyB0b1xuICogbWFrZSB0aGUgbW9kYWwgY29tcG9uZW50IGEgbmF2aWdhdGlvbiBjb250YWluZXIsIGFuZCBzZXQgdGhlIHJvb3QgcGFnZSB0byB0aGUgcGFnZSB5b3Ugd2FudCB0byBzaG93IGluIHlvdXIgbW9kYWwuXG4gKlxuICogYGBgdHNcbiAqIEBDb21wb25lbnQoe1xuICogICB0ZW1wbGF0ZTogJzxpb24tbmF2IFtyb290XT1cInJvb3RQYWdlXCIgW3Jvb3RQYXJhbXNdPVwicm9vdFBhcmFtc1wiPjwvaW9uLW5hdj4nXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIE15TW9kYWxXcmFwcGVyIHtcbiAqICAgcm9vdFBhZ2UgPSAnTXlNb2RhbENvbnRlbnRQYWdlJzsgLy8gVGhpcyBpcyB0aGUgcGFnZSB5b3Ugd2FudCB5b3VyIG1vZGFsIHRvIGRpc3BsYXlcbiAqICAgcm9vdFBhcmFtcztcbiAqXG4gKiAgIGNvbnN0cnVjdG9yKG5hdlBhcmFtczogTmF2UGFyYW1zLCBwcml2YXRlIHZpZXdDdHJsOiBWaWV3Q29udHJvbGxlcikge1xuICogICAgICAgdGhpcy5yb290UGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgbmF2UGFyYW1zLmRhdGEsIHt2aWV3Q3RybDogdmlld0N0cmx9KTtcbiAqICAgICAgIC8vIFRoaXMgbGluZSB3aWxsIHNlbmQgdGhlIHZpZXcgY29udHJvbGxlciBpbnRvIHlvdXIgY2hpbGQgdmlld3MsIHNvIHlvdSBjYW4gZGlzbWlzcyB0aGUgbW9kYWxzIGZyb20gdGhlcmUuXG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICogQGRlbW8gL2RvY3MvZGVtb3Mvc3JjL21vZGFsL1xuICogQHNlZSB7QGxpbmsgL2RvY3MvY29tcG9uZW50cyNtb2RhbHMgTW9kYWwgQ29tcG9uZW50IERvY3N9XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1vZGFsQ29udHJvbGxlciB7XG4gICAgcHJpdmF0ZSBfYXBwO1xuICAgIGNvbmZpZzogQ29uZmlnO1xuICAgIHByaXZhdGUgZGVlcExpbmtlcjtcbiAgICBjb25zdHJ1Y3RvcihfYXBwOiBBcHAsIGNvbmZpZzogQ29uZmlnLCBkZWVwTGlua2VyOiBEZWVwTGlua2VyKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBtb2RhbCB0byBkaXNwbGF5LiBTZWUgYmVsb3cgZm9yIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50IFRoZSBNb2RhbCB2aWV3XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgQW55IGRhdGEgdG8gcGFzcyB0byB0aGUgTW9kYWwgdmlld1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIE1vZGFsIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjcmVhdGUoY29tcG9uZW50OiBhbnksIGRhdGE/OiBhbnksIG9wdHM/OiBNb2RhbE9wdGlvbnMpOiBNb2RhbDtcbn1cbiJdfQ==