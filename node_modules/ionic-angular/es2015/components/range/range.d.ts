import { AfterContentInit, ChangeDetectorRef, ElementRef, OnDestroy, Renderer } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Config } from '../../config/config';
import { DomController } from '../../platform/dom-controller';
import { Form } from '../../util/form';
import { Haptic } from '../../tap-click/haptic';
import { BaseInput } from '../../util/base-input';
import { Item } from '../item/item';
import { Platform } from '../../platform/platform';
import { PointerCoordinates } from '../../util/dom';
import { UIEventManager } from '../../gestures/ui-event-manager';
/**
 * @name Range
 * @description
 * The Range slider lets users select from a range of values by moving
 * the slider knob. It can accept dual knobs, but by default one knob
 * controls the value of the range.
 *
 * ### Range Labels
 * Labels can be placed on either side of the range by adding the
 * `range-left` or `range-right` property to the element. The element
 * doesn't have to be an `ion-label`, it can be added to any element
 * to place it to the left or right of the range. See [usage](#usage)
 * below for examples.
 *
 *
 * ### Minimum and Maximum Values
 * Minimum and maximum values can be passed to the range through the `min`
 * and `max` properties, respectively. By default, the range sets the `min`
 * to `0` and the `max` to `100`.
 *
 *
 * ### Steps and Snaps
 * The `step` property specifies the value granularity of the range's value.
 * It can be useful to set the `step` when the value isn't in increments of `1`.
 * Setting the `step` property will show tick marks on the range for each step.
 * The `snaps` property can be set to automatically move the knob to the nearest
 * tick mark based on the step property value.
 *
 *
 * ### Dual Knobs
 * Setting the `dualKnobs` property to `true` on the range component will
 * enable two knobs on the range. If the range has two knobs, the value will
 * be an object containing two properties: `lower` and `upper`.
 *
 *
 * @usage
 * ```html
 * <ion-list>
 *   <ion-item>
 *     <ion-range [(ngModel)]="singleValue" color="danger" pin="true"></ion-range>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-range min="-200" max="200" [(ngModel)]="saturation" color="secondary">
 *       <ion-label range-left>-200</ion-label>
 *       <ion-label range-right>200</ion-label>
 *     </ion-range>
 *   </ion-item>
 *
 *  <ion-item>
 *    <ion-range min="20" max="80" step="2" [(ngModel)]="brightness">
 *      <ion-icon small range-left name="sunny"></ion-icon>
 *      <ion-icon range-right name="sunny"></ion-icon>
 *    </ion-range>
 *  </ion-item>
 *
 *   <ion-item>
 *     <ion-label>step=100, snaps, {{singleValue4}}</ion-label>
 *     <ion-range min="1000" max="2000" step="100" snaps="true" color="secondary" [(ngModel)]="singleValue4"></ion-range>
 *   </ion-item>
 *
 *   <ion-item>
 *     <ion-label>dual, step=3, snaps, {{dualValue2 | json}}</ion-label>
 *     <ion-range dualKnobs="true" [(ngModel)]="dualValue2" min="21" max="72" step="3" snaps="true"></ion-range>
 *   </ion-item>
 * </ion-list>
 * ```
 *
 *
 * @demo /docs/demos/src/range/
 */
import * as ɵngcc0 from '@angular/core';
export declare class Range extends BaseInput<any> implements AfterContentInit, ControlValueAccessor, OnDestroy {
    private _haptic;
    private _plt;
    private _dom;
    private _cd;
    _dual: boolean;
    _pin: boolean;
    _pressed: boolean;
    _activeB: boolean;
    _rect: ClientRect;
    _ticks: any[];
    _min: number;
    _max: number;
    _step: number;
    _snaps: boolean;
    _valA: number;
    _valB: number;
    _ratioA: number;
    _ratioB: number;
    _pressedA: boolean;
    _pressedB: boolean;
    _barL: string;
    _barR: string;
    _events: UIEventManager;
    _slider: ElementRef;
    /**
     * @input {number} Minimum integer value of the range. Defaults to `0`.
     */
    min: number;
    /**
     * @input {number} Maximum integer value of the range. Defaults to `100`.
     */
    max: number;
    /**
     * @input {number} Specifies the value granularity. Defaults to `1`.
     */
    step: number;
    /**
     * @input {boolean} If true, the knob snaps to tick marks evenly spaced based
     * on the step property value. Defaults to `false`.
     */
    snaps: boolean;
    /**
     * @input {boolean} If true, a pin with integer value is shown when the knob
     * is pressed. Defaults to `false`.
     */
    pin: boolean;
    /**
     * @input {number} How long, in milliseconds, to wait to trigger the
     * `ionChange` event after each change in the range value. Default `0`.
     */
    debounce: number;
    /**
     * @input {boolean} Show two knobs. Defaults to `false`.
     */
    dualKnobs: boolean;
    /**
     * Returns the ratio of the knob's is current location, which is a number
     * between `0` and `1`. If two knobs are used, this property represents
     * the lower value.
     */
    readonly ratio: number;
    /**
     * Returns the ratio of the upper value's is current location, which is
     * a number between `0` and `1`. If there is only one knob, then this
     * will return `null`.
     */
    readonly ratioUpper: number;
    constructor(form: Form, _haptic: Haptic, item: Item, config: Config, _plt: Platform, elementRef: ElementRef, renderer: Renderer, _dom: DomController, _cd: ChangeDetectorRef);
    /**
     * @hidden
     */
    ngAfterContentInit(): void;
    /** @internal */
    _pointerDown(ev: UIEvent): boolean;
    /** @internal */
    _pointerMove(ev: UIEvent): void;
    /** @internal */
    _pointerUp(ev: UIEvent): void;
    /** @internal */
    _update(current: PointerCoordinates, rect: ClientRect, isPressed: boolean): boolean;
    /** @internal */
    _updateBar(): void;
    /** @internal */
    _createTicks(): void;
    /** @internal */
    _updateTicks(): void;
    /** @hidden */
    _keyChg(isIncrease: boolean, isKnobB: boolean): void;
    /** @internal */
    _ratioToValue(ratio: number): number;
    /** @internal */
    _valueToRatio(value: number): number;
    _inputNormalize(val: any): any;
    /**
     * @hidden
     */
    _inputUpdated(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Range, [null, null, { optional: true; }, null, null, null, null, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Range, "ion-range", never, { "min": "min"; "max": "max"; "step": "step"; "snaps": "snaps"; "pin": "pin"; "debounce": "debounce"; "dualKnobs": "dualKnobs"; }, {}, never, ["[range-left]", "[range-right]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UuZC50cyIsInNvdXJjZXMiOlsicmFuZ2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgUmVuZGVyZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbmZpZyc7XG5pbXBvcnQgeyBEb21Db250cm9sbGVyIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vZG9tLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgRm9ybSB9IGZyb20gJy4uLy4uL3V0aWwvZm9ybSc7XG5pbXBvcnQgeyBIYXB0aWMgfSBmcm9tICcuLi8uLi90YXAtY2xpY2svaGFwdGljJztcbmltcG9ydCB7IEJhc2VJbnB1dCB9IGZyb20gJy4uLy4uL3V0aWwvYmFzZS1pbnB1dCc7XG5pbXBvcnQgeyBJdGVtIH0gZnJvbSAnLi4vaXRlbS9pdGVtJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vcGxhdGZvcm0nO1xuaW1wb3J0IHsgUG9pbnRlckNvb3JkaW5hdGVzIH0gZnJvbSAnLi4vLi4vdXRpbC9kb20nO1xuaW1wb3J0IHsgVUlFdmVudE1hbmFnZXIgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy91aS1ldmVudC1tYW5hZ2VyJztcbi8qKlxuICogQG5hbWUgUmFuZ2VcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIFJhbmdlIHNsaWRlciBsZXRzIHVzZXJzIHNlbGVjdCBmcm9tIGEgcmFuZ2Ugb2YgdmFsdWVzIGJ5IG1vdmluZ1xuICogdGhlIHNsaWRlciBrbm9iLiBJdCBjYW4gYWNjZXB0IGR1YWwga25vYnMsIGJ1dCBieSBkZWZhdWx0IG9uZSBrbm9iXG4gKiBjb250cm9scyB0aGUgdmFsdWUgb2YgdGhlIHJhbmdlLlxuICpcbiAqICMjIyBSYW5nZSBMYWJlbHNcbiAqIExhYmVscyBjYW4gYmUgcGxhY2VkIG9uIGVpdGhlciBzaWRlIG9mIHRoZSByYW5nZSBieSBhZGRpbmcgdGhlXG4gKiBgcmFuZ2UtbGVmdGAgb3IgYHJhbmdlLXJpZ2h0YCBwcm9wZXJ0eSB0byB0aGUgZWxlbWVudC4gVGhlIGVsZW1lbnRcbiAqIGRvZXNuJ3QgaGF2ZSB0byBiZSBhbiBgaW9uLWxhYmVsYCwgaXQgY2FuIGJlIGFkZGVkIHRvIGFueSBlbGVtZW50XG4gKiB0byBwbGFjZSBpdCB0byB0aGUgbGVmdCBvciByaWdodCBvZiB0aGUgcmFuZ2UuIFNlZSBbdXNhZ2VdKCN1c2FnZSlcbiAqIGJlbG93IGZvciBleGFtcGxlcy5cbiAqXG4gKlxuICogIyMjIE1pbmltdW0gYW5kIE1heGltdW0gVmFsdWVzXG4gKiBNaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlcyBjYW4gYmUgcGFzc2VkIHRvIHRoZSByYW5nZSB0aHJvdWdoIHRoZSBgbWluYFxuICogYW5kIGBtYXhgIHByb3BlcnRpZXMsIHJlc3BlY3RpdmVseS4gQnkgZGVmYXVsdCwgdGhlIHJhbmdlIHNldHMgdGhlIGBtaW5gXG4gKiB0byBgMGAgYW5kIHRoZSBgbWF4YCB0byBgMTAwYC5cbiAqXG4gKlxuICogIyMjIFN0ZXBzIGFuZCBTbmFwc1xuICogVGhlIGBzdGVwYCBwcm9wZXJ0eSBzcGVjaWZpZXMgdGhlIHZhbHVlIGdyYW51bGFyaXR5IG9mIHRoZSByYW5nZSdzIHZhbHVlLlxuICogSXQgY2FuIGJlIHVzZWZ1bCB0byBzZXQgdGhlIGBzdGVwYCB3aGVuIHRoZSB2YWx1ZSBpc24ndCBpbiBpbmNyZW1lbnRzIG9mIGAxYC5cbiAqIFNldHRpbmcgdGhlIGBzdGVwYCBwcm9wZXJ0eSB3aWxsIHNob3cgdGljayBtYXJrcyBvbiB0aGUgcmFuZ2UgZm9yIGVhY2ggc3RlcC5cbiAqIFRoZSBgc25hcHNgIHByb3BlcnR5IGNhbiBiZSBzZXQgdG8gYXV0b21hdGljYWxseSBtb3ZlIHRoZSBrbm9iIHRvIHRoZSBuZWFyZXN0XG4gKiB0aWNrIG1hcmsgYmFzZWQgb24gdGhlIHN0ZXAgcHJvcGVydHkgdmFsdWUuXG4gKlxuICpcbiAqICMjIyBEdWFsIEtub2JzXG4gKiBTZXR0aW5nIHRoZSBgZHVhbEtub2JzYCBwcm9wZXJ0eSB0byBgdHJ1ZWAgb24gdGhlIHJhbmdlIGNvbXBvbmVudCB3aWxsXG4gKiBlbmFibGUgdHdvIGtub2JzIG9uIHRoZSByYW5nZS4gSWYgdGhlIHJhbmdlIGhhcyB0d28ga25vYnMsIHRoZSB2YWx1ZSB3aWxsXG4gKiBiZSBhbiBvYmplY3QgY29udGFpbmluZyB0d28gcHJvcGVydGllczogYGxvd2VyYCBhbmQgYHVwcGVyYC5cbiAqXG4gKlxuICogQHVzYWdlXG4gKiBgYGBodG1sXG4gKiA8aW9uLWxpc3Q+XG4gKiAgIDxpb24taXRlbT5cbiAqICAgICA8aW9uLXJhbmdlIFsobmdNb2RlbCldPVwic2luZ2xlVmFsdWVcIiBjb2xvcj1cImRhbmdlclwiIHBpbj1cInRydWVcIj48L2lvbi1yYW5nZT5cbiAqICAgPC9pb24taXRlbT5cbiAqXG4gKiAgIDxpb24taXRlbT5cbiAqICAgICA8aW9uLXJhbmdlIG1pbj1cIi0yMDBcIiBtYXg9XCIyMDBcIiBbKG5nTW9kZWwpXT1cInNhdHVyYXRpb25cIiBjb2xvcj1cInNlY29uZGFyeVwiPlxuICogICAgICAgPGlvbi1sYWJlbCByYW5nZS1sZWZ0Pi0yMDA8L2lvbi1sYWJlbD5cbiAqICAgICAgIDxpb24tbGFiZWwgcmFuZ2UtcmlnaHQ+MjAwPC9pb24tbGFiZWw+XG4gKiAgICAgPC9pb24tcmFuZ2U+XG4gKiAgIDwvaW9uLWl0ZW0+XG4gKlxuICogIDxpb24taXRlbT5cbiAqICAgIDxpb24tcmFuZ2UgbWluPVwiMjBcIiBtYXg9XCI4MFwiIHN0ZXA9XCIyXCIgWyhuZ01vZGVsKV09XCJicmlnaHRuZXNzXCI+XG4gKiAgICAgIDxpb24taWNvbiBzbWFsbCByYW5nZS1sZWZ0IG5hbWU9XCJzdW5ueVwiPjwvaW9uLWljb24+XG4gKiAgICAgIDxpb24taWNvbiByYW5nZS1yaWdodCBuYW1lPVwic3VubnlcIj48L2lvbi1pY29uPlxuICogICAgPC9pb24tcmFuZ2U+XG4gKiAgPC9pb24taXRlbT5cbiAqXG4gKiAgIDxpb24taXRlbT5cbiAqICAgICA8aW9uLWxhYmVsPnN0ZXA9MTAwLCBzbmFwcywge3tzaW5nbGVWYWx1ZTR9fTwvaW9uLWxhYmVsPlxuICogICAgIDxpb24tcmFuZ2UgbWluPVwiMTAwMFwiIG1heD1cIjIwMDBcIiBzdGVwPVwiMTAwXCIgc25hcHM9XCJ0cnVlXCIgY29sb3I9XCJzZWNvbmRhcnlcIiBbKG5nTW9kZWwpXT1cInNpbmdsZVZhbHVlNFwiPjwvaW9uLXJhbmdlPlxuICogICA8L2lvbi1pdGVtPlxuICpcbiAqICAgPGlvbi1pdGVtPlxuICogICAgIDxpb24tbGFiZWw+ZHVhbCwgc3RlcD0zLCBzbmFwcywge3tkdWFsVmFsdWUyIHwganNvbn19PC9pb24tbGFiZWw+XG4gKiAgICAgPGlvbi1yYW5nZSBkdWFsS25vYnM9XCJ0cnVlXCIgWyhuZ01vZGVsKV09XCJkdWFsVmFsdWUyXCIgbWluPVwiMjFcIiBtYXg9XCI3MlwiIHN0ZXA9XCIzXCIgc25hcHM9XCJ0cnVlXCI+PC9pb24tcmFuZ2U+XG4gKiAgIDwvaW9uLWl0ZW0+XG4gKiA8L2lvbi1saXN0PlxuICogYGBgXG4gKlxuICpcbiAqIEBkZW1vIC9kb2NzL2RlbW9zL3NyYy9yYW5nZS9cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUmFuZ2UgZXh0ZW5kcyBCYXNlSW5wdXQ8YW55PiBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX2hhcHRpYztcbiAgICBwcml2YXRlIF9wbHQ7XG4gICAgcHJpdmF0ZSBfZG9tO1xuICAgIHByaXZhdGUgX2NkO1xuICAgIF9kdWFsOiBib29sZWFuO1xuICAgIF9waW46IGJvb2xlYW47XG4gICAgX3ByZXNzZWQ6IGJvb2xlYW47XG4gICAgX2FjdGl2ZUI6IGJvb2xlYW47XG4gICAgX3JlY3Q6IENsaWVudFJlY3Q7XG4gICAgX3RpY2tzOiBhbnlbXTtcbiAgICBfbWluOiBudW1iZXI7XG4gICAgX21heDogbnVtYmVyO1xuICAgIF9zdGVwOiBudW1iZXI7XG4gICAgX3NuYXBzOiBib29sZWFuO1xuICAgIF92YWxBOiBudW1iZXI7XG4gICAgX3ZhbEI6IG51bWJlcjtcbiAgICBfcmF0aW9BOiBudW1iZXI7XG4gICAgX3JhdGlvQjogbnVtYmVyO1xuICAgIF9wcmVzc2VkQTogYm9vbGVhbjtcbiAgICBfcHJlc3NlZEI6IGJvb2xlYW47XG4gICAgX2Jhckw6IHN0cmluZztcbiAgICBfYmFyUjogc3RyaW5nO1xuICAgIF9ldmVudHM6IFVJRXZlbnRNYW5hZ2VyO1xuICAgIF9zbGlkZXI6IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtudW1iZXJ9IE1pbmltdW0gaW50ZWdlciB2YWx1ZSBvZiB0aGUgcmFuZ2UuIERlZmF1bHRzIHRvIGAwYC5cbiAgICAgKi9cbiAgICBtaW46IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge251bWJlcn0gTWF4aW11bSBpbnRlZ2VyIHZhbHVlIG9mIHRoZSByYW5nZS4gRGVmYXVsdHMgdG8gYDEwMGAuXG4gICAgICovXG4gICAgbWF4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtudW1iZXJ9IFNwZWNpZmllcyB0aGUgdmFsdWUgZ3JhbnVsYXJpdHkuIERlZmF1bHRzIHRvIGAxYC5cbiAgICAgKi9cbiAgICBzdGVwOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtib29sZWFufSBJZiB0cnVlLCB0aGUga25vYiBzbmFwcyB0byB0aWNrIG1hcmtzIGV2ZW5seSBzcGFjZWQgYmFzZWRcbiAgICAgKiBvbiB0aGUgc3RlcCBwcm9wZXJ0eSB2YWx1ZS4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICAgKi9cbiAgICBzbmFwczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge2Jvb2xlYW59IElmIHRydWUsIGEgcGluIHdpdGggaW50ZWdlciB2YWx1ZSBpcyBzaG93biB3aGVuIHRoZSBrbm9iXG4gICAgICogaXMgcHJlc3NlZC4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICAgKi9cbiAgICBwaW46IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtudW1iZXJ9IEhvdyBsb25nLCBpbiBtaWxsaXNlY29uZHMsIHRvIHdhaXQgdG8gdHJpZ2dlciB0aGVcbiAgICAgKiBgaW9uQ2hhbmdlYCBldmVudCBhZnRlciBlYWNoIGNoYW5nZSBpbiB0aGUgcmFuZ2UgdmFsdWUuIERlZmF1bHQgYDBgLlxuICAgICAqL1xuICAgIGRlYm91bmNlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGlucHV0IHtib29sZWFufSBTaG93IHR3byBrbm9icy4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICAgKi9cbiAgICBkdWFsS25vYnM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcmF0aW8gb2YgdGhlIGtub2IncyBpcyBjdXJyZW50IGxvY2F0aW9uLCB3aGljaCBpcyBhIG51bWJlclxuICAgICAqIGJldHdlZW4gYDBgIGFuZCBgMWAuIElmIHR3byBrbm9icyBhcmUgdXNlZCwgdGhpcyBwcm9wZXJ0eSByZXByZXNlbnRzXG4gICAgICogdGhlIGxvd2VyIHZhbHVlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJhdGlvOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcmF0aW8gb2YgdGhlIHVwcGVyIHZhbHVlJ3MgaXMgY3VycmVudCBsb2NhdGlvbiwgd2hpY2ggaXNcbiAgICAgKiBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgYDFgLiBJZiB0aGVyZSBpcyBvbmx5IG9uZSBrbm9iLCB0aGVuIHRoaXNcbiAgICAgKiB3aWxsIHJldHVybiBgbnVsbGAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmF0aW9VcHBlcjogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKGZvcm06IEZvcm0sIF9oYXB0aWM6IEhhcHRpYywgaXRlbTogSXRlbSwgY29uZmlnOiBDb25maWcsIF9wbHQ6IFBsYXRmb3JtLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIF9kb206IERvbUNvbnRyb2xsZXIsIF9jZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3BvaW50ZXJEb3duKGV2OiBVSUV2ZW50KTogYm9vbGVhbjtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3BvaW50ZXJNb3ZlKGV2OiBVSUV2ZW50KTogdm9pZDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3BvaW50ZXJVcChldjogVUlFdmVudCk6IHZvaWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF91cGRhdGUoY3VycmVudDogUG9pbnRlckNvb3JkaW5hdGVzLCByZWN0OiBDbGllbnRSZWN0LCBpc1ByZXNzZWQ6IGJvb2xlYW4pOiBib29sZWFuO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfdXBkYXRlQmFyKCk6IHZvaWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9jcmVhdGVUaWNrcygpOiB2b2lkO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfdXBkYXRlVGlja3MoKTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIF9rZXlDaGcoaXNJbmNyZWFzZTogYm9vbGVhbiwgaXNLbm9iQjogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9yYXRpb1RvVmFsdWUocmF0aW86IG51bWJlcik6IG51bWJlcjtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3ZhbHVlVG9SYXRpbyh2YWx1ZTogbnVtYmVyKTogbnVtYmVyO1xuICAgIF9pbnB1dE5vcm1hbGl6ZSh2YWw6IGFueSk6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2lucHV0VXBkYXRlZCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19