import { QueryList } from '@angular/core';
import { Platform } from '../../platform/platform';
import { UIEventManager } from '../../gestures/ui-event-manager';
import { FabButton } from './fab';
import { FabList } from './fab-list';
/**
  * @name FabContainer
  * @module ionic
  *
  * @description
  * `<ion-fab>` is not a FAB button by itself but a container that assist the fab button (`<button ion-fab>`) allowing it
  * to be placed in fixed position that does not scroll with the content. It is also used to implement "material design speed dial",
  * ie. a FAB buttons displays a small lists of related actions when clicked.
  *
  * @property [top] - Places the container on the top of the content
  * @property [bottom] - Places the container on the bottom  of the content
  * @property [left] - Places the container on the left
  * @property [right] - Places the container on the right
  * @property [middle] - Places the container on the middle vertically
  * @property [center] - Places the container on the center horizontally
  * @property [edge] - Used to place the container between the content and the header/footer
  *
  * @usage
  *
  * ```html
  * <!-- this fab is placed at top right -->
  * <ion-content>
  *  <ion-fab top right>
  *    <button ion-fab>Button</button>
  *  </ion-fab>
  *
  *  <!-- this fab is placed at the center of the content viewport -->
  *  <ion-fab center middle>
  *    <button ion-fab>Button</button>
  *  </ion-fab>
  * </ion-content>
  * ```
  *
  * Ionic's FAB also supports "material design's fab speed dial". It is a normal fab button
  * that shows a list of related actions when clicked.
  *
  * The same `ion-fab` container can contain several `ion-fab-list` with different side values:
  * `top`, `bottom`, `left` and `right`. For example, if you want to have a list of button that are
  * on the top of the main button, you should use `side="top"` and so on. By default, if side is ommited, `side="bottom"`.
  *
  * ```html
  * <ion-content>
  *  <!-- this fab is placed at bottom right -->
  *  <ion-fab bottom right >
  *    <button ion-fab>Share</button>
  *    <ion-fab-list side="top">
  *      <button ion-fab>Facebook</button>
  *      <button ion-fab>Twitter</button>
  *      <button ion-fab>Youtube</button>
  *    </ion-fab-list>
  *    <ion-fab-list side="left">
  *      <button ion-fab>Vimeo</button>
  *    </ion-fab-list>
  *  </ion-fab>
  * </ion-content>
  * ```
  *
  * A FAB speed dial can also be closed programatically.
  *
  * ```html
  * <ion-content>
  *  <ion-fab bottom right #fab>
  *    <button ion-fab>Share</button>
  *    <ion-fab-list side="top">
  *      <button ion-fab (click)="share('facebook', fab)">Facebook</button>
  *      <button ion-fab (click)="share('twitter', fab)">Twitter</button>
  *    </ion-fab-list>
  *  </ion-fab>
  * </ion-content>
  * ```
  *
  * ```ts
  * share(socialNet: string, fab: FabContainer) {
  *   fab.close();
  *   console.log("Sharing in", socialNet);
  * }
  * ```
  *
  * @demo /docs/demos/src/fab/
  * @see {@link /docs/components#fabs FAB Component Docs}
 */
import * as ɵngcc0 from '@angular/core';
export declare class FabContainer {
    /**
     * @hidden
     */
    _events: UIEventManager;
    /**
     * @hidden
     */
    _listsActive: boolean;
    /**
     * @hidden
     */
    _mainButton: FabButton;
    /**
     * @hidden
     */
    _fabLists: QueryList<FabList>;
    constructor(plt: Platform);
    /**
     * @hidden
     */
    ngAfterContentInit(): void;
    /**
     * @hidden
     */
    clickHandler(ev: any): void;
    /**
     * @hidden
     */
    canActivateList(ev: any): boolean;
    /**
     * @hidden
     */
    toggleList(): void;
    /**
     * @hidden
     */
    setActiveLists(isActive: boolean): void;
    /**
     * Close an active FAB list container
     */
    close(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FabContainer, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FabContainer, "ion-fab", never, {}, {}, ["_mainButton", "_fabLists"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFiLWNvbnRhaW5lci5kLnRzIiwic291cmNlcyI6WyJmYWItY29udGFpbmVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vcGxhdGZvcm0nO1xuaW1wb3J0IHsgVUlFdmVudE1hbmFnZXIgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy91aS1ldmVudC1tYW5hZ2VyJztcbmltcG9ydCB7IEZhYkJ1dHRvbiB9IGZyb20gJy4vZmFiJztcbmltcG9ydCB7IEZhYkxpc3QgfSBmcm9tICcuL2ZhYi1saXN0Jztcbi8qKlxuICAqIEBuYW1lIEZhYkNvbnRhaW5lclxuICAqIEBtb2R1bGUgaW9uaWNcbiAgKlxuICAqIEBkZXNjcmlwdGlvblxuICAqIGA8aW9uLWZhYj5gIGlzIG5vdCBhIEZBQiBidXR0b24gYnkgaXRzZWxmIGJ1dCBhIGNvbnRhaW5lciB0aGF0IGFzc2lzdCB0aGUgZmFiIGJ1dHRvbiAoYDxidXR0b24gaW9uLWZhYj5gKSBhbGxvd2luZyBpdFxuICAqIHRvIGJlIHBsYWNlZCBpbiBmaXhlZCBwb3NpdGlvbiB0aGF0IGRvZXMgbm90IHNjcm9sbCB3aXRoIHRoZSBjb250ZW50LiBJdCBpcyBhbHNvIHVzZWQgdG8gaW1wbGVtZW50IFwibWF0ZXJpYWwgZGVzaWduIHNwZWVkIGRpYWxcIixcbiAgKiBpZS4gYSBGQUIgYnV0dG9ucyBkaXNwbGF5cyBhIHNtYWxsIGxpc3RzIG9mIHJlbGF0ZWQgYWN0aW9ucyB3aGVuIGNsaWNrZWQuXG4gICpcbiAgKiBAcHJvcGVydHkgW3RvcF0gLSBQbGFjZXMgdGhlIGNvbnRhaW5lciBvbiB0aGUgdG9wIG9mIHRoZSBjb250ZW50XG4gICogQHByb3BlcnR5IFtib3R0b21dIC0gUGxhY2VzIHRoZSBjb250YWluZXIgb24gdGhlIGJvdHRvbSAgb2YgdGhlIGNvbnRlbnRcbiAgKiBAcHJvcGVydHkgW2xlZnRdIC0gUGxhY2VzIHRoZSBjb250YWluZXIgb24gdGhlIGxlZnRcbiAgKiBAcHJvcGVydHkgW3JpZ2h0XSAtIFBsYWNlcyB0aGUgY29udGFpbmVyIG9uIHRoZSByaWdodFxuICAqIEBwcm9wZXJ0eSBbbWlkZGxlXSAtIFBsYWNlcyB0aGUgY29udGFpbmVyIG9uIHRoZSBtaWRkbGUgdmVydGljYWxseVxuICAqIEBwcm9wZXJ0eSBbY2VudGVyXSAtIFBsYWNlcyB0aGUgY29udGFpbmVyIG9uIHRoZSBjZW50ZXIgaG9yaXpvbnRhbGx5XG4gICogQHByb3BlcnR5IFtlZGdlXSAtIFVzZWQgdG8gcGxhY2UgdGhlIGNvbnRhaW5lciBiZXR3ZWVuIHRoZSBjb250ZW50IGFuZCB0aGUgaGVhZGVyL2Zvb3RlclxuICAqXG4gICogQHVzYWdlXG4gICpcbiAgKiBgYGBodG1sXG4gICogPCEtLSB0aGlzIGZhYiBpcyBwbGFjZWQgYXQgdG9wIHJpZ2h0IC0tPlxuICAqIDxpb24tY29udGVudD5cbiAgKiAgPGlvbi1mYWIgdG9wIHJpZ2h0PlxuICAqICAgIDxidXR0b24gaW9uLWZhYj5CdXR0b248L2J1dHRvbj5cbiAgKiAgPC9pb24tZmFiPlxuICAqXG4gICogIDwhLS0gdGhpcyBmYWIgaXMgcGxhY2VkIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGNvbnRlbnQgdmlld3BvcnQgLS0+XG4gICogIDxpb24tZmFiIGNlbnRlciBtaWRkbGU+XG4gICogICAgPGJ1dHRvbiBpb24tZmFiPkJ1dHRvbjwvYnV0dG9uPlxuICAqICA8L2lvbi1mYWI+XG4gICogPC9pb24tY29udGVudD5cbiAgKiBgYGBcbiAgKlxuICAqIElvbmljJ3MgRkFCIGFsc28gc3VwcG9ydHMgXCJtYXRlcmlhbCBkZXNpZ24ncyBmYWIgc3BlZWQgZGlhbFwiLiBJdCBpcyBhIG5vcm1hbCBmYWIgYnV0dG9uXG4gICogdGhhdCBzaG93cyBhIGxpc3Qgb2YgcmVsYXRlZCBhY3Rpb25zIHdoZW4gY2xpY2tlZC5cbiAgKlxuICAqIFRoZSBzYW1lIGBpb24tZmFiYCBjb250YWluZXIgY2FuIGNvbnRhaW4gc2V2ZXJhbCBgaW9uLWZhYi1saXN0YCB3aXRoIGRpZmZlcmVudCBzaWRlIHZhbHVlczpcbiAgKiBgdG9wYCwgYGJvdHRvbWAsIGBsZWZ0YCBhbmQgYHJpZ2h0YC4gRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IHRvIGhhdmUgYSBsaXN0IG9mIGJ1dHRvbiB0aGF0IGFyZVxuICAqIG9uIHRoZSB0b3Agb2YgdGhlIG1haW4gYnV0dG9uLCB5b3Ugc2hvdWxkIHVzZSBgc2lkZT1cInRvcFwiYCBhbmQgc28gb24uIEJ5IGRlZmF1bHQsIGlmIHNpZGUgaXMgb21taXRlZCwgYHNpZGU9XCJib3R0b21cImAuXG4gICpcbiAgKiBgYGBodG1sXG4gICogPGlvbi1jb250ZW50PlxuICAqICA8IS0tIHRoaXMgZmFiIGlzIHBsYWNlZCBhdCBib3R0b20gcmlnaHQgLS0+XG4gICogIDxpb24tZmFiIGJvdHRvbSByaWdodCA+XG4gICogICAgPGJ1dHRvbiBpb24tZmFiPlNoYXJlPC9idXR0b24+XG4gICogICAgPGlvbi1mYWItbGlzdCBzaWRlPVwidG9wXCI+XG4gICogICAgICA8YnV0dG9uIGlvbi1mYWI+RmFjZWJvb2s8L2J1dHRvbj5cbiAgKiAgICAgIDxidXR0b24gaW9uLWZhYj5Ud2l0dGVyPC9idXR0b24+XG4gICogICAgICA8YnV0dG9uIGlvbi1mYWI+WW91dHViZTwvYnV0dG9uPlxuICAqICAgIDwvaW9uLWZhYi1saXN0PlxuICAqICAgIDxpb24tZmFiLWxpc3Qgc2lkZT1cImxlZnRcIj5cbiAgKiAgICAgIDxidXR0b24gaW9uLWZhYj5WaW1lbzwvYnV0dG9uPlxuICAqICAgIDwvaW9uLWZhYi1saXN0PlxuICAqICA8L2lvbi1mYWI+XG4gICogPC9pb24tY29udGVudD5cbiAgKiBgYGBcbiAgKlxuICAqIEEgRkFCIHNwZWVkIGRpYWwgY2FuIGFsc28gYmUgY2xvc2VkIHByb2dyYW1hdGljYWxseS5cbiAgKlxuICAqIGBgYGh0bWxcbiAgKiA8aW9uLWNvbnRlbnQ+XG4gICogIDxpb24tZmFiIGJvdHRvbSByaWdodCAjZmFiPlxuICAqICAgIDxidXR0b24gaW9uLWZhYj5TaGFyZTwvYnV0dG9uPlxuICAqICAgIDxpb24tZmFiLWxpc3Qgc2lkZT1cInRvcFwiPlxuICAqICAgICAgPGJ1dHRvbiBpb24tZmFiIChjbGljayk9XCJzaGFyZSgnZmFjZWJvb2snLCBmYWIpXCI+RmFjZWJvb2s8L2J1dHRvbj5cbiAgKiAgICAgIDxidXR0b24gaW9uLWZhYiAoY2xpY2spPVwic2hhcmUoJ3R3aXR0ZXInLCBmYWIpXCI+VHdpdHRlcjwvYnV0dG9uPlxuICAqICAgIDwvaW9uLWZhYi1saXN0PlxuICAqICA8L2lvbi1mYWI+XG4gICogPC9pb24tY29udGVudD5cbiAgKiBgYGBcbiAgKlxuICAqIGBgYHRzXG4gICogc2hhcmUoc29jaWFsTmV0OiBzdHJpbmcsIGZhYjogRmFiQ29udGFpbmVyKSB7XG4gICogICBmYWIuY2xvc2UoKTtcbiAgKiAgIGNvbnNvbGUubG9nKFwiU2hhcmluZyBpblwiLCBzb2NpYWxOZXQpO1xuICAqIH1cbiAgKiBgYGBcbiAgKlxuICAqIEBkZW1vIC9kb2NzL2RlbW9zL3NyYy9mYWIvXG4gICogQHNlZSB7QGxpbmsgL2RvY3MvY29tcG9uZW50cyNmYWJzIEZBQiBDb21wb25lbnQgRG9jc31cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmFiQ29udGFpbmVyIHtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2V2ZW50czogVUlFdmVudE1hbmFnZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9saXN0c0FjdGl2ZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX21haW5CdXR0b246IEZhYkJ1dHRvbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2ZhYkxpc3RzOiBRdWVyeUxpc3Q8RmFiTGlzdD47XG4gICAgY29uc3RydWN0b3IocGx0OiBQbGF0Zm9ybSk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjbGlja0hhbmRsZXIoZXY6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNhbkFjdGl2YXRlTGlzdChldjogYW55KTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdG9nZ2xlTGlzdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZXRBY3RpdmVMaXN0cyhpc0FjdGl2ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2xvc2UgYW4gYWN0aXZlIEZBQiBsaXN0IGNvbnRhaW5lclxuICAgICAqL1xuICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=