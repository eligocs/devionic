import { ElementRef, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { Ion } from '../ion';
/**
  * @name FabButton
  * @module ionic
  *
  * @description
  * FABs (Floating Action Buttons) are standard material design components. They are shaped as a circle that represents a promoted action. When pressed, it may contain more related actions.
  * FABs as its name suggests are floating over the content in a fixed position. This is not achieved exclusively with `<button ion-fab>Button</button>` but it has to be wrapped with the `<ion-fab>` component, like this:
  *
  * ```html
  * <ion-content>
  *  <!-- Real floating action button, fixed. It will not scroll with the content -->
  *  <ion-fab>
  *    <button ion-fab>Button</button>
  *  </ion-fab>
  *
  *  <!-- Button shaped as a circle that just like a normal button scrolls with the content -->
  *  <button ion-fab>Button</button>
  * </ion-content>
  *
  * ```
  *
  * In case the button is not wrapped with `<ion-fab>`, the fab button will behave like a normal button, scrolling with the content.
  *
  * See [ion-fab] to learn more information about how to position the fab button.
  *
  * @property [mini] - Makes a fab button with a reduced size.
  *
  * @usage
  *
  * ```html
  *
  * <!-- Colors -->
  * <ion-fab>
  *   <button ion-fab color="primary">Button</button>
  * </ion-fab>
  *
  * <!-- Mini -->
  * <ion-fab>
  *   <button ion-fab mini>Small</button>
  * </ion-fab>
  * ```
  *
  * @demo /docs/demos/src/fab/
  * @see {@link /docs/components#fabs FAB Component Docs}
 */
import * as ɵngcc0 from '@angular/core';
export declare class FabButton extends Ion {
    constructor(config: Config, elementRef: ElementRef, renderer: Renderer);
    /**
     * @hidden
     */
    setActiveClose(closeVisible: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FabButton, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FabButton, "[ion-fab]", never, {}, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFiLmQudHMiLCJzb3VyY2VzIjpbImZhYi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgSW9uIH0gZnJvbSAnLi4vaW9uJztcbi8qKlxuICAqIEBuYW1lIEZhYkJ1dHRvblxuICAqIEBtb2R1bGUgaW9uaWNcbiAgKlxuICAqIEBkZXNjcmlwdGlvblxuICAqIEZBQnMgKEZsb2F0aW5nIEFjdGlvbiBCdXR0b25zKSBhcmUgc3RhbmRhcmQgbWF0ZXJpYWwgZGVzaWduIGNvbXBvbmVudHMuIFRoZXkgYXJlIHNoYXBlZCBhcyBhIGNpcmNsZSB0aGF0IHJlcHJlc2VudHMgYSBwcm9tb3RlZCBhY3Rpb24uIFdoZW4gcHJlc3NlZCwgaXQgbWF5IGNvbnRhaW4gbW9yZSByZWxhdGVkIGFjdGlvbnMuXG4gICogRkFCcyBhcyBpdHMgbmFtZSBzdWdnZXN0cyBhcmUgZmxvYXRpbmcgb3ZlciB0aGUgY29udGVudCBpbiBhIGZpeGVkIHBvc2l0aW9uLiBUaGlzIGlzIG5vdCBhY2hpZXZlZCBleGNsdXNpdmVseSB3aXRoIGA8YnV0dG9uIGlvbi1mYWI+QnV0dG9uPC9idXR0b24+YCBidXQgaXQgaGFzIHRvIGJlIHdyYXBwZWQgd2l0aCB0aGUgYDxpb24tZmFiPmAgY29tcG9uZW50LCBsaWtlIHRoaXM6XG4gICpcbiAgKiBgYGBodG1sXG4gICogPGlvbi1jb250ZW50PlxuICAqICA8IS0tIFJlYWwgZmxvYXRpbmcgYWN0aW9uIGJ1dHRvbiwgZml4ZWQuIEl0IHdpbGwgbm90IHNjcm9sbCB3aXRoIHRoZSBjb250ZW50IC0tPlxuICAqICA8aW9uLWZhYj5cbiAgKiAgICA8YnV0dG9uIGlvbi1mYWI+QnV0dG9uPC9idXR0b24+XG4gICogIDwvaW9uLWZhYj5cbiAgKlxuICAqICA8IS0tIEJ1dHRvbiBzaGFwZWQgYXMgYSBjaXJjbGUgdGhhdCBqdXN0IGxpa2UgYSBub3JtYWwgYnV0dG9uIHNjcm9sbHMgd2l0aCB0aGUgY29udGVudCAtLT5cbiAgKiAgPGJ1dHRvbiBpb24tZmFiPkJ1dHRvbjwvYnV0dG9uPlxuICAqIDwvaW9uLWNvbnRlbnQ+XG4gICpcbiAgKiBgYGBcbiAgKlxuICAqIEluIGNhc2UgdGhlIGJ1dHRvbiBpcyBub3Qgd3JhcHBlZCB3aXRoIGA8aW9uLWZhYj5gLCB0aGUgZmFiIGJ1dHRvbiB3aWxsIGJlaGF2ZSBsaWtlIGEgbm9ybWFsIGJ1dHRvbiwgc2Nyb2xsaW5nIHdpdGggdGhlIGNvbnRlbnQuXG4gICpcbiAgKiBTZWUgW2lvbi1mYWJdIHRvIGxlYXJuIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgaG93IHRvIHBvc2l0aW9uIHRoZSBmYWIgYnV0dG9uLlxuICAqXG4gICogQHByb3BlcnR5IFttaW5pXSAtIE1ha2VzIGEgZmFiIGJ1dHRvbiB3aXRoIGEgcmVkdWNlZCBzaXplLlxuICAqXG4gICogQHVzYWdlXG4gICpcbiAgKiBgYGBodG1sXG4gICpcbiAgKiA8IS0tIENvbG9ycyAtLT5cbiAgKiA8aW9uLWZhYj5cbiAgKiAgIDxidXR0b24gaW9uLWZhYiBjb2xvcj1cInByaW1hcnlcIj5CdXR0b248L2J1dHRvbj5cbiAgKiA8L2lvbi1mYWI+XG4gICpcbiAgKiA8IS0tIE1pbmkgLS0+XG4gICogPGlvbi1mYWI+XG4gICogICA8YnV0dG9uIGlvbi1mYWIgbWluaT5TbWFsbDwvYnV0dG9uPlxuICAqIDwvaW9uLWZhYj5cbiAgKiBgYGBcbiAgKlxuICAqIEBkZW1vIC9kb2NzL2RlbW9zL3NyYy9mYWIvXG4gICogQHNlZSB7QGxpbmsgL2RvY3MvY29tcG9uZW50cyNmYWJzIEZBQiBDb21wb25lbnQgRG9jc31cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmFiQnV0dG9uIGV4dGVuZHMgSW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbmZpZywgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgc2V0QWN0aXZlQ2xvc2UoY2xvc2VWaXNpYmxlOiBib29sZWFuKTogdm9pZDtcbn1cbiJdfQ==