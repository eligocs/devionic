import { ElementRef, Renderer } from '@angular/core';
import { Config } from '../config/config';
/**
 * Base class for all Ionic components. Exposes some common functionality
 * that all Ionic components need, such as accessing underlying native elements and
 * sending/receiving app-level events.
 */
/** @hidden */
import * as ɵngcc0 from '@angular/core';
export declare class Ion {
    /** @hidden */
    _config: Config;
    /** @hidden */
    _elementRef: ElementRef;
    /** @hidden */
    _renderer: Renderer;
    /** @hidden */
    _color: string;
    /** @hidden */
    _mode: string;
    /** @hidden */
    _componentName: string;
    /**
     * @input {string} The color to use from your Sass `$colors` map.
     * Default options are: `"primary"`, `"secondary"`, `"danger"`, `"light"`, and `"dark"`.
     * For more information, see [Theming your App](/docs/theming/theming-your-app).
     */
    color: string;
    /**
     * @input {string} The mode determines which platform styles to use.
     * Possible values are: `"ios"`, `"md"`, or `"wp"`.
     * For more information, see [Platform Styles](/docs/theming/platform-specific-styles).
     */
    mode: string;
    constructor(config: Config, elementRef: ElementRef, renderer: Renderer, componentName?: string);
    /** @hidden */
    setElementClass(className: string, isAdd: boolean): void;
    /** @hidden */
    setElementAttribute(attributeName: string, attributeValue: any): void;
    /** @hidden */
    setElementStyle(property: string, value: string): void;
    /** @hidden */
    _setColor(newColor: string, componentName?: string): void;
    /** @hidden */
    _setMode(newMode: string): void;
    /** @hidden */
    _setComponentName(): void;
    /** @hidden */
    getElementRef(): ElementRef;
    /** @hidden */
    getNativeElement(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Ion, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Ion, never, never, { "color": "color"; "mode": "mode"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uLmQudHMiLCJzb3VyY2VzIjpbImlvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi9jb25maWcvY29uZmlnJztcbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIElvbmljIGNvbXBvbmVudHMuIEV4cG9zZXMgc29tZSBjb21tb24gZnVuY3Rpb25hbGl0eVxuICogdGhhdCBhbGwgSW9uaWMgY29tcG9uZW50cyBuZWVkLCBzdWNoIGFzIGFjY2Vzc2luZyB1bmRlcmx5aW5nIG5hdGl2ZSBlbGVtZW50cyBhbmRcbiAqIHNlbmRpbmcvcmVjZWl2aW5nIGFwcC1sZXZlbCBldmVudHMuXG4gKi9cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJb24ge1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgX2NvbmZpZzogQ29uZmlnO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfcmVuZGVyZXI6IFJlbmRlcmVyO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgX2NvbG9yOiBzdHJpbmc7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfbW9kZTogc3RyaW5nO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgX2NvbXBvbmVudE5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge3N0cmluZ30gVGhlIGNvbG9yIHRvIHVzZSBmcm9tIHlvdXIgU2FzcyBgJGNvbG9yc2AgbWFwLlxuICAgICAqIERlZmF1bHQgb3B0aW9ucyBhcmU6IGBcInByaW1hcnlcImAsIGBcInNlY29uZGFyeVwiYCwgYFwiZGFuZ2VyXCJgLCBgXCJsaWdodFwiYCwgYW5kIGBcImRhcmtcImAuXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBbVGhlbWluZyB5b3VyIEFwcF0oL2RvY3MvdGhlbWluZy90aGVtaW5nLXlvdXItYXBwKS5cbiAgICAgKi9cbiAgICBjb2xvcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBpbnB1dCB7c3RyaW5nfSBUaGUgbW9kZSBkZXRlcm1pbmVzIHdoaWNoIHBsYXRmb3JtIHN0eWxlcyB0byB1c2UuXG4gICAgICogUG9zc2libGUgdmFsdWVzIGFyZTogYFwiaW9zXCJgLCBgXCJtZFwiYCwgb3IgYFwid3BcImAuXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBbUGxhdGZvcm0gU3R5bGVzXSgvZG9jcy90aGVtaW5nL3BsYXRmb3JtLXNwZWNpZmljLXN0eWxlcykuXG4gICAgICovXG4gICAgbW9kZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGNvbXBvbmVudE5hbWU/OiBzdHJpbmcpO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgc2V0RWxlbWVudENsYXNzKGNsYXNzTmFtZTogc3RyaW5nLCBpc0FkZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBzZXRFbGVtZW50QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgYXR0cmlidXRlVmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBzZXRFbGVtZW50U3R5bGUocHJvcGVydHk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfc2V0Q29sb3IobmV3Q29sb3I6IHN0cmluZywgY29tcG9uZW50TmFtZT86IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfc2V0TW9kZShuZXdNb2RlOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgX3NldENvbXBvbmVudE5hbWUoKTogdm9pZDtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGdldEVsZW1lbnRSZWYoKTogRWxlbWVudFJlZjtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGdldE5hdGl2ZUVsZW1lbnQoKTogYW55O1xufVxuIl19