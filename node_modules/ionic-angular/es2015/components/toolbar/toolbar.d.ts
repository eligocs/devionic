import { ElementRef, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { ToolbarBase } from './toolbar-base';
/**
 * @name Toolbar
 * @description
 * A Toolbar is a generic bar that is positioned above or below content.
 * Unlike a [Navbar](../Navbar/), a toolbar can be used as a subheader.
 * When toolbars are placed within an `<ion-header>` or `<ion-footer>`,
 * the toolbars stay fixed in their respective location. When placed within
 * `<ion-content>`, toolbars will scroll with the content.
 *
 *
 * ### Buttons in a Toolbar
 * Buttons placed in a toolbar should be placed inside of the `<ion-buttons>`
 * element. An exception to this is a [menuToggle](../../menu/MenuToggle) button.
 * It should not be placed inside of the `<ion-buttons>` element. Both the
 * `<ion-buttons>` element and the `menuToggle` can be positioned inside of the
 * toolbar using different properties. The below chart has a description of each
 * property.
 *
 * | Property    | Description                                                                                                           |
 * |-------------|-----------------------------------------------------------------------------------------------------------------------|
 * | `start`     | Positions element to the left of the content in `ios` mode, and directly to the right in `md` and `wp` mode.    |
 * | `end`       | Positions element to the right of the content in `ios` mode, and to the far right in `md` and `wp` mode.        |
 * | `left`      | Positions element to the left of all other elements.                                                            |
 * | `right`     | Positions element to the right of all other elements.                                                           |
 *
 *
 * ### Header / Footer Box Shadow and Border
 * In `md` mode, the `<ion-header>` will receive a box-shadow on the bottom, and the
 * `<ion-footer>` will receive a box-shadow on the top.  In `ios` mode, the `<ion-header>`
 * will receive a border on the bottom, and the `<ion-footer>` will receive a border on the
 * top. Both the `md` box-shadow and the `ios` border can be removed by adding the `no-border`
 * attribute to the element.
 *
 * ```html
 * <ion-header no-border>
 *   <ion-toolbar>
 *     <ion-title>Header</ion-title>
 *   </ion-toolbar>
 * </ion-header>
 *
 * <ion-content>
 * </ion-content>
 *
 * <ion-footer no-border>
 *   <ion-toolbar>
 *     <ion-title>Footer</ion-title>
 *   </ion-toolbar>
 * </ion-footer>
 * ```
 *
 * @usage
 *
 * ```html
 *
 * <ion-header no-border>
 *
 *   <ion-toolbar>
 *     <ion-title>My Toolbar Title</ion-title>
 *   </ion-toolbar>
 *
 *   <ion-toolbar>
 *     <ion-title>I'm a subheader</ion-title>
 *   </ion-toolbar>
 *
 * <ion-header>
 *
 *
 * <ion-content>
 *
 *   <ion-toolbar>
 *     <ion-title>Scrolls with the content</ion-title>
 *   </ion-toolbar>
 *
 * </ion-content>
 *
 *
 * <ion-footer no-border>
 *
 *   <ion-toolbar>
 *     <ion-title>I'm a footer</ion-title>
 *   </ion-toolbar>
 *
 * </ion-footer>
 *  ```
 *
 * @demo /docs/demos/src/toolbar/
 * @see {@link ../Navbar/ Navbar API Docs}
 */
import * as ɵngcc0 from '@angular/core';
export declare class Toolbar extends ToolbarBase {
    /** @hidden */
    _sbPadding: boolean;
    constructor(config: Config, elementRef: ElementRef, renderer: Renderer);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Toolbar, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Toolbar, "ion-toolbar", never, {}, {}, never, ["[menuToggle],ion-buttons[left]", "ion-buttons[start]", "ion-buttons[end],ion-buttons[right]", "*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci5kLnRzIiwic291cmNlcyI6WyJ0b29sYmFyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgVG9vbGJhckJhc2UgfSBmcm9tICcuL3Rvb2xiYXItYmFzZSc7XG4vKipcbiAqIEBuYW1lIFRvb2xiYXJcbiAqIEBkZXNjcmlwdGlvblxuICogQSBUb29sYmFyIGlzIGEgZ2VuZXJpYyBiYXIgdGhhdCBpcyBwb3NpdGlvbmVkIGFib3ZlIG9yIGJlbG93IGNvbnRlbnQuXG4gKiBVbmxpa2UgYSBbTmF2YmFyXSguLi9OYXZiYXIvKSwgYSB0b29sYmFyIGNhbiBiZSB1c2VkIGFzIGEgc3ViaGVhZGVyLlxuICogV2hlbiB0b29sYmFycyBhcmUgcGxhY2VkIHdpdGhpbiBhbiBgPGlvbi1oZWFkZXI+YCBvciBgPGlvbi1mb290ZXI+YCxcbiAqIHRoZSB0b29sYmFycyBzdGF5IGZpeGVkIGluIHRoZWlyIHJlc3BlY3RpdmUgbG9jYXRpb24uIFdoZW4gcGxhY2VkIHdpdGhpblxuICogYDxpb24tY29udGVudD5gLCB0b29sYmFycyB3aWxsIHNjcm9sbCB3aXRoIHRoZSBjb250ZW50LlxuICpcbiAqXG4gKiAjIyMgQnV0dG9ucyBpbiBhIFRvb2xiYXJcbiAqIEJ1dHRvbnMgcGxhY2VkIGluIGEgdG9vbGJhciBzaG91bGQgYmUgcGxhY2VkIGluc2lkZSBvZiB0aGUgYDxpb24tYnV0dG9ucz5gXG4gKiBlbGVtZW50LiBBbiBleGNlcHRpb24gdG8gdGhpcyBpcyBhIFttZW51VG9nZ2xlXSguLi8uLi9tZW51L01lbnVUb2dnbGUpIGJ1dHRvbi5cbiAqIEl0IHNob3VsZCBub3QgYmUgcGxhY2VkIGluc2lkZSBvZiB0aGUgYDxpb24tYnV0dG9ucz5gIGVsZW1lbnQuIEJvdGggdGhlXG4gKiBgPGlvbi1idXR0b25zPmAgZWxlbWVudCBhbmQgdGhlIGBtZW51VG9nZ2xlYCBjYW4gYmUgcG9zaXRpb25lZCBpbnNpZGUgb2YgdGhlXG4gKiB0b29sYmFyIHVzaW5nIGRpZmZlcmVudCBwcm9wZXJ0aWVzLiBUaGUgYmVsb3cgY2hhcnQgaGFzIGEgZGVzY3JpcHRpb24gb2YgZWFjaFxuICogcHJvcGVydHkuXG4gKlxuICogfCBQcm9wZXJ0eSAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgYHN0YXJ0YCAgICAgfCBQb3NpdGlvbnMgZWxlbWVudCB0byB0aGUgbGVmdCBvZiB0aGUgY29udGVudCBpbiBgaW9zYCBtb2RlLCBhbmQgZGlyZWN0bHkgdG8gdGhlIHJpZ2h0IGluIGBtZGAgYW5kIGB3cGAgbW9kZS4gICAgfFxuICogfCBgZW5kYCAgICAgICB8IFBvc2l0aW9ucyBlbGVtZW50IHRvIHRoZSByaWdodCBvZiB0aGUgY29udGVudCBpbiBgaW9zYCBtb2RlLCBhbmQgdG8gdGhlIGZhciByaWdodCBpbiBgbWRgIGFuZCBgd3BgIG1vZGUuICAgICAgICB8XG4gKiB8IGBsZWZ0YCAgICAgIHwgUG9zaXRpb25zIGVsZW1lbnQgdG8gdGhlIGxlZnQgb2YgYWxsIG90aGVyIGVsZW1lbnRzLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYHJpZ2h0YCAgICAgfCBQb3NpdGlvbnMgZWxlbWVudCB0byB0aGUgcmlnaHQgb2YgYWxsIG90aGVyIGVsZW1lbnRzLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqXG4gKiAjIyMgSGVhZGVyIC8gRm9vdGVyIEJveCBTaGFkb3cgYW5kIEJvcmRlclxuICogSW4gYG1kYCBtb2RlLCB0aGUgYDxpb24taGVhZGVyPmAgd2lsbCByZWNlaXZlIGEgYm94LXNoYWRvdyBvbiB0aGUgYm90dG9tLCBhbmQgdGhlXG4gKiBgPGlvbi1mb290ZXI+YCB3aWxsIHJlY2VpdmUgYSBib3gtc2hhZG93IG9uIHRoZSB0b3AuICBJbiBgaW9zYCBtb2RlLCB0aGUgYDxpb24taGVhZGVyPmBcbiAqIHdpbGwgcmVjZWl2ZSBhIGJvcmRlciBvbiB0aGUgYm90dG9tLCBhbmQgdGhlIGA8aW9uLWZvb3Rlcj5gIHdpbGwgcmVjZWl2ZSBhIGJvcmRlciBvbiB0aGVcbiAqIHRvcC4gQm90aCB0aGUgYG1kYCBib3gtc2hhZG93IGFuZCB0aGUgYGlvc2AgYm9yZGVyIGNhbiBiZSByZW1vdmVkIGJ5IGFkZGluZyB0aGUgYG5vLWJvcmRlcmBcbiAqIGF0dHJpYnV0ZSB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBgYGBodG1sXG4gKiA8aW9uLWhlYWRlciBuby1ib3JkZXI+XG4gKiAgIDxpb24tdG9vbGJhcj5cbiAqICAgICA8aW9uLXRpdGxlPkhlYWRlcjwvaW9uLXRpdGxlPlxuICogICA8L2lvbi10b29sYmFyPlxuICogPC9pb24taGVhZGVyPlxuICpcbiAqIDxpb24tY29udGVudD5cbiAqIDwvaW9uLWNvbnRlbnQ+XG4gKlxuICogPGlvbi1mb290ZXIgbm8tYm9yZGVyPlxuICogICA8aW9uLXRvb2xiYXI+XG4gKiAgICAgPGlvbi10aXRsZT5Gb290ZXI8L2lvbi10aXRsZT5cbiAqICAgPC9pb24tdG9vbGJhcj5cbiAqIDwvaW9uLWZvb3Rlcj5cbiAqIGBgYFxuICpcbiAqIEB1c2FnZVxuICpcbiAqIGBgYGh0bWxcbiAqXG4gKiA8aW9uLWhlYWRlciBuby1ib3JkZXI+XG4gKlxuICogICA8aW9uLXRvb2xiYXI+XG4gKiAgICAgPGlvbi10aXRsZT5NeSBUb29sYmFyIFRpdGxlPC9pb24tdGl0bGU+XG4gKiAgIDwvaW9uLXRvb2xiYXI+XG4gKlxuICogICA8aW9uLXRvb2xiYXI+XG4gKiAgICAgPGlvbi10aXRsZT5JJ20gYSBzdWJoZWFkZXI8L2lvbi10aXRsZT5cbiAqICAgPC9pb24tdG9vbGJhcj5cbiAqXG4gKiA8aW9uLWhlYWRlcj5cbiAqXG4gKlxuICogPGlvbi1jb250ZW50PlxuICpcbiAqICAgPGlvbi10b29sYmFyPlxuICogICAgIDxpb24tdGl0bGU+U2Nyb2xscyB3aXRoIHRoZSBjb250ZW50PC9pb24tdGl0bGU+XG4gKiAgIDwvaW9uLXRvb2xiYXI+XG4gKlxuICogPC9pb24tY29udGVudD5cbiAqXG4gKlxuICogPGlvbi1mb290ZXIgbm8tYm9yZGVyPlxuICpcbiAqICAgPGlvbi10b29sYmFyPlxuICogICAgIDxpb24tdGl0bGU+SSdtIGEgZm9vdGVyPC9pb24tdGl0bGU+XG4gKiAgIDwvaW9uLXRvb2xiYXI+XG4gKlxuICogPC9pb24tZm9vdGVyPlxuICogIGBgYFxuICpcbiAqIEBkZW1vIC9kb2NzL2RlbW9zL3NyYy90b29sYmFyL1xuICogQHNlZSB7QGxpbmsgLi4vTmF2YmFyLyBOYXZiYXIgQVBJIERvY3N9XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRvb2xiYXIgZXh0ZW5kcyBUb29sYmFyQmFzZSB7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfc2JQYWRkaW5nOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIpO1xufVxuIl19