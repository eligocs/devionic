import { AfterContentInit, ElementRef, NgZone, OnDestroy, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { DomController } from '../../platform/dom-controller';
import { Form, IonicTapInput } from '../../util/form';
import { GestureController } from '../../gestures/gesture-controller';
import { Haptic } from '../../tap-click/haptic';
import { BaseInput } from '../../util/base-input';
import { Item } from '../item/item';
import { Platform } from '../../platform/platform';
import { ToggleGesture } from './toggle-gesture';
/**
 * @name Toggle
 * @description
 * A toggle technically is the same thing as an HTML checkbox input,
 * except it looks different and is easier to use on a touch device.
 * Toggles can also have colors assigned to them, by adding any color
 * attribute.
 *
 * See the [Angular Docs](https://angular.io/docs/ts/latest/guide/forms)
 * for more info on forms and inputs.
 *
 * @usage
 * ```html
 *
 *  <ion-list>
 *
 *    <ion-item>
 *      <ion-label>Pepperoni</ion-label>
 *      <ion-toggle [(ngModel)]="pepperoni"></ion-toggle>
 *    </ion-item>
 *
 *    <ion-item>
 *      <ion-label>Sausage</ion-label>
 *      <ion-toggle [(ngModel)]="sausage" disabled="true"></ion-toggle>
 *    </ion-item>
 *
 *    <ion-item>
 *      <ion-label>Mushrooms</ion-label>
 *      <ion-toggle [(ngModel)]="mushrooms"></ion-toggle>
 *    </ion-item>
 *
 *  </ion-list>
 * ```
 *
 * @demo /docs/demos/src/toggle/
 * @see {@link /docs/components#toggle Toggle Component Docs}
 */
import * as ɵngcc0 from '@angular/core';
export declare class Toggle extends BaseInput<boolean> implements IonicTapInput, AfterContentInit, OnDestroy {
    private _plt;
    private _haptic;
    private _gestureCtrl;
    private _domCtrl;
    private _zone;
    _activated: boolean;
    _startX: number;
    _gesture: ToggleGesture;
    /**
     * @input {boolean} If true, the element is selected.
     */
    checked: boolean;
    constructor(form: Form, config: Config, _plt: Platform, elementRef: ElementRef, renderer: Renderer, _haptic: Haptic, item: Item, _gestureCtrl: GestureController, _domCtrl: DomController, _zone: NgZone);
    /**
     * @hidden
     */
    ngAfterContentInit(): void;
    /**
     * @hidden
     */
    _inputUpdated(): void;
    /**
     * @hidden
     */
    _inputNormalize(val: any): boolean;
    /**
     * @hidden
     */
    _onDragStart(startX: number): void;
    /**
     * @hidden
     */
    _onDragMove(currentX: number): void;
    /**
     * @hidden
     */
    _onDragEnd(endX: number): void;
    /**
     * @hidden
     */
    _shouldToggle(currentX: number, margin: number): boolean;
    /**
     * @hidden
     */
    _keyup(ev: KeyboardEvent): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Toggle, [null, null, null, null, null, null, { optional: true; }, null, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Toggle, "ion-toggle", never, { "checked": "checked"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLmQudHMiLCJzb3VyY2VzIjpbInRvZ2dsZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uRGVzdHJveSwgUmVuZGVyZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgRG9tQ29udHJvbGxlciB9IGZyb20gJy4uLy4uL3BsYXRmb3JtL2RvbS1jb250cm9sbGVyJztcbmltcG9ydCB7IEZvcm0sIElvbmljVGFwSW5wdXQgfSBmcm9tICcuLi8uLi91dGlsL2Zvcm0nO1xuaW1wb3J0IHsgR2VzdHVyZUNvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy9nZXN0dXJlLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgSGFwdGljIH0gZnJvbSAnLi4vLi4vdGFwLWNsaWNrL2hhcHRpYyc7XG5pbXBvcnQgeyBCYXNlSW5wdXQgfSBmcm9tICcuLi8uLi91dGlsL2Jhc2UtaW5wdXQnO1xuaW1wb3J0IHsgSXRlbSB9IGZyb20gJy4uL2l0ZW0vaXRlbSc7XG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJy4uLy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB7IFRvZ2dsZUdlc3R1cmUgfSBmcm9tICcuL3RvZ2dsZS1nZXN0dXJlJztcbi8qKlxuICogQG5hbWUgVG9nZ2xlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgdG9nZ2xlIHRlY2huaWNhbGx5IGlzIHRoZSBzYW1lIHRoaW5nIGFzIGFuIEhUTUwgY2hlY2tib3ggaW5wdXQsXG4gKiBleGNlcHQgaXQgbG9va3MgZGlmZmVyZW50IGFuZCBpcyBlYXNpZXIgdG8gdXNlIG9uIGEgdG91Y2ggZGV2aWNlLlxuICogVG9nZ2xlcyBjYW4gYWxzbyBoYXZlIGNvbG9ycyBhc3NpZ25lZCB0byB0aGVtLCBieSBhZGRpbmcgYW55IGNvbG9yXG4gKiBhdHRyaWJ1dGUuXG4gKlxuICogU2VlIHRoZSBbQW5ndWxhciBEb2NzXShodHRwczovL2FuZ3VsYXIuaW8vZG9jcy90cy9sYXRlc3QvZ3VpZGUvZm9ybXMpXG4gKiBmb3IgbW9yZSBpbmZvIG9uIGZvcm1zIGFuZCBpbnB1dHMuXG4gKlxuICogQHVzYWdlXG4gKiBgYGBodG1sXG4gKlxuICogIDxpb24tbGlzdD5cbiAqXG4gKiAgICA8aW9uLWl0ZW0+XG4gKiAgICAgIDxpb24tbGFiZWw+UGVwcGVyb25pPC9pb24tbGFiZWw+XG4gKiAgICAgIDxpb24tdG9nZ2xlIFsobmdNb2RlbCldPVwicGVwcGVyb25pXCI+PC9pb24tdG9nZ2xlPlxuICogICAgPC9pb24taXRlbT5cbiAqXG4gKiAgICA8aW9uLWl0ZW0+XG4gKiAgICAgIDxpb24tbGFiZWw+U2F1c2FnZTwvaW9uLWxhYmVsPlxuICogICAgICA8aW9uLXRvZ2dsZSBbKG5nTW9kZWwpXT1cInNhdXNhZ2VcIiBkaXNhYmxlZD1cInRydWVcIj48L2lvbi10b2dnbGU+XG4gKiAgICA8L2lvbi1pdGVtPlxuICpcbiAqICAgIDxpb24taXRlbT5cbiAqICAgICAgPGlvbi1sYWJlbD5NdXNocm9vbXM8L2lvbi1sYWJlbD5cbiAqICAgICAgPGlvbi10b2dnbGUgWyhuZ01vZGVsKV09XCJtdXNocm9vbXNcIj48L2lvbi10b2dnbGU+XG4gKiAgICA8L2lvbi1pdGVtPlxuICpcbiAqICA8L2lvbi1saXN0PlxuICogYGBgXG4gKlxuICogQGRlbW8gL2RvY3MvZGVtb3Mvc3JjL3RvZ2dsZS9cbiAqIEBzZWUge0BsaW5rIC9kb2NzL2NvbXBvbmVudHMjdG9nZ2xlIFRvZ2dsZSBDb21wb25lbnQgRG9jc31cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9nZ2xlIGV4dGVuZHMgQmFzZUlucHV0PGJvb2xlYW4+IGltcGxlbWVudHMgSW9uaWNUYXBJbnB1dCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9wbHQ7XG4gICAgcHJpdmF0ZSBfaGFwdGljO1xuICAgIHByaXZhdGUgX2dlc3R1cmVDdHJsO1xuICAgIHByaXZhdGUgX2RvbUN0cmw7XG4gICAgcHJpdmF0ZSBfem9uZTtcbiAgICBfYWN0aXZhdGVkOiBib29sZWFuO1xuICAgIF9zdGFydFg6IG51bWJlcjtcbiAgICBfZ2VzdHVyZTogVG9nZ2xlR2VzdHVyZTtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge2Jvb2xlYW59IElmIHRydWUsIHRoZSBlbGVtZW50IGlzIHNlbGVjdGVkLlxuICAgICAqL1xuICAgIGNoZWNrZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZm9ybTogRm9ybSwgY29uZmlnOiBDb25maWcsIF9wbHQ6IFBsYXRmb3JtLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIF9oYXB0aWM6IEhhcHRpYywgaXRlbTogSXRlbSwgX2dlc3R1cmVDdHJsOiBHZXN0dXJlQ29udHJvbGxlciwgX2RvbUN0cmw6IERvbUNvbnRyb2xsZXIsIF96b25lOiBOZ1pvbmUpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2lucHV0VXBkYXRlZCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBfaW5wdXROb3JtYWxpemUodmFsOiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBfb25EcmFnU3RhcnQoc3RhcnRYOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBfb25EcmFnTW92ZShjdXJyZW50WDogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX29uRHJhZ0VuZChlbmRYOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBfc2hvdWxkVG9nZ2xlKGN1cnJlbnRYOiBudW1iZXIsIG1hcmdpbjogbnVtYmVyKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2tleXVwKGV2OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==