import { ElementRef, Renderer } from '@angular/core';
import { ActionSheetButton, ActionSheetOptions } from './action-sheet-options';
import { BlockerDelegate, GestureController } from '../../gestures/gesture-controller';
import { Config } from '../../config/config';
import { NavParams } from '../../navigation/nav-params';
import { ViewController } from '../../navigation/view-controller';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class ActionSheetCmp {
    private _viewCtrl;
    private _elementRef;
    d: ActionSheetOptions;
    cancelButton: ActionSheetButton;
    descId: string;
    enabled: boolean;
    hdrId: string;
    id: number;
    mode: string;
    gestureBlocker: BlockerDelegate;
    constructor(_viewCtrl: ViewController, config: Config, _elementRef: ElementRef, gestureCtrl: GestureController, params: NavParams, renderer: Renderer);
    ionViewDidLoad(): void;
    ionViewWillEnter(): void;
    ionViewDidLeave(): void;
    ionViewDidEnter(): void;
    keyUp(ev: KeyboardEvent): void;
    click(button: ActionSheetButton): void;
    bdClick(): void;
    dismiss(role: string): Promise<any>;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ActionSheetCmp, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ActionSheetCmp, "ion-action-sheet", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLXNoZWV0LWNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhY3Rpb24tc2hlZXQtY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBSZW5kZXJlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9uU2hlZXRCdXR0b24sIEFjdGlvblNoZWV0T3B0aW9ucyB9IGZyb20gJy4vYWN0aW9uLXNoZWV0LW9wdGlvbnMnO1xuaW1wb3J0IHsgQmxvY2tlckRlbGVnYXRlLCBHZXN0dXJlQ29udHJvbGxlciB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL2dlc3R1cmUtY29udHJvbGxlcic7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnJztcbmltcG9ydCB7IE5hdlBhcmFtcyB9IGZyb20gJy4uLy4uL25hdmlnYXRpb24vbmF2LXBhcmFtcyc7XG5pbXBvcnQgeyBWaWV3Q29udHJvbGxlciB9IGZyb20gJy4uLy4uL25hdmlnYXRpb24vdmlldy1jb250cm9sbGVyJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBY3Rpb25TaGVldENtcCB7XG4gICAgcHJpdmF0ZSBfdmlld0N0cmw7XG4gICAgcHJpdmF0ZSBfZWxlbWVudFJlZjtcbiAgICBkOiBBY3Rpb25TaGVldE9wdGlvbnM7XG4gICAgY2FuY2VsQnV0dG9uOiBBY3Rpb25TaGVldEJ1dHRvbjtcbiAgICBkZXNjSWQ6IHN0cmluZztcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIGhkcklkOiBzdHJpbmc7XG4gICAgaWQ6IG51bWJlcjtcbiAgICBtb2RlOiBzdHJpbmc7XG4gICAgZ2VzdHVyZUJsb2NrZXI6IEJsb2NrZXJEZWxlZ2F0ZTtcbiAgICBjb25zdHJ1Y3Rvcihfdmlld0N0cmw6IFZpZXdDb250cm9sbGVyLCBjb25maWc6IENvbmZpZywgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGdlc3R1cmVDdHJsOiBHZXN0dXJlQ29udHJvbGxlciwgcGFyYW1zOiBOYXZQYXJhbXMsIHJlbmRlcmVyOiBSZW5kZXJlcik7XG4gICAgaW9uVmlld0RpZExvYWQoKTogdm9pZDtcbiAgICBpb25WaWV3V2lsbEVudGVyKCk6IHZvaWQ7XG4gICAgaW9uVmlld0RpZExlYXZlKCk6IHZvaWQ7XG4gICAgaW9uVmlld0RpZEVudGVyKCk6IHZvaWQ7XG4gICAga2V5VXAoZXY6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIGNsaWNrKGJ1dHRvbjogQWN0aW9uU2hlZXRCdXR0b24pOiB2b2lkO1xuICAgIGJkQ2xpY2soKTogdm9pZDtcbiAgICBkaXNtaXNzKHJvbGU6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19