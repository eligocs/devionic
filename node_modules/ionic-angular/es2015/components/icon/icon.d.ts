import { ElementRef, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { Ion } from '../ion';
/**
 * @name Icon
 * @description
 * Icons can be used on their own, or inside of a number of Ionic components.
 * For a full list of available icons, check out the
 * [Ionicons docs](../../../../ionicons).
 *
 * One feature of Ionicons in Ionic is when icon names are set, the actual icon
 * which is rendered can change slightly depending on the mode the app is
 * running from. For example, by setting the icon name of `alarm`, on iOS the
 * icon will automatically apply `ios-alarm`, and on Material Design it will
 * automatically apply `md-alarm`. This allows the developer to write the
 * markup once while Ionic applies the appropriate icon based on the mode.
 *
 * @usage
 * ```html
 * <!-- automatically uses the correct "star" icon depending on the mode -->
 * <ion-icon name="star"></ion-icon>
 *
 * <!-- explicity set the icon for each mode -->
 * <ion-icon ios="ios-home" md="md-home"></ion-icon>
 *
 * <!-- always use the same icon, no matter what the mode -->
 * <ion-icon name="ios-clock"></ion-icon>
 * <ion-icon name="logo-twitter"></ion-icon>
 * ```
 *
 * @demo /docs/demos/src/icon/
 * @see {@link /docs/components#icons Icon Component Docs}
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class Icon extends Ion {
    /** @hidden */
    _iconMode: string;
    /** @hidden */
    _isActive: boolean;
    /** @hidden */
    _name: string;
    /** @hidden */
    _ios: string;
    /** @hidden */
    _md: string;
    /** @hidden */
    _css: string;
    constructor(config: Config, elementRef: ElementRef, renderer: Renderer);
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @input {string} Specifies which icon to use. The appropriate icon will be used based on the mode.
     * For more information, see [Ionicons](/docs/ionicons/).
     */
    name: string;
    /**
     * @input {string} Specifies which icon to use on `ios` mode.
     */
    ios: string;
    /**
     * @input {string} Specifies which icon to use on `md` mode.
     */
    md: string;
    /**
     * @input {boolean} If true, the icon is styled with an "active" appearance.
     * An active icon is filled in, and an inactive icon is the outline of the icon.
     * The `isActive` property is largely used by the tabbar. Only affects `ios` icons.
     */
    isActive: boolean;
    /**
     * @hidden
     */
    _hidden: boolean;
    /**
     * @hidden
     */
    update(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Icon, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Icon, "ion-icon", never, { "name": "name"; "ios": "ios"; "md": "md"; "isActive": "isActive"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5kLnRzIiwic291cmNlcyI6WyJpY29uLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnJztcbmltcG9ydCB7IElvbiB9IGZyb20gJy4uL2lvbic7XG4vKipcbiAqIEBuYW1lIEljb25cbiAqIEBkZXNjcmlwdGlvblxuICogSWNvbnMgY2FuIGJlIHVzZWQgb24gdGhlaXIgb3duLCBvciBpbnNpZGUgb2YgYSBudW1iZXIgb2YgSW9uaWMgY29tcG9uZW50cy5cbiAqIEZvciBhIGZ1bGwgbGlzdCBvZiBhdmFpbGFibGUgaWNvbnMsIGNoZWNrIG91dCB0aGVcbiAqIFtJb25pY29ucyBkb2NzXSguLi8uLi8uLi8uLi9pb25pY29ucykuXG4gKlxuICogT25lIGZlYXR1cmUgb2YgSW9uaWNvbnMgaW4gSW9uaWMgaXMgd2hlbiBpY29uIG5hbWVzIGFyZSBzZXQsIHRoZSBhY3R1YWwgaWNvblxuICogd2hpY2ggaXMgcmVuZGVyZWQgY2FuIGNoYW5nZSBzbGlnaHRseSBkZXBlbmRpbmcgb24gdGhlIG1vZGUgdGhlIGFwcCBpc1xuICogcnVubmluZyBmcm9tLiBGb3IgZXhhbXBsZSwgYnkgc2V0dGluZyB0aGUgaWNvbiBuYW1lIG9mIGBhbGFybWAsIG9uIGlPUyB0aGVcbiAqIGljb24gd2lsbCBhdXRvbWF0aWNhbGx5IGFwcGx5IGBpb3MtYWxhcm1gLCBhbmQgb24gTWF0ZXJpYWwgRGVzaWduIGl0IHdpbGxcbiAqIGF1dG9tYXRpY2FsbHkgYXBwbHkgYG1kLWFsYXJtYC4gVGhpcyBhbGxvd3MgdGhlIGRldmVsb3BlciB0byB3cml0ZSB0aGVcbiAqIG1hcmt1cCBvbmNlIHdoaWxlIElvbmljIGFwcGxpZXMgdGhlIGFwcHJvcHJpYXRlIGljb24gYmFzZWQgb24gdGhlIG1vZGUuXG4gKlxuICogQHVzYWdlXG4gKiBgYGBodG1sXG4gKiA8IS0tIGF1dG9tYXRpY2FsbHkgdXNlcyB0aGUgY29ycmVjdCBcInN0YXJcIiBpY29uIGRlcGVuZGluZyBvbiB0aGUgbW9kZSAtLT5cbiAqIDxpb24taWNvbiBuYW1lPVwic3RhclwiPjwvaW9uLWljb24+XG4gKlxuICogPCEtLSBleHBsaWNpdHkgc2V0IHRoZSBpY29uIGZvciBlYWNoIG1vZGUgLS0+XG4gKiA8aW9uLWljb24gaW9zPVwiaW9zLWhvbWVcIiBtZD1cIm1kLWhvbWVcIj48L2lvbi1pY29uPlxuICpcbiAqIDwhLS0gYWx3YXlzIHVzZSB0aGUgc2FtZSBpY29uLCBubyBtYXR0ZXIgd2hhdCB0aGUgbW9kZSAtLT5cbiAqIDxpb24taWNvbiBuYW1lPVwiaW9zLWNsb2NrXCI+PC9pb24taWNvbj5cbiAqIDxpb24taWNvbiBuYW1lPVwibG9nby10d2l0dGVyXCI+PC9pb24taWNvbj5cbiAqIGBgYFxuICpcbiAqIEBkZW1vIC9kb2NzL2RlbW9zL3NyYy9pY29uL1xuICogQHNlZSB7QGxpbmsgL2RvY3MvY29tcG9uZW50cyNpY29ucyBJY29uIENvbXBvbmVudCBEb2NzfVxuICpcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWNvbiBleHRlbmRzIElvbiB7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfaWNvbk1vZGU6IHN0cmluZztcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIF9pc0FjdGl2ZTogYm9vbGVhbjtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIF9uYW1lOiBzdHJpbmc7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfaW9zOiBzdHJpbmc7XG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBfbWQ6IHN0cmluZztcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIF9jc3M6IHN0cmluZztcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbmZpZywgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge3N0cmluZ30gU3BlY2lmaWVzIHdoaWNoIGljb24gdG8gdXNlLiBUaGUgYXBwcm9wcmlhdGUgaWNvbiB3aWxsIGJlIHVzZWQgYmFzZWQgb24gdGhlIG1vZGUuXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBbSW9uaWNvbnNdKC9kb2NzL2lvbmljb25zLykuXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBpbnB1dCB7c3RyaW5nfSBTcGVjaWZpZXMgd2hpY2ggaWNvbiB0byB1c2Ugb24gYGlvc2AgbW9kZS5cbiAgICAgKi9cbiAgICBpb3M6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge3N0cmluZ30gU3BlY2lmaWVzIHdoaWNoIGljb24gdG8gdXNlIG9uIGBtZGAgbW9kZS5cbiAgICAgKi9cbiAgICBtZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBpbnB1dCB7Ym9vbGVhbn0gSWYgdHJ1ZSwgdGhlIGljb24gaXMgc3R5bGVkIHdpdGggYW4gXCJhY3RpdmVcIiBhcHBlYXJhbmNlLlxuICAgICAqIEFuIGFjdGl2ZSBpY29uIGlzIGZpbGxlZCBpbiwgYW5kIGFuIGluYWN0aXZlIGljb24gaXMgdGhlIG91dGxpbmUgb2YgdGhlIGljb24uXG4gICAgICogVGhlIGBpc0FjdGl2ZWAgcHJvcGVydHkgaXMgbGFyZ2VseSB1c2VkIGJ5IHRoZSB0YWJiYXIuIE9ubHkgYWZmZWN0cyBgaW9zYCBpY29ucy5cbiAgICAgKi9cbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2hpZGRlbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdXBkYXRlKCk6IHZvaWQ7XG59XG4iXX0=