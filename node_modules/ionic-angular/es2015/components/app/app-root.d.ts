import { ComponentFactoryResolver, ElementRef, InjectionToken, OnInit, Renderer, ViewContainerRef } from '@angular/core';
import { App } from './app';
import { Config } from '../../config/config';
import { Ion } from '../ion';
import { OverlayPortal } from './overlay-portal';
import { Platform } from '../../platform/platform';
import * as ɵngcc0 from '@angular/core';
export declare const AppRootToken: InjectionToken<any>;
/**
 * @hidden
 */
export declare class IonicApp extends Ion implements OnInit {
    private _userCmp;
    private _cfr;
    private _plt;
    private _stopScrollPlugin;
    private _tmr;
    _viewport: ViewContainerRef;
    _modalPortal: OverlayPortal;
    _overlayPortal: OverlayPortal;
    _loadingPortal: OverlayPortal;
    _toastPortal: OverlayPortal;
    constructor(_userCmp: any, _cfr: ComponentFactoryResolver, elementRef: ElementRef, renderer: Renderer, config: Config, _plt: Platform, app: App);
    ngOnInit(): void;
    /**
     * @hidden
     */
    _getPortal(portal?: number): OverlayPortal;
    _getActivePortal(): OverlayPortal;
    _disableScroll(shouldDisableScroll: boolean): void;
    stopScroll(): Promise<boolean>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonicApp, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonicApp, "ion-app", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXJvb3QuZC50cyIsInNvdXJjZXMiOlsiYXBwLXJvb3QuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgRWxlbWVudFJlZiwgSW5qZWN0aW9uVG9rZW4sIE9uSW5pdCwgUmVuZGVyZXIsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcCB9IGZyb20gJy4vYXBwJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgSW9uIH0gZnJvbSAnLi4vaW9uJztcbmltcG9ydCB7IE92ZXJsYXlQb3J0YWwgfSBmcm9tICcuL292ZXJsYXktcG9ydGFsJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vcGxhdGZvcm0nO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgQXBwUm9vdFRva2VuOiBJbmplY3Rpb25Ub2tlbjxhbnk+O1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElvbmljQXBwIGV4dGVuZHMgSW9uIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIF91c2VyQ21wO1xuICAgIHByaXZhdGUgX2NmcjtcbiAgICBwcml2YXRlIF9wbHQ7XG4gICAgcHJpdmF0ZSBfc3RvcFNjcm9sbFBsdWdpbjtcbiAgICBwcml2YXRlIF90bXI7XG4gICAgX3ZpZXdwb3J0OiBWaWV3Q29udGFpbmVyUmVmO1xuICAgIF9tb2RhbFBvcnRhbDogT3ZlcmxheVBvcnRhbDtcbiAgICBfb3ZlcmxheVBvcnRhbDogT3ZlcmxheVBvcnRhbDtcbiAgICBfbG9hZGluZ1BvcnRhbDogT3ZlcmxheVBvcnRhbDtcbiAgICBfdG9hc3RQb3J0YWw6IE92ZXJsYXlQb3J0YWw7XG4gICAgY29uc3RydWN0b3IoX3VzZXJDbXA6IGFueSwgX2NmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGNvbmZpZzogQ29uZmlnLCBfcGx0OiBQbGF0Zm9ybSwgYXBwOiBBcHApO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9nZXRQb3J0YWwocG9ydGFsPzogbnVtYmVyKTogT3ZlcmxheVBvcnRhbDtcbiAgICBfZ2V0QWN0aXZlUG9ydGFsKCk6IE92ZXJsYXlQb3J0YWw7XG4gICAgX2Rpc2FibGVTY3JvbGwoc2hvdWxkRGlzYWJsZVNjcm9sbDogYm9vbGVhbik6IHZvaWQ7XG4gICAgc3RvcFNjcm9sbCgpOiBQcm9taXNlPGJvb2xlYW4+O1xufVxuIl19