import { EventEmitter, NgZone } from '@angular/core';
import { Config } from '../config/config';
import { DomController } from './dom-controller';
import { Platform } from './platform';
/**
 * @name Keyboard
 * @description
 * The `Keyboard` class allows you to work with the keyboard events provided
 * by the Ionic keyboard plugin.
 *
 * @usage
 * ```ts
 * export class MyClass {
 *
 *   constructor(public keyboard: Keyboard) { }
 *
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class Keyboard {
    private _plt;
    private _zone;
    private _dom;
    _tmr: number;
    willShow: EventEmitter<number>;
    willHide: EventEmitter<void>;
    didShow: EventEmitter<number>;
    didHide: EventEmitter<void>;
    eventsAvailable: boolean;
    constructor(config: Config, _plt: Platform, _zone: NgZone, _dom: DomController);
    private listenV2(win);
    private listenV1(win);
    private blurActiveInput(shouldBlur);
    /**
     * Check to see if the keyboard is open or not.
     *
     * ```ts
     * export class MyClass {
     *   constructor(public keyboard: Keyboard) {
     *
     *   }
     *
     *   keyboardCheck() {
     *     console.log('The keyboard is open:', this.keyboard.isOpen());
     *   }
     * }
     * ```
     *
     * @return {boolean} returns a true or false value if the keyboard is open or not.
     */
    isOpen(): boolean;
    /**
     * When the keyboard is closed, call any methods you want.
     *
     * ```ts
     * export class MyClass {
     *   constructor(public keyboard: Keyboard) {
     *     this.keyboard.onClose(this.closeCallback);
     *   }
     *   closeCallback() {
     *     // call what ever functionality you want on keyboard close
     *     console.log('Closing time');
     *   }
     * }
     * ```
     *
     * @param {function} callback method you want to call when the keyboard has been closed.
     * @return {function} returns a callback that gets fired when the keyboard is closed.
     */
    onClose(callback: Function, pollingInternval?: number, pollingChecksMax?: number): Promise<any>;
    /**
     * Programmatically close the keyboard.
     */
    close(): void;
    /**
     * @hidden
     */
    focusOutline(setting: any): void;
    hasFocusedTextInput(): boolean;
    /**
     * Set to true to hide the additional toolbar that is on top of the keyboard.
     * This toolbar features the Prev, Next, and Done buttons.
     * @param hidden
     */
    hideFormAccessoryBar(hidden: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Keyboard, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Keyboard>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuZC50cyIsInNvdXJjZXMiOlsia2V5Ym9hcmQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9jb25maWcnO1xuaW1wb3J0IHsgRG9tQ29udHJvbGxlciB9IGZyb20gJy4vZG9tLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICcuL3BsYXRmb3JtJztcbi8qKlxuICogQG5hbWUgS2V5Ym9hcmRcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBLZXlib2FyZGAgY2xhc3MgYWxsb3dzIHlvdSB0byB3b3JrIHdpdGggdGhlIGtleWJvYXJkIGV2ZW50cyBwcm92aWRlZFxuICogYnkgdGhlIElvbmljIGtleWJvYXJkIHBsdWdpbi5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHRzXG4gKiBleHBvcnQgY2xhc3MgTXlDbGFzcyB7XG4gKlxuICogICBjb25zdHJ1Y3RvcihwdWJsaWMga2V5Ym9hcmQ6IEtleWJvYXJkKSB7IH1cbiAqXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgS2V5Ym9hcmQge1xuICAgIHByaXZhdGUgX3BsdDtcbiAgICBwcml2YXRlIF96b25lO1xuICAgIHByaXZhdGUgX2RvbTtcbiAgICBfdG1yOiBudW1iZXI7XG4gICAgd2lsbFNob3c6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIHdpbGxIaWRlOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgZGlkU2hvdzogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgZGlkSGlkZTogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIGV2ZW50c0F2YWlsYWJsZTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbmZpZywgX3BsdDogUGxhdGZvcm0sIF96b25lOiBOZ1pvbmUsIF9kb206IERvbUNvbnRyb2xsZXIpO1xuICAgIHByaXZhdGUgbGlzdGVuVjIod2luKTtcbiAgICBwcml2YXRlIGxpc3RlblYxKHdpbik7XG4gICAgcHJpdmF0ZSBibHVyQWN0aXZlSW5wdXQoc2hvdWxkQmx1cik7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgdG8gc2VlIGlmIHRoZSBrZXlib2FyZCBpcyBvcGVuIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIGBgYHRzXG4gICAgICogZXhwb3J0IGNsYXNzIE15Q2xhc3Mge1xuICAgICAqICAgY29uc3RydWN0b3IocHVibGljIGtleWJvYXJkOiBLZXlib2FyZCkge1xuICAgICAqXG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiAgIGtleWJvYXJkQ2hlY2soKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdUaGUga2V5Ym9hcmQgaXMgb3BlbjonLCB0aGlzLmtleWJvYXJkLmlzT3BlbigpKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSByZXR1cm5zIGEgdHJ1ZSBvciBmYWxzZSB2YWx1ZSBpZiB0aGUga2V5Ym9hcmQgaXMgb3BlbiBvciBub3QuXG4gICAgICovXG4gICAgaXNPcGVuKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUga2V5Ym9hcmQgaXMgY2xvc2VkLCBjYWxsIGFueSBtZXRob2RzIHlvdSB3YW50LlxuICAgICAqXG4gICAgICogYGBgdHNcbiAgICAgKiBleHBvcnQgY2xhc3MgTXlDbGFzcyB7XG4gICAgICogICBjb25zdHJ1Y3RvcihwdWJsaWMga2V5Ym9hcmQ6IEtleWJvYXJkKSB7XG4gICAgICogICAgIHRoaXMua2V5Ym9hcmQub25DbG9zZSh0aGlzLmNsb3NlQ2FsbGJhY2spO1xuICAgICAqICAgfVxuICAgICAqICAgY2xvc2VDYWxsYmFjaygpIHtcbiAgICAgKiAgICAgLy8gY2FsbCB3aGF0IGV2ZXIgZnVuY3Rpb25hbGl0eSB5b3Ugd2FudCBvbiBrZXlib2FyZCBjbG9zZVxuICAgICAqICAgICBjb25zb2xlLmxvZygnQ2xvc2luZyB0aW1lJyk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgbWV0aG9kIHlvdSB3YW50IHRvIGNhbGwgd2hlbiB0aGUga2V5Ym9hcmQgaGFzIGJlZW4gY2xvc2VkLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSByZXR1cm5zIGEgY2FsbGJhY2sgdGhhdCBnZXRzIGZpcmVkIHdoZW4gdGhlIGtleWJvYXJkIGlzIGNsb3NlZC5cbiAgICAgKi9cbiAgICBvbkNsb3NlKGNhbGxiYWNrOiBGdW5jdGlvbiwgcG9sbGluZ0ludGVybnZhbD86IG51bWJlciwgcG9sbGluZ0NoZWNrc01heD86IG51bWJlcik6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBQcm9ncmFtbWF0aWNhbGx5IGNsb3NlIHRoZSBrZXlib2FyZC5cbiAgICAgKi9cbiAgICBjbG9zZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBmb2N1c091dGxpbmUoc2V0dGluZzogYW55KTogdm9pZDtcbiAgICBoYXNGb2N1c2VkVGV4dElucHV0KCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0IHRvIHRydWUgdG8gaGlkZSB0aGUgYWRkaXRpb25hbCB0b29sYmFyIHRoYXQgaXMgb24gdG9wIG9mIHRoZSBrZXlib2FyZC5cbiAgICAgKiBUaGlzIHRvb2xiYXIgZmVhdHVyZXMgdGhlIFByZXYsIE5leHQsIGFuZCBEb25lIGJ1dHRvbnMuXG4gICAgICogQHBhcmFtIGhpZGRlblxuICAgICAqL1xuICAgIGhpZGVGb3JtQWNjZXNzb3J5QmFyKGhpZGRlbjogYm9vbGVhbik6IHZvaWQ7XG59XG4iXX0=