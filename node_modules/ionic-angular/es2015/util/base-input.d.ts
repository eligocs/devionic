import { AfterContentInit, ElementRef, EventEmitter, Renderer } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NgControl } from '@angular/forms';
import { IonicFormInput } from './form';
import { Ion } from '../components/ion';
import { Config } from '../config/config';
import { Item } from '../components/item/item';
import { Form } from './form';
import { TimeoutDebouncer } from './debouncer';
import * as ɵngcc0 from '@angular/core';
export interface CommonInput<T> extends ControlValueAccessor, AfterContentInit, IonicFormInput {
    id: string;
    disabled: boolean;
    value: T;
    ionFocus: EventEmitter<CommonInput<T>>;
    ionChange: EventEmitter<BaseInput<T>>;
    ionBlur: EventEmitter<BaseInput<T>>;
    initFocus(): void;
    isFocus(): boolean;
    _inputNormalize(val: any): T;
    _inputShouldChange(val: T): boolean;
    _inputUpdated(): void;
}
export declare class BaseInput<T> extends Ion implements CommonInput<T> {
    private _defaultValue;
    _form: Form;
    _item: Item;
    _ngControl: NgControl;
    _value: T;
    _onChanged: Function;
    _onTouched: Function;
    _isFocus: boolean;
    _labelId: string;
    _disabled: boolean;
    _debouncer: TimeoutDebouncer;
    _init: boolean;
    _initModel: boolean;
    id: string;
    /**
     * @output {Range} Emitted when the range selector drag starts.
     */
    ionFocus: EventEmitter<BaseInput<T>>;
    /**
     * @output {Range} Emitted when the range value changes.
     */
    ionChange: EventEmitter<BaseInput<T>>;
    /**
     * @output {Range} Emitted when the range selector drag ends.
     */
    ionBlur: EventEmitter<BaseInput<T>>;
    /**
     * @input {boolean} If true, the user cannot interact with this element.
     */
    disabled: boolean;
    constructor(config: Config, elementRef: ElementRef, renderer: Renderer, name: string, _defaultValue: T, _form: Form, _item: Item, _ngControl: NgControl);
    value: T;
    setValue(val: any): void;
    /**
     * @hidden
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     */
    writeValue(val: any): void;
    /**
     * @hidden
     */
    _writeValue(val: any): boolean;
    /**
     * @hidden
     */
    _fireIonChange(): void;
    /**
     * @hidden
     */
    registerOnChange(fn: Function): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    /**
     * @hidden
     */
    _initialize(): void;
    /**
     * @hidden
     */
    _fireFocus(): void;
    /**
     * @hidden
     */
    _fireBlur(): void;
    /**
     * @hidden
     */
    _fireTouched(): void;
    /**
     * @hidden
     */
    private _setFocus(isFocused);
    /**
     * @hidden
     */
    private onChange();
    /**
     * @hidden
     */
    isFocus(): boolean;
    /**
     * @hidden
     */
    hasValue(): boolean;
    /**
     * @hidden
     */
    focusNext(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    ngAfterContentInit(): void;
    /**
     * @hidden
     */
    initFocus(): void;
    /**
     * @hidden
     */
    _inputNormalize(val: any): T;
    /**
     * @hidden
     */
    _inputShouldChange(val: T): boolean;
    /**
     * @hidden
     */
    _inputChangeEvent(): any;
    /**
     * @hidden
     */
    _inputNgModelEvent(): any;
    /**
     * @hidden
     */
    _inputUpdated(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseInput<any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseInput<any>, never, never, { "disabled": "disabled"; }, { "ionFocus": "ionFocus"; "ionChange": "ionChange"; "ionBlur": "ionBlur"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1pbnB1dC5kLnRzIiwic291cmNlcyI6WyJiYXNlLWlucHV0LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgUmVuZGVyZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSW9uaWNGb3JtSW5wdXQgfSBmcm9tICcuL2Zvcm0nO1xuaW1wb3J0IHsgSW9uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pb24nO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZyc7XG5pbXBvcnQgeyBJdGVtIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pdGVtL2l0ZW0nO1xuaW1wb3J0IHsgRm9ybSB9IGZyb20gJy4vZm9ybSc7XG5pbXBvcnQgeyBUaW1lb3V0RGVib3VuY2VyIH0gZnJvbSAnLi9kZWJvdW5jZXInO1xuZXhwb3J0IGludGVyZmFjZSBDb21tb25JbnB1dDxUPiBleHRlbmRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBZnRlckNvbnRlbnRJbml0LCBJb25pY0Zvcm1JbnB1dCB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB2YWx1ZTogVDtcbiAgICBpb25Gb2N1czogRXZlbnRFbWl0dGVyPENvbW1vbklucHV0PFQ+PjtcbiAgICBpb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxCYXNlSW5wdXQ8VD4+O1xuICAgIGlvbkJsdXI6IEV2ZW50RW1pdHRlcjxCYXNlSW5wdXQ8VD4+O1xuICAgIGluaXRGb2N1cygpOiB2b2lkO1xuICAgIGlzRm9jdXMoKTogYm9vbGVhbjtcbiAgICBfaW5wdXROb3JtYWxpemUodmFsOiBhbnkpOiBUO1xuICAgIF9pbnB1dFNob3VsZENoYW5nZSh2YWw6IFQpOiBib29sZWFuO1xuICAgIF9pbnB1dFVwZGF0ZWQoKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJhc2VJbnB1dDxUPiBleHRlbmRzIElvbiBpbXBsZW1lbnRzIENvbW1vbklucHV0PFQ+IHtcbiAgICBwcml2YXRlIF9kZWZhdWx0VmFsdWU7XG4gICAgX2Zvcm06IEZvcm07XG4gICAgX2l0ZW06IEl0ZW07XG4gICAgX25nQ29udHJvbDogTmdDb250cm9sO1xuICAgIF92YWx1ZTogVDtcbiAgICBfb25DaGFuZ2VkOiBGdW5jdGlvbjtcbiAgICBfb25Ub3VjaGVkOiBGdW5jdGlvbjtcbiAgICBfaXNGb2N1czogYm9vbGVhbjtcbiAgICBfbGFiZWxJZDogc3RyaW5nO1xuICAgIF9kaXNhYmxlZDogYm9vbGVhbjtcbiAgICBfZGVib3VuY2VyOiBUaW1lb3V0RGVib3VuY2VyO1xuICAgIF9pbml0OiBib29sZWFuO1xuICAgIF9pbml0TW9kZWw6IGJvb2xlYW47XG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAb3V0cHV0IHtSYW5nZX0gRW1pdHRlZCB3aGVuIHRoZSByYW5nZSBzZWxlY3RvciBkcmFnIHN0YXJ0cy5cbiAgICAgKi9cbiAgICBpb25Gb2N1czogRXZlbnRFbWl0dGVyPEJhc2VJbnB1dDxUPj47XG4gICAgLyoqXG4gICAgICogQG91dHB1dCB7UmFuZ2V9IEVtaXR0ZWQgd2hlbiB0aGUgcmFuZ2UgdmFsdWUgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBpb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxCYXNlSW5wdXQ8VD4+O1xuICAgIC8qKlxuICAgICAqIEBvdXRwdXQge1JhbmdlfSBFbWl0dGVkIHdoZW4gdGhlIHJhbmdlIHNlbGVjdG9yIGRyYWcgZW5kcy5cbiAgICAgKi9cbiAgICBpb25CbHVyOiBFdmVudEVtaXR0ZXI8QmFzZUlucHV0PFQ+PjtcbiAgICAvKipcbiAgICAgKiBAaW5wdXQge2Jvb2xlYW59IElmIHRydWUsIHRoZSB1c2VyIGNhbm5vdCBpbnRlcmFjdCB3aXRoIHRoaXMgZWxlbWVudC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbmZpZywgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBuYW1lOiBzdHJpbmcsIF9kZWZhdWx0VmFsdWU6IFQsIF9mb3JtOiBGb3JtLCBfaXRlbTogSXRlbSwgX25nQ29udHJvbDogTmdDb250cm9sKTtcbiAgICB2YWx1ZTogVDtcbiAgICBzZXRWYWx1ZSh2YWw6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHdyaXRlVmFsdWUodmFsOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBfd3JpdGVWYWx1ZSh2YWw6IGFueSk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9maXJlSW9uQ2hhbmdlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IEZ1bmN0aW9uKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9pbml0aWFsaXplKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9maXJlRm9jdXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2ZpcmVCbHVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9maXJlVG91Y2hlZCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9zZXRGb2N1cyhpc0ZvY3VzZWQpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIG9uQ2hhbmdlKCk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGlzRm9jdXMoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFzVmFsdWUoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZm9jdXNOZXh0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpbml0Rm9jdXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2lucHV0Tm9ybWFsaXplKHZhbDogYW55KTogVDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2lucHV0U2hvdWxkQ2hhbmdlKHZhbDogVCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9pbnB1dENoYW5nZUV2ZW50KCk6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2lucHV0TmdNb2RlbEV2ZW50KCk6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2lucHV0VXBkYXRlZCgpOiB2b2lkO1xufVxuIl19