import { App } from '../components/app/app';
import { Config } from '../config/config';
import { DomController } from '../platform/dom-controller';
import { GestureController } from '../gestures/gesture-controller';
import { Platform } from '../platform/platform';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class TapClick {
    private plt;
    private app;
    private gestureCtrl;
    private disableClick;
    private usePolyfill;
    private activator;
    private startCoord;
    private activatableEle;
    private events;
    private pointerEvents;
    private lastTouchEnd;
    private dispatchClick;
    constructor(config: Config, plt: Platform, dom: DomController, app: App, gestureCtrl: GestureController);
    pointerStart(ev: any): boolean;
    pointerMove(ev: UIEvent): void;
    pointerEnd(ev: any, pointerEventType: number): void;
    pointerCancel(ev: UIEvent): void;
    shouldCancelEvent(ev: UIEvent): boolean;
    click(ev: any): void;
    private shouldCancelClick(ev);
    private profileClickDelay(ev);
    handleTapPolyfill(ev: any): void;
    isDisabledNativeClick(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TapClick, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<TapClick>;
}
/**
 * @hidden
 */
export declare function isActivatable(ele: HTMLElement): boolean;
/**
 * @hidden
 */
export declare function setupTapClick(config: Config, plt: Platform, dom: DomController, app: App, gestureCtrl: GestureController): () => TapClick;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFwLWNsaWNrLmQudHMiLCJzb3VyY2VzIjpbInRhcC1jbGljay5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAgfSBmcm9tICcuLi9jb21wb25lbnRzL2FwcC9hcHAnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZyc7XG5pbXBvcnQgeyBEb21Db250cm9sbGVyIH0gZnJvbSAnLi4vcGxhdGZvcm0vZG9tLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgR2VzdHVyZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9nZXN0dXJlcy9nZXN0dXJlLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICcuLi9wbGF0Zm9ybS9wbGF0Zm9ybSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFwQ2xpY2sge1xuICAgIHByaXZhdGUgcGx0O1xuICAgIHByaXZhdGUgYXBwO1xuICAgIHByaXZhdGUgZ2VzdHVyZUN0cmw7XG4gICAgcHJpdmF0ZSBkaXNhYmxlQ2xpY2s7XG4gICAgcHJpdmF0ZSB1c2VQb2x5ZmlsbDtcbiAgICBwcml2YXRlIGFjdGl2YXRvcjtcbiAgICBwcml2YXRlIHN0YXJ0Q29vcmQ7XG4gICAgcHJpdmF0ZSBhY3RpdmF0YWJsZUVsZTtcbiAgICBwcml2YXRlIGV2ZW50cztcbiAgICBwcml2YXRlIHBvaW50ZXJFdmVudHM7XG4gICAgcHJpdmF0ZSBsYXN0VG91Y2hFbmQ7XG4gICAgcHJpdmF0ZSBkaXNwYXRjaENsaWNrO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnLCBwbHQ6IFBsYXRmb3JtLCBkb206IERvbUNvbnRyb2xsZXIsIGFwcDogQXBwLCBnZXN0dXJlQ3RybDogR2VzdHVyZUNvbnRyb2xsZXIpO1xuICAgIHBvaW50ZXJTdGFydChldjogYW55KTogYm9vbGVhbjtcbiAgICBwb2ludGVyTW92ZShldjogVUlFdmVudCk6IHZvaWQ7XG4gICAgcG9pbnRlckVuZChldjogYW55LCBwb2ludGVyRXZlbnRUeXBlOiBudW1iZXIpOiB2b2lkO1xuICAgIHBvaW50ZXJDYW5jZWwoZXY6IFVJRXZlbnQpOiB2b2lkO1xuICAgIHNob3VsZENhbmNlbEV2ZW50KGV2OiBVSUV2ZW50KTogYm9vbGVhbjtcbiAgICBjbGljayhldjogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIHNob3VsZENhbmNlbENsaWNrKGV2KTtcbiAgICBwcml2YXRlIHByb2ZpbGVDbGlja0RlbGF5KGV2KTtcbiAgICBoYW5kbGVUYXBQb2x5ZmlsbChldjogYW55KTogdm9pZDtcbiAgICBpc0Rpc2FibGVkTmF0aXZlQ2xpY2soKTogYm9vbGVhbjtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBpc0FjdGl2YXRhYmxlKGVsZTogSFRNTEVsZW1lbnQpOiBib29sZWFuO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHNldHVwVGFwQ2xpY2soY29uZmlnOiBDb25maWcsIHBsdDogUGxhdGZvcm0sIGRvbTogRG9tQ29udHJvbGxlciwgYXBwOiBBcHAsIGdlc3R1cmVDdHJsOiBHZXN0dXJlQ29udHJvbGxlcik6ICgpID0+IFRhcENsaWNrO1xuIl19