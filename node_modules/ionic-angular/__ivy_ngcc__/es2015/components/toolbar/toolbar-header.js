import { Directive, ElementRef, Optional, Renderer } from '@angular/core';
import { Config } from '../../config/config';
import { Ion } from '../ion';
import { ViewController } from '../../navigation/view-controller';
/**
 * @name Header
 * @description
 * Header is a parent component that holds the navbar and toolbar component.
 * It's important to note that `ion-header` needs to be one of the three root elements of a page
 *
 * @usage
 *
 * ```html
 * <ion-header>
 *   <ion-navbar>
 *     <ion-title>Page1</ion-title>
 *   </ion-navbar>
 *
 *   <ion-toolbar>
 *     <ion-title>Subheader</ion-title>
 *   </ion-toolbar>
 * </ion-header>
 *
 * <ion-content></ion-content>
 * ```
 *
 */
import * as ɵngcc0 from '@angular/core';
export class Header extends Ion {
    constructor(config, elementRef, renderer, viewCtrl) {
        super(config, elementRef, renderer, 'header');
        viewCtrl && viewCtrl._setHeader(this);
    }
}
Header.ɵfac = function Header_Factory(t) { return new (t || Header)(ɵngcc0.ɵɵdirectiveInject(Config), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer), ɵngcc0.ɵɵdirectiveInject(ViewController, 8)); };
Header.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Header, selectors: [["ion-header"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
Header.ctorParameters = () => [
    { type: Config, },
    { type: ElementRef, },
    { type: Renderer, },
    { type: ViewController, decorators: [{ type: Optional },] },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Header, [{
        type: Directive,
        args: [{
                selector: 'ion-header'
            }]
    }], function () { return [{ type: Config }, { type: ɵngcc0.ElementRef }, { type: Renderer }, { type: ViewController, decorators: [{
                type: Optional
            }] }]; }, null); })();

//# sourceMappingURL=toolbar-header.js.map